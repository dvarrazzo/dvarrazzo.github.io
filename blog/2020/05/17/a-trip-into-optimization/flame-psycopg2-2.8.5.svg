<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="870" onload="init(evt)" viewBox="0 0 1200 870" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="870" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy</text><text id="details" x="10" y="853.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="853.00"> </text><svg id="frames" x="10" width="1180"><g><title>&lt;module&gt; (asyncio/__init__.py) (64 samples, 1.24%)</title><rect x="0.6611%" y="148" width="1.2444%" height="15" fill="rgb(227,0,7)"/><text x="0.9111%" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (64 samples, 1.24%)</title><rect x="0.6611%" y="164" width="1.2444%" height="15" fill="rgb(217,0,24)"/><text x="0.9111%" y="174.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (64 samples, 1.24%)</title><rect x="0.6611%" y="180" width="1.2444%" height="15" fill="rgb(221,193,54)"/><text x="0.9111%" y="190.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (64 samples, 1.24%)</title><rect x="0.6611%" y="196" width="1.2444%" height="15" fill="rgb(248,212,6)"/><text x="0.9111%" y="206.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (64 samples, 1.24%)</title><rect x="0.6611%" y="212" width="1.2444%" height="15" fill="rgb(208,68,35)"/><text x="0.9111%" y="222.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (64 samples, 1.24%)</title><rect x="0.6611%" y="228" width="1.2444%" height="15" fill="rgb(232,128,0)"/><text x="0.9111%" y="238.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (73 samples, 1.42%)</title><rect x="4.6276%" y="820" width="1.4194%" height="15" fill="rgb(207,160,47)"/><text x="4.8776%" y="830.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (122 samples, 2.37%)</title><rect x="3.8110%" y="740" width="2.3722%" height="15" fill="rgb(228,23,34)"/><text x="4.0610%" y="750.50">_h..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (120 samples, 2.33%)</title><rect x="3.8499%" y="756" width="2.3333%" height="15" fill="rgb(218,30,26)"/><text x="4.0999%" y="766.50">_..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (119 samples, 2.31%)</title><rect x="3.8693%" y="772" width="2.3138%" height="15" fill="rgb(220,122,19)"/><text x="4.1193%" y="782.50">_..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (112 samples, 2.18%)</title><rect x="4.0054%" y="788" width="2.1777%" height="15" fill="rgb(250,228,42)"/><text x="4.2554%" y="798.50">_..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (84 samples, 1.63%)</title><rect x="4.5499%" y="804" width="1.6333%" height="15" fill="rgb(240,193,28)"/><text x="4.7999%" y="814.50"></text></g><g><title>__pyx_pymod_exec_pgproto (asyncpg/pgproto/pgproto.pyx) (125 samples, 2.43%)</title><rect x="3.7721%" y="708" width="2.4305%" height="15" fill="rgb(216,20,37)"/><text x="4.0221%" y="718.50">__..</text></g><g><title>__Pyx_Import (datetime.pxd) (125 samples, 2.43%)</title><rect x="3.7721%" y="724" width="2.4305%" height="15" fill="rgb(206,188,39)"/><text x="4.0221%" y="734.50">__..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (157 samples, 3.05%)</title><rect x="3.7527%" y="676" width="3.0527%" height="15" fill="rgb(217,207,13)"/><text x="4.0027%" y="686.50">exe..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (157 samples, 3.05%)</title><rect x="3.7527%" y="692" width="3.0527%" height="15" fill="rgb(231,73,38)"/><text x="4.0027%" y="702.50">_ca..</text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (235 samples, 4.57%)</title><rect x="2.4694%" y="388" width="4.5693%" height="15" fill="rgb(225,20,46)"/><text x="2.7194%" y="398.50">_hand..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (235 samples, 4.57%)</title><rect x="2.4694%" y="404" width="4.5693%" height="15" fill="rgb(210,31,41)"/><text x="2.7194%" y="414.50">_call..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (235 samples, 4.57%)</title><rect x="2.4694%" y="420" width="4.5693%" height="15" fill="rgb(221,200,47)"/><text x="2.7194%" y="430.50">_find..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (235 samples, 4.57%)</title><rect x="2.4694%" y="436" width="4.5693%" height="15" fill="rgb(226,26,5)"/><text x="2.7194%" y="446.50">_find..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (235 samples, 4.57%)</title><rect x="2.4694%" y="452" width="4.5693%" height="15" fill="rgb(249,33,26)"/><text x="2.7194%" y="462.50">_load..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (235 samples, 4.57%)</title><rect x="2.4694%" y="468" width="4.5693%" height="15" fill="rgb(235,183,28)"/><text x="2.7194%" y="478.50">exec_..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (235 samples, 4.57%)</title><rect x="2.4694%" y="484" width="4.5693%" height="15" fill="rgb(221,5,38)"/><text x="2.7194%" y="494.50">_call..</text></g><g><title>&lt;module&gt; (asyncpg/protocol/__init__.py) (219 samples, 4.26%)</title><rect x="2.7805%" y="500" width="4.2582%" height="15" fill="rgb(247,18,42)"/><text x="3.0305%" y="510.50">&lt;modu..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (219 samples, 4.26%)</title><rect x="2.7805%" y="516" width="4.2582%" height="15" fill="rgb(241,131,45)"/><text x="3.0305%" y="526.50">_find..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (219 samples, 4.26%)</title><rect x="2.7805%" y="532" width="4.2582%" height="15" fill="rgb(249,31,29)"/><text x="3.0305%" y="542.50">_find..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (219 samples, 4.26%)</title><rect x="2.7805%" y="548" width="4.2582%" height="15" fill="rgb(225,111,53)"/><text x="3.0305%" y="558.50">_load..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (219 samples, 4.26%)</title><rect x="2.7805%" y="564" width="4.2582%" height="15" fill="rgb(238,160,17)"/><text x="3.0305%" y="574.50">exec_..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (218 samples, 4.24%)</title><rect x="2.7999%" y="580" width="4.2388%" height="15" fill="rgb(214,148,48)"/><text x="3.0499%" y="590.50">_call..</text></g><g><title>__pyx_pymod_exec_protocol (asyncpg/protocol/protocol.pyx) (217 samples, 4.22%)</title><rect x="2.8194%" y="596" width="4.2193%" height="15" fill="rgb(232,36,49)"/><text x="3.0694%" y="606.50">__pyx..</text></g><g><title>__Pyx_modinit_type_init_code (asyncpg/protocol/protocol.pyx) (216 samples, 4.20%)</title><rect x="2.8388%" y="612" width="4.1999%" height="15" fill="rgb(209,103,24)"/><text x="3.0888%" y="622.50">__Pyx..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (214 samples, 4.16%)</title><rect x="2.8777%" y="628" width="4.1610%" height="15" fill="rgb(229,88,8)"/><text x="3.1277%" y="638.50">_find..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (211 samples, 4.10%)</title><rect x="2.9360%" y="644" width="4.1027%" height="15" fill="rgb(213,181,19)"/><text x="3.1860%" y="654.50">_fin..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (170 samples, 3.31%)</title><rect x="3.7332%" y="660" width="3.3055%" height="15" fill="rgb(254,191,54)"/><text x="3.9832%" y="670.50">_lo..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (272 samples, 5.29%)</title><rect x="1.9249%" y="356" width="5.2887%" height="15" fill="rgb(241,83,37)"/><text x="2.1749%" y="366.50">_call_..</text></g><g><title>&lt;module&gt; (asyncpg/connect_utils.py) (269 samples, 5.23%)</title><rect x="1.9833%" y="372" width="5.2304%" height="15" fill="rgb(233,36,39)"/><text x="2.2333%" y="382.50">&lt;modul..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (282 samples, 5.48%)</title><rect x="1.9249%" y="340" width="5.4832%" height="15" fill="rgb(226,3,54)"/><text x="2.1749%" y="350.50">exec_mo..</text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (284 samples, 5.52%)</title><rect x="1.9249%" y="260" width="5.5221%" height="15" fill="rgb(245,192,40)"/><text x="2.1749%" y="270.50">_handle..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (284 samples, 5.52%)</title><rect x="1.9249%" y="276" width="5.5221%" height="15" fill="rgb(238,167,29)"/><text x="2.1749%" y="286.50">_call_w..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (284 samples, 5.52%)</title><rect x="1.9249%" y="292" width="5.5221%" height="15" fill="rgb(232,182,51)"/><text x="2.1749%" y="302.50">_find_a..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (284 samples, 5.52%)</title><rect x="1.9249%" y="308" width="5.5221%" height="15" fill="rgb(231,60,39)"/><text x="2.1749%" y="318.50">_find_a..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (284 samples, 5.52%)</title><rect x="1.9249%" y="324" width="5.5221%" height="15" fill="rgb(208,69,12)"/><text x="2.1749%" y="334.50">_load_u..</text></g><g><title>&lt;module&gt; (asyncpg/connection.py) (289 samples, 5.62%)</title><rect x="1.9249%" y="244" width="5.6193%" height="15" fill="rgb(235,93,37)"/><text x="2.1749%" y="254.50">&lt;module..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (293 samples, 5.70%)</title><rect x="1.9249%" y="228" width="5.6971%" height="15" fill="rgb(213,116,39)"/><text x="2.1749%" y="238.50">_call_w..</text></g><g><title>&lt;module&gt; (asyncpg/__init__.py) (295 samples, 5.74%)</title><rect x="1.9055%" y="148" width="5.7360%" height="15" fill="rgb(222,207,29)"/><text x="2.1555%" y="158.50">&lt;module..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (294 samples, 5.72%)</title><rect x="1.9249%" y="164" width="5.7165%" height="15" fill="rgb(206,96,30)"/><text x="2.1749%" y="174.50">_find_a..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (294 samples, 5.72%)</title><rect x="1.9249%" y="180" width="5.7165%" height="15" fill="rgb(218,138,4)"/><text x="2.1749%" y="190.50">_find_a..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (294 samples, 5.72%)</title><rect x="1.9249%" y="196" width="5.7165%" height="15" fill="rgb(250,191,14)"/><text x="2.1749%" y="206.50">_load_u..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (294 samples, 5.72%)</title><rect x="1.9249%" y="212" width="5.7165%" height="15" fill="rgb(239,60,40)"/><text x="2.1749%" y="222.50">exec_mo..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (89 samples, 1.73%)</title><rect x="7.7581%" y="452" width="1.7305%" height="15" fill="rgb(206,27,48)"/><text x="8.0081%" y="462.50"></text></g><g><title>&lt;module&gt; (numpy/lib/type_check.py) (80 samples, 1.56%)</title><rect x="7.9331%" y="468" width="1.5555%" height="15" fill="rgb(225,35,8)"/><text x="8.1831%" y="478.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (80 samples, 1.56%)</title><rect x="7.9331%" y="484" width="1.5555%" height="15" fill="rgb(250,213,24)"/><text x="8.1831%" y="494.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (80 samples, 1.56%)</title><rect x="7.9331%" y="500" width="1.5555%" height="15" fill="rgb(247,123,22)"/><text x="8.1831%" y="510.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (80 samples, 1.56%)</title><rect x="7.9331%" y="516" width="1.5555%" height="15" fill="rgb(231,138,38)"/><text x="8.1831%" y="526.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (80 samples, 1.56%)</title><rect x="7.9331%" y="532" width="1.5555%" height="15" fill="rgb(231,145,46)"/><text x="8.1831%" y="542.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (80 samples, 1.56%)</title><rect x="7.9331%" y="548" width="1.5555%" height="15" fill="rgb(251,118,11)"/><text x="8.1831%" y="558.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (80 samples, 1.56%)</title><rect x="7.9331%" y="564" width="1.5555%" height="15" fill="rgb(217,147,25)"/><text x="8.1831%" y="574.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (80 samples, 1.56%)</title><rect x="7.9331%" y="580" width="1.5555%" height="15" fill="rgb(247,81,37)"/><text x="8.1831%" y="590.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (80 samples, 1.56%)</title><rect x="7.9331%" y="596" width="1.5555%" height="15" fill="rgb(209,12,38)"/><text x="8.1831%" y="606.50"></text></g><g><title>&lt;module&gt; (numpy/core/__init__.py) (80 samples, 1.56%)</title><rect x="7.9331%" y="612" width="1.5555%" height="15" fill="rgb(227,1,9)"/><text x="8.1831%" y="622.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (58 samples, 1.13%)</title><rect x="8.3609%" y="628" width="1.1277%" height="15" fill="rgb(248,47,43)"/><text x="8.6109%" y="638.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (58 samples, 1.13%)</title><rect x="8.3609%" y="644" width="1.1277%" height="15" fill="rgb(221,10,30)"/><text x="8.6109%" y="654.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (58 samples, 1.13%)</title><rect x="8.3609%" y="660" width="1.1277%" height="15" fill="rgb(210,229,1)"/><text x="8.6109%" y="670.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (58 samples, 1.13%)</title><rect x="8.3609%" y="676" width="1.1277%" height="15" fill="rgb(222,148,37)"/><text x="8.6109%" y="686.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (58 samples, 1.13%)</title><rect x="8.3609%" y="692" width="1.1277%" height="15" fill="rgb(234,67,33)"/><text x="8.6109%" y="702.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (95 samples, 1.85%)</title><rect x="7.7581%" y="292" width="1.8472%" height="15" fill="rgb(247,98,35)"/><text x="8.0081%" y="302.50">_..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (95 samples, 1.85%)</title><rect x="7.7581%" y="308" width="1.8472%" height="15" fill="rgb(247,138,52)"/><text x="8.0081%" y="318.50">_..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (95 samples, 1.85%)</title><rect x="7.7581%" y="324" width="1.8472%" height="15" fill="rgb(213,79,30)"/><text x="8.0081%" y="334.50">_..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (95 samples, 1.85%)</title><rect x="7.7581%" y="340" width="1.8472%" height="15" fill="rgb(246,177,23)"/><text x="8.0081%" y="350.50">e..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (95 samples, 1.85%)</title><rect x="7.7581%" y="356" width="1.8472%" height="15" fill="rgb(230,62,27)"/><text x="8.0081%" y="366.50">_..</text></g><g><title>&lt;module&gt; (numpy/lib/__init__.py) (95 samples, 1.85%)</title><rect x="7.7581%" y="372" width="1.8472%" height="15" fill="rgb(216,154,8)"/><text x="8.0081%" y="382.50">&lt;..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (95 samples, 1.85%)</title><rect x="7.7581%" y="388" width="1.8472%" height="15" fill="rgb(244,35,45)"/><text x="8.0081%" y="398.50">_..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (95 samples, 1.85%)</title><rect x="7.7581%" y="404" width="1.8472%" height="15" fill="rgb(251,115,12)"/><text x="8.0081%" y="414.50">_..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (95 samples, 1.85%)</title><rect x="7.7581%" y="420" width="1.8472%" height="15" fill="rgb(240,54,50)"/><text x="8.0081%" y="430.50">_..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (95 samples, 1.85%)</title><rect x="7.7581%" y="436" width="1.8472%" height="15" fill="rgb(233,84,52)"/><text x="8.0081%" y="446.50">e..</text></g><g><title>&lt;module&gt; (numpy/add_newdocs.py) (98 samples, 1.91%)</title><rect x="7.7387%" y="276" width="1.9055%" height="15" fill="rgb(207,117,47)"/><text x="7.9887%" y="286.50">&lt;..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (101 samples, 1.96%)</title><rect x="7.7387%" y="260" width="1.9638%" height="15" fill="rgb(249,43,39)"/><text x="7.9887%" y="270.50">_..</text></g><g><title>&lt;module&gt; (numpy/__init__.py) (104 samples, 2.02%)</title><rect x="7.7387%" y="148" width="2.0222%" height="15" fill="rgb(209,38,44)"/><text x="7.9887%" y="158.50">&lt;..</text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (104 samples, 2.02%)</title><rect x="7.7387%" y="164" width="2.0222%" height="15" fill="rgb(236,212,23)"/><text x="7.9887%" y="174.50">_..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (104 samples, 2.02%)</title><rect x="7.7387%" y="180" width="2.0222%" height="15" fill="rgb(242,79,21)"/><text x="7.9887%" y="190.50">_..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (104 samples, 2.02%)</title><rect x="7.7387%" y="196" width="2.0222%" height="15" fill="rgb(211,96,35)"/><text x="7.9887%" y="206.50">_..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (104 samples, 2.02%)</title><rect x="7.7387%" y="212" width="2.0222%" height="15" fill="rgb(253,215,40)"/><text x="7.9887%" y="222.50">_..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (104 samples, 2.02%)</title><rect x="7.7387%" y="228" width="2.0222%" height="15" fill="rgb(211,81,21)"/><text x="7.9887%" y="238.50">_..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (104 samples, 2.02%)</title><rect x="7.7387%" y="244" width="2.0222%" height="15" fill="rgb(208,190,38)"/><text x="7.9887%" y="254.50">e..</text></g><g><title>&lt;module&gt; (psycopg3/connection.py) (55 samples, 1.07%)</title><rect x="10.0331%" y="244" width="1.0694%" height="15" fill="rgb(235,213,38)"/><text x="10.2831%" y="254.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (63 samples, 1.22%)</title><rect x="10.0331%" y="228" width="1.2250%" height="15" fill="rgb(237,122,38)"/><text x="10.2831%" y="238.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (68 samples, 1.32%)</title><rect x="10.0136%" y="212" width="1.3222%" height="15" fill="rgb(244,218,35)"/><text x="10.2636%" y="222.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (83 samples, 1.61%)</title><rect x="9.7803%" y="164" width="1.6138%" height="15" fill="rgb(240,68,47)"/><text x="10.0303%" y="174.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (79 samples, 1.54%)</title><rect x="9.8581%" y="180" width="1.5361%" height="15" fill="rgb(210,16,53)"/><text x="10.1081%" y="190.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (72 samples, 1.40%)</title><rect x="9.9942%" y="196" width="1.4000%" height="15" fill="rgb(235,124,12)"/><text x="10.2442%" y="206.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (630 samples, 12.25%)</title><rect x="0.0194%" y="68" width="12.2497%" height="15" fill="rgb(224,169,11)"/><text x="0.2694%" y="78.50">_find_and_load (&lt;f..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (630 samples, 12.25%)</title><rect x="0.0194%" y="84" width="12.2497%" height="15" fill="rgb(250,166,2)"/><text x="0.2694%" y="94.50">_find_and_load_unl..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (630 samples, 12.25%)</title><rect x="0.0194%" y="100" width="12.2497%" height="15" fill="rgb(242,216,29)"/><text x="0.2694%" y="110.50">_load_unlocked (&lt;f..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (630 samples, 12.25%)</title><rect x="0.0194%" y="116" width="12.2497%" height="15" fill="rgb(230,116,27)"/><text x="0.2694%" y="126.50">exec_module (&lt;froz..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (630 samples, 12.25%)</title><rect x="0.0194%" y="132" width="12.2497%" height="15" fill="rgb(228,99,48)"/><text x="0.2694%" y="142.50">_call_with_frames_..</text></g><g><title>&lt;module&gt; (psycopg3/__init__.py) (129 samples, 2.51%)</title><rect x="9.7608%" y="148" width="2.5083%" height="15" fill="rgb(253,11,6)"/><text x="10.0108%" y="158.50">&lt;m..</text></g><g><title>PQconsumeInput (fe-exec.c) (157 samples, 3.05%)</title><rect x="14.8163%" y="340" width="3.0527%" height="15" fill="rgb(247,143,39)"/><text x="15.0663%" y="350.50">PQc..</text></g><g><title>pqReadData (fe-misc.c) (157 samples, 3.05%)</title><rect x="14.8163%" y="356" width="3.0527%" height="15" fill="rgb(236,97,10)"/><text x="15.0663%" y="366.50">pqR..</text></g><g><title>pqsecure_raw_read (fe-secure.c) (156 samples, 3.03%)</title><rect x="14.8357%" y="372" width="3.0332%" height="15" fill="rgb(233,208,19)"/><text x="15.0857%" y="382.50">pqs..</text></g><g><title>recv (socket2.h) (155 samples, 3.01%)</title><rect x="14.8551%" y="388" width="3.0138%" height="15" fill="rgb(216,164,2)"/><text x="15.1051%" y="398.50">rec..</text></g><g><title>recv (libc-2.27.so) (155 samples, 3.01%)</title><rect x="14.8551%" y="404" width="3.0138%" height="15" fill="rgb(220,129,5)"/><text x="15.1051%" y="414.50">rec..</text></g><g><title>pqGetInt (fe-misc.c) (116 samples, 2.26%)</title><rect x="20.9411%" y="404" width="2.2555%" height="15" fill="rgb(242,17,10)"/><text x="21.1911%" y="414.50">p..</text></g><g><title>pqRowProcessor (fe-exec.c) (631 samples, 12.27%)</title><rect x="23.1966%" y="404" width="12.2691%" height="15" fill="rgb(242,107,0)"/><text x="23.4466%" y="414.50">pqRowProcessor (fe..</text></g><g><title>pqResultAlloc (fe-exec.c) (308 samples, 5.99%)</title><rect x="29.4770%" y="420" width="5.9887%" height="15" fill="rgb(251,28,31)"/><text x="29.7270%" y="430.50">pqResult..</text></g><g><title>__libc_malloc (libc-2.27.so) (248 samples, 4.82%)</title><rect x="30.6436%" y="436" width="4.8221%" height="15" fill="rgb(233,223,10)"/><text x="30.8936%" y="446.50">__libc..</text></g><g><title>0x7f3a1b34e0dd (libc-2.27.so) (202 samples, 3.93%)</title><rect x="31.5380%" y="452" width="3.9277%" height="15" fill="rgb(215,21,27)"/><text x="31.7880%" y="462.50">0x7f..</text></g><g><title>getAnotherTuple (fe-protocol3.c) (941 samples, 18.30%)</title><rect x="18.6078%" y="388" width="18.2967%" height="15" fill="rgb(232,23,21)"/><text x="18.8578%" y="398.50">getAnotherTuple (fe-protocol3..</text></g><g><title>pqSkipnchar (fe-misc.c) (74 samples, 1.44%)</title><rect x="35.4657%" y="404" width="1.4388%" height="15" fill="rgb(244,5,23)"/><text x="35.7157%" y="414.50"></text></g><g><title>_conn_poll_advance_read (connection_int.c) (1,168 samples, 22.71%)</title><rect x="14.7579%" y="308" width="22.7105%" height="15" fill="rgb(226,81,46)"/><text x="15.0079%" y="318.50">_conn_poll_advance_read (connection_..</text></g><g><title>pq_get_result_async (pqpath.c) (1,167 samples, 22.69%)</title><rect x="14.7774%" y="324" width="22.6910%" height="15" fill="rgb(247,70,30)"/><text x="15.0274%" y="334.50">pq_get_result_async (pqpath.c)</text></g><g><title>conn_notifies_process (connection_int.c) (1,001 samples, 19.46%)</title><rect x="18.0051%" y="340" width="19.4633%" height="15" fill="rgb(212,68,19)"/><text x="18.2551%" y="350.50">conn_notifies_process (connect..</text></g><g><title>PQnotifies (fe-exec.c) (999 samples, 19.42%)</title><rect x="18.0439%" y="356" width="19.4245%" height="15" fill="rgb(240,187,13)"/><text x="18.2939%" y="366.50">PQnotifies (fe-exec.c)</text></g><g><title>pqParseInput3 (fe-protocol3.c) (998 samples, 19.41%)</title><rect x="18.0634%" y="372" width="19.4050%" height="15" fill="rgb(223,113,26)"/><text x="18.3134%" y="382.50">pqParseInput3 (fe-protocol3.c)</text></g><g><title>_make_column (pqpath.c) (80 samples, 1.56%)</title><rect x="37.7795%" y="340" width="1.5555%" height="15" fill="rgb(206,192,2)"/><text x="38.0295%" y="350.50"></text></g><g><title>_pq_fetch_tuples (pqpath.c) (96 samples, 1.87%)</title><rect x="37.5267%" y="324" width="1.8666%" height="15" fill="rgb(241,108,4)"/><text x="37.7767%" y="334.50">_..</text></g><g><title>Handle__run (uvloop/cbhandles.pyx) (1,405 samples, 27.32%)</title><rect x="12.6580%" y="244" width="27.3187%" height="15" fill="rgb(247,173,49)"/><text x="12.9080%" y="254.50">Handle__run (uvloop/cbhandles.pyx)</text></g><g><title>_ready (aiopg/connection.py) (1,383 samples, 26.89%)</title><rect x="13.0857%" y="260" width="26.8909%" height="15" fill="rgb(224,114,35)"/><text x="13.3357%" y="270.50">_ready (aiopg/connection.py)</text></g><g><title>psyco_conn_poll (connection_type.c) (1,306 samples, 25.39%)</title><rect x="14.5829%" y="276" width="25.3937%" height="15" fill="rgb(245,159,27)"/><text x="14.8329%" y="286.50">psyco_conn_poll (connection_type.c)</text></g><g><title>conn_poll (connection_int.c) (1,303 samples, 25.34%)</title><rect x="14.6413%" y="292" width="25.3354%" height="15" fill="rgb(245,172,44)"/><text x="14.8913%" y="302.50">conn_poll (connection_int.c)</text></g><g><title>pq_fetch (pqpath.c) (128 samples, 2.49%)</title><rect x="37.4878%" y="308" width="2.4888%" height="15" fill="rgb(236,23,11)"/><text x="37.7378%" y="318.50">pq..</text></g><g><title>loop___on_uvpoll_event (poll.pyx) (1,421 samples, 27.63%)</title><rect x="12.4635%" y="228" width="27.6298%" height="15" fill="rgb(205,117,38)"/><text x="12.7135%" y="238.50">loop___on_uvpoll_event (poll.pyx)</text></g><g><title>uv__epoll_wait (linux-syscalls.c) (195 samples, 3.79%)</title><rect x="40.0933%" y="228" width="3.7916%" height="15" fill="rgb(237,72,25)"/><text x="40.3433%" y="238.50">uv__..</text></g><g><title>syscall (libc-2.27.so) (194 samples, 3.77%)</title><rect x="40.1128%" y="244" width="3.7721%" height="15" fill="rgb(244,70,9)"/><text x="40.3628%" y="254.50">sysc..</text></g><g><title>uv__io_poll (linux-core.c) (1,623 samples, 31.56%)</title><rect x="12.3469%" y="212" width="31.5575%" height="15" fill="rgb(217,125,39)"/><text x="12.5969%" y="222.50">uv__io_poll (linux-core.c)</text></g><g><title>__init__ (aiopg/cursor.py) (77 samples, 1.50%)</title><rect x="48.6875%" y="372" width="1.4972%" height="15" fill="rgb(235,36,10)"/><text x="48.9375%" y="382.50"></text></g><g><title>__init__ (aiopg/transaction.py) (57 samples, 1.11%)</title><rect x="49.0764%" y="388" width="1.1083%" height="15" fill="rgb(251,123,47)"/><text x="49.3264%" y="398.50"></text></g><g><title>__await__ (aiopg/utils.py) (184 samples, 3.58%)</title><rect x="48.2014%" y="340" width="3.5777%" height="15" fill="rgb(221,13,13)"/><text x="48.4514%" y="350.50">__aw..</text></g><g><title>_cursor (aiopg/connection.py) (177 samples, 3.44%)</title><rect x="48.3375%" y="356" width="3.4416%" height="15" fill="rgb(238,131,9)"/><text x="48.5875%" y="366.50">_cu..</text></g><g><title>coro (asyncio/coroutines.py) (82 samples, 1.59%)</title><rect x="50.1847%" y="372" width="1.5944%" height="15" fill="rgb(211,50,8)"/><text x="50.4347%" y="382.50"></text></g><g><title>PQgetisnull (fe-exec.c) (170 samples, 3.31%)</title><rect x="56.9901%" y="420" width="3.3055%" height="15" fill="rgb(245,182,24)"/><text x="57.2401%" y="430.50">PQg..</text></g><g><title>PQgetlength (fe-exec.c) (140 samples, 2.72%)</title><rect x="60.2955%" y="420" width="2.7221%" height="15" fill="rgb(242,14,37)"/><text x="60.5455%" y="430.50">PQ..</text></g><g><title>PQgetvalue (fe-exec.c) (131 samples, 2.55%)</title><rect x="63.0177%" y="420" width="2.5472%" height="15" fill="rgb(246,228,12)"/><text x="63.2677%" y="430.50">PQ..</text></g><g><title>typecast_LONGINTEGER_cast (typecast_basic.c) (537 samples, 10.44%)</title><rect x="72.0786%" y="436" width="10.4414%" height="15" fill="rgb(213,55,15)"/><text x="72.3286%" y="446.50">typecast_LONGIN..</text></g><g><title>fetchall (aiopg/cursor.py) (1,566 samples, 30.45%)</title><rect x="52.5763%" y="356" width="30.4492%" height="15" fill="rgb(209,9,3)"/><text x="52.8263%" y="366.50">fetchall (aiopg/cursor.py)</text></g><g><title>curs_fetchall (cursor_type.c) (1,552 samples, 30.18%)</title><rect x="52.8485%" y="372" width="30.1769%" height="15" fill="rgb(230,59,30)"/><text x="53.0985%" y="382.50">curs_fetchall (cursor_type.c)</text></g><g><title>_psyco_curs_buildrow (cursor_type.c) (1,535 samples, 29.85%)</title><rect x="53.1791%" y="388" width="29.8464%" height="15" fill="rgb(209,121,21)"/><text x="53.4291%" y="398.50">_psyco_curs_buildrow (cursor_type.c)</text></g><g><title>_psyco_curs_buildrow_fill (cursor_type.c) (1,459 samples, 28.37%)</title><rect x="54.6568%" y="404" width="28.3687%" height="15" fill="rgb(220,109,13)"/><text x="54.9068%" y="414.50">_psyco_curs_buildrow_fill (cursor_type.c)</text></g><g><title>typecast_cast (typecast.c) (898 samples, 17.46%)</title><rect x="65.5648%" y="420" width="17.4606%" height="15" fill="rgb(232,18,1)"/><text x="65.8148%" y="430.50">typecast_cast (typecast.c)</text></g><g><title>coro (asyncio/coroutines.py) (1,619 samples, 31.48%)</title><rect x="51.8569%" y="340" width="31.4797%" height="15" fill="rgb(215,41,42)"/><text x="52.1069%" y="350.50">coro (asyncio/coroutines.py)</text></g><g><title>pqRowProcessor (fe-exec.c) (133 samples, 2.59%)</title><rect x="87.4587%" y="516" width="2.5860%" height="15" fill="rgb(224,123,36)"/><text x="87.7087%" y="526.50">pq..</text></g><g><title>pqResultAlloc (fe-exec.c) (67 samples, 1.30%)</title><rect x="88.7420%" y="532" width="1.3027%" height="15" fill="rgb(240,125,3)"/><text x="88.9920%" y="542.50"></text></g><g><title>__libc_malloc (libc-2.27.so) (55 samples, 1.07%)</title><rect x="88.9753%" y="548" width="1.0694%" height="15" fill="rgb(205,98,50)"/><text x="89.2253%" y="558.50"></text></g><g><title>getAnotherTuple (fe-protocol3.c) (193 samples, 3.75%)</title><rect x="86.6226%" y="500" width="3.7527%" height="15" fill="rgb(205,185,37)"/><text x="86.8726%" y="510.50">getA..</text></g><g><title>_ready (aiopg/connection.py) (262 samples, 5.09%)</title><rect x="85.3782%" y="372" width="5.0943%" height="15" fill="rgb(238,207,15)"/><text x="85.6282%" y="382.50">_ready..</text></g><g><title>psyco_conn_poll (connection_type.c) (241 samples, 4.69%)</title><rect x="85.7865%" y="388" width="4.6860%" height="15" fill="rgb(213,199,42)"/><text x="86.0365%" y="398.50">psyco..</text></g><g><title>conn_poll (connection_int.c) (241 samples, 4.69%)</title><rect x="85.7865%" y="404" width="4.6860%" height="15" fill="rgb(235,201,11)"/><text x="86.0365%" y="414.50">conn_..</text></g><g><title>_conn_poll_advance_read (connection_int.c) (241 samples, 4.69%)</title><rect x="85.7865%" y="420" width="4.6860%" height="15" fill="rgb(207,46,11)"/><text x="86.0365%" y="430.50">_conn..</text></g><g><title>pq_get_result_async (pqpath.c) (241 samples, 4.69%)</title><rect x="85.7865%" y="436" width="4.6860%" height="15" fill="rgb(241,35,35)"/><text x="86.0365%" y="446.50">pq_ge..</text></g><g><title>conn_notifies_process (connection_int.c) (204 samples, 3.97%)</title><rect x="86.5059%" y="452" width="3.9666%" height="15" fill="rgb(243,32,47)"/><text x="86.7559%" y="462.50">conn..</text></g><g><title>PQnotifies (fe-exec.c) (204 samples, 3.97%)</title><rect x="86.5059%" y="468" width="3.9666%" height="15" fill="rgb(247,202,23)"/><text x="86.7559%" y="478.50">PQno..</text></g><g><title>pqParseInput3 (fe-protocol3.c) (203 samples, 3.95%)</title><rect x="86.5254%" y="484" width="3.9471%" height="15" fill="rgb(219,102,11)"/><text x="86.7754%" y="494.50">pqPa..</text></g><g><title>coroutine (asyncio/coroutines.py) (81 samples, 1.57%)</title><rect x="90.4725%" y="372" width="1.5750%" height="15" fill="rgb(243,110,44)"/><text x="90.7225%" y="382.50"></text></g><g><title>_poll (aiopg/connection.py) (498 samples, 9.68%)</title><rect x="84.6976%" y="356" width="9.6831%" height="15" fill="rgb(222,74,54)"/><text x="84.9476%" y="366.50">_poll (aiopg/c..</text></g><g><title>wait_for (asyncio/tasks.py) (119 samples, 2.31%)</title><rect x="92.0669%" y="372" width="2.3138%" height="15" fill="rgb(216,99,12)"/><text x="92.3169%" y="382.50">w..</text></g><g><title>_mogrify (cursor_type.c) (55 samples, 1.07%)</title><rect x="94.4390%" y="388" width="1.0694%" height="15" fill="rgb(226,22,26)"/><text x="94.6890%" y="398.50"></text></g><g><title>pqSendSome (fe-misc.c) (103 samples, 2.00%)</title><rect x="95.6640%" y="420" width="2.0027%" height="15" fill="rgb(217,163,10)"/><text x="95.9140%" y="430.50">p..</text></g><g><title>pqsecure_raw_write (fe-secure.c) (102 samples, 1.98%)</title><rect x="95.6835%" y="436" width="1.9833%" height="15" fill="rgb(213,25,53)"/><text x="95.9335%" y="446.50">p..</text></g><g><title>send (libc-2.27.so) (102 samples, 1.98%)</title><rect x="95.6835%" y="452" width="1.9833%" height="15" fill="rgb(252,105,26)"/><text x="95.9335%" y="462.50">s..</text></g><g><title>PQsendQuery (fe-exec.c) (108 samples, 2.10%)</title><rect x="95.5862%" y="404" width="2.0999%" height="15" fill="rgb(220,39,43)"/><text x="95.8362%" y="414.50">P..</text></g><g><title>_pq_execute_async (pqpath.c) (122 samples, 2.37%)</title><rect x="95.5085%" y="388" width="2.3722%" height="15" fill="rgb(229,68,48)"/><text x="95.7585%" y="398.50">_p..</text></g><g><title>aiopg_tuples_execute (pgbench_python.py) (2,706 samples, 52.62%)</title><rect x="45.5960%" y="324" width="52.6152%" height="15" fill="rgb(252,8,32)"/><text x="45.8460%" y="334.50">aiopg_tuples_execute (pgbench_python.py)</text></g><g><title>execute (aiopg/cursor.py) (738 samples, 14.35%)</title><rect x="83.8616%" y="340" width="14.3496%" height="15" fill="rgb(223,20,43)"/><text x="84.1116%" y="350.50">execute (aiopg/cursor...</text></g><g><title>curs_execute (cursor_type.c) (197 samples, 3.83%)</title><rect x="94.3807%" y="356" width="3.8304%" height="15" fill="rgb(229,81,49)"/><text x="94.6307%" y="366.50">curs..</text></g><g><title>_psyco_curs_execute (cursor_type.c) (196 samples, 3.81%)</title><rect x="94.4002%" y="372" width="3.8110%" height="15" fill="rgb(236,28,36)"/><text x="94.6502%" y="382.50">_psy..</text></g><g><title>0x7f3a1892cc99 (_asyncio.cpython-36m-x86_64-linux-gnu.so) (2,767 samples, 53.80%)</title><rect x="44.4877%" y="292" width="53.8013%" height="15" fill="rgb(249,185,26)"/><text x="44.7377%" y="302.50">0x7f3a1892cc99 (_asyncio.cpython-36m-x86_64-linux-gnu.so)</text></g><g><title>worker (pgbench_python.py) (2,747 samples, 53.41%)</title><rect x="44.8765%" y="308" width="53.4124%" height="15" fill="rgb(249,174,33)"/><text x="45.1265%" y="318.50">worker (pgbench_python.py)</text></g><g><title>Handle__run (uvloop/cbhandles.pyx) (2,831 samples, 55.05%)</title><rect x="44.2349%" y="276" width="55.0457%" height="15" fill="rgb(233,201,37)"/><text x="44.4849%" y="286.50">Handle__run (uvloop/cbhandles.pyx)</text></g><g><title>Handle__run (uvloop/cbhandles.pyx) (2,848 samples, 55.38%)</title><rect x="44.0988%" y="244" width="55.3762%" height="15" fill="rgb(221,78,26)"/><text x="44.3488%" y="254.50">Handle__run (uvloop/cbhandles.pyx)</text></g><g><title>Loop__on_idle (uvloop/loop.pyx) (2,848 samples, 55.38%)</title><rect x="44.0988%" y="260" width="55.3762%" height="15" fill="rgb(250,127,30)"/><text x="44.3488%" y="270.50">Loop__on_idle (uvloop/loop.pyx)</text></g><g><title>uv__run_idle (loop-watcher.c) (2,860 samples, 55.61%)</title><rect x="44.0404%" y="212" width="55.6096%" height="15" fill="rgb(230,49,44)"/><text x="44.2904%" y="222.50">uv__run_idle (loop-watcher.c)</text></g><g><title>loop_cb_idle_callback (idle.pyx) (2,860 samples, 55.61%)</title><rect x="44.0404%" y="228" width="55.6096%" height="15" fill="rgb(229,67,23)"/><text x="44.2904%" y="238.50">loop_cb_idle_callback (idle.pyx)</text></g><g><title>run_until_complete (uvloop/loop.pyx) (4,502 samples, 87.54%)</title><rect x="12.2885%" y="68" width="87.5365%" height="15" fill="rgb(249,83,47)"/><text x="12.5385%" y="78.50">run_until_complete (uvloop/loop.pyx)</text></g><g><title>run_until_complete (uvloop/loop.pyx) (4,502 samples, 87.54%)</title><rect x="12.2885%" y="84" width="87.5365%" height="15" fill="rgb(215,43,3)"/><text x="12.5385%" y="94.50">run_until_complete (uvloop/loop.pyx)</text></g><g><title>__Pyx_PyObject_CallNoArg (cfunc.to_py) (4,502 samples, 87.54%)</title><rect x="12.2885%" y="100" width="87.5365%" height="15" fill="rgb(238,154,13)"/><text x="12.5385%" y="110.50">__Pyx_PyObject_CallNoArg (cfunc.to_py)</text></g><g><title>__Pyx_PyObject_CallMethO (cfunc.to_py) (4,502 samples, 87.54%)</title><rect x="12.2885%" y="116" width="87.5365%" height="15" fill="rgb(219,56,2)"/><text x="12.5385%" y="126.50">__Pyx_PyObject_CallMethO (cfunc.to_py)</text></g><g><title>run_forever (uvloop/loop.pyx) (4,502 samples, 87.54%)</title><rect x="12.2885%" y="132" width="87.5365%" height="15" fill="rgb(233,0,4)"/><text x="12.5385%" y="142.50">run_forever (uvloop/loop.pyx)</text></g><g><title>run_forever (uvloop/loop.pyx) (4,502 samples, 87.54%)</title><rect x="12.2885%" y="148" width="87.5365%" height="15" fill="rgb(235,30,7)"/><text x="12.5385%" y="158.50">run_forever (uvloop/loop.pyx)</text></g><g><title>Loop__run (uvloop/loop.pyx) (4,502 samples, 87.54%)</title><rect x="12.2885%" y="164" width="87.5365%" height="15" fill="rgb(250,79,13)"/><text x="12.5385%" y="174.50">Loop__run (uvloop/loop.pyx)</text></g><g><title>Loop___run (uvloop/loop.pyx) (4,502 samples, 87.54%)</title><rect x="12.2885%" y="180" width="87.5365%" height="15" fill="rgb(211,146,34)"/><text x="12.5385%" y="190.50">Loop___run (uvloop/loop.pyx)</text></g><g><title>uv_run (core.c) (4,502 samples, 87.54%)</title><rect x="12.2885%" y="196" width="87.5365%" height="15" fill="rgb(228,22,38)"/><text x="12.5385%" y="206.50">uv_run (core.c)</text></g><g><title>&lt;module&gt; (pgbench_python.py) (5,138 samples, 99.90%)</title><rect x="0.0000%" y="52" width="99.9028%" height="15" fill="rgb(235,168,5)"/><text x="0.2500%" y="62.50">&lt;module&gt; (pgbench_python.py)</text></g><g><title>all (5,143 samples, 100%)</title><rect x="0.0000%" y="36" width="100.0000%" height="15" fill="rgb(221,155,16)"/><text x="0.2500%" y="46.50"></text></g></svg></svg>