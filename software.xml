<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title type="text">Software</title>
  <id>urn:uuid:345e7579-5b16-39e4-9f1d-2a4bff93035d</id>
  <updated>2020-03-26T00:00:00Z</updated>
  <link href="https://www.varrazzo.com/blog/" />
  <link href="https://www.varrazzo.com/software.xml" rel="self" />
  <author>
    <name></name>
  </author>
  <generator uri="https://github.com/t73fde/lektor-feed" version="20191006.1">Lektor Feed Plugin</generator>
  <entry xml:base="https://www.varrazzo.com/blog/2020/03/26/psycopg3-first-report/">
    <title type="text">psycopg3: a first report</title>
    <id>urn:uuid:cd45e5f7-7cb3-3a72-920a-00567e28dbd5</id>
    <updated>2020-03-26T00:00:00Z</updated>
    <link href="https://www.varrazzo.com/blog/2020/03/26/psycopg3-first-report/" />
    <author>
      <name>Daniele Varrazzo</name>
    </author>
    <content type="html">&lt;p&gt;&lt;a class=&quot;reference external&quot; href=&quot;/blog/2020/03/25/life-covid-nz/&quot;&gt;In the most unusual conditions&lt;/a&gt; I started hacking on
psycopg3 roughly following the plan sketched in &lt;a class=&quot;reference external&quot; href=&quot;/blog/2020/03/06/thinking-psycopg3/&quot;&gt;Thinking psycopg3&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The first step was to create a package, &lt;tt class=&quot;docutils literal&quot;&gt;psycopg3.pq&lt;/tt&gt;, allowing a low level
access to the libpq from Python. The package is a fa√ßade to several
implementations: the one I started implementing is a &lt;a class=&quot;reference external&quot; href=&quot;https://docs.python.org/3/library/ctypes.html&quot;&gt;ctypes&lt;/a&gt;-based one, so
pure Python. Others can be implemented using &lt;a class=&quot;reference external&quot; href=&quot;https://pypi.org/project/cffi/&quot;&gt;CFFI&lt;/a&gt; or pure C, but for the
moment we can already access the libpq without external dependencies (useful
when you hack from a van without internet connection and you only have offline
Python documentation available).&lt;/p&gt;
&lt;p&gt;The package is pure mechanism, no policy, so it is entirely based on &lt;tt class=&quot;docutils literal&quot;&gt;bytes&lt;/tt&gt;
instead of unicode strings. Among its responsibilities there is to &lt;tt class=&quot;docutils literal&quot;&gt;free()&lt;/tt&gt;
the libpq C structures on &lt;tt class=&quot;docutils literal&quot;&gt;__del__()&lt;/tt&gt;, so that resources such as connections
and results are tied to Python objects refcount, in &lt;a class=&quot;reference external&quot; href=&quot;https://en.wikipedia.org/wiki/Resource_acquisition_is_initialization&quot;&gt;RAII style&lt;/a&gt;. It is not
complete yet, but it already exposes everything needed for the psycopg3
implementation so far, and wrapping further functions is straightforward.&lt;/p&gt;
&lt;pre class=&quot;code pycon literal-block&quot;&gt;
&lt;span class=&quot;kn&quot;&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;psycopg3&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pq&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pqconn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PGconn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;dbname=psycopg3_test&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pqconn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exec_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;select 'hello' || ' world!'&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;b'hello world!'&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Among the libpq functions exposed there are the non-blocking ones for
connecting and for querying. The blocking ones are exposed too, but the idea
is to avoid using them altogether in &amp;quot;real code&amp;quot;, leaving to Python the
responsibility to coordinate and wait. This would allow writing the whole
adapter without juggling with the GIL and without losing control during long
operations. In other words, &lt;a class=&quot;reference external&quot; href=&quot;https://www.psycopg.org/articles/2014/07/20/cancelling-postgresql-statements-python/&quot;&gt;Ctrl-C would just work&lt;/a&gt;, no &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/333&quot;&gt;issue #333&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;As explained in the previous article, both a synchronous and an asynchronous
interface should be exposed: the sync one blocking as per DBAPI specs, the
async one based on asyncio and coroutines. What I don't want to do instead is
to have to write everything twice.&lt;/p&gt;
&lt;p&gt;About the async interface, there is no guidance from the DBAPI about what it
should present, but the most natural way (which is what &lt;a class=&quot;reference external&quot; href=&quot;https://aiopg.readthedocs.io/&quot;&gt;AIOPG&lt;/a&gt; exposes, in my
understanding) is to replicate exactly the blocking interface, &lt;tt class=&quot;docutils literal&quot;&gt;await&lt;/tt&gt;ing
whenever it would block. So what may it look like is:&lt;/p&gt;
&lt;pre class=&quot;code pycon literal-block&quot;&gt;
&lt;span class=&quot;n&quot;&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cnn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;psycopg3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connect_async&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cnn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cursor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;select 'hello' || ' mum!'&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;# &amp;gt;&amp;gt;&amp;gt; await cur.fetchone()  # TODO: not implemented yet
# but the result is on the client already
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;b'hello mum!'&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;The async interaction with the libpq is a delicate matter and surely not
something I would like to repeat with different flavours in several parts of
the code. So the guiding forces of the design are:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;there are different types of connections and cursors: a blocking sync one
you can use as &lt;tt class=&quot;docutils literal&quot;&gt;cur.execute(query)&lt;/tt&gt; and an &lt;tt class=&quot;docutils literal&quot;&gt;async def&lt;/tt&gt; one you must call
as &lt;tt class=&quot;docutils literal&quot;&gt;await cur.execute(query)&lt;/tt&gt;, so they must actually be two different
methods;&lt;/li&gt;
&lt;li&gt;the &lt;a class=&quot;reference external&quot; href=&quot;https://www.postgresql.org/docs/current/libpq-async.html&quot;&gt;intricate async machinery&lt;/a&gt; of the libpq, and the state keeping
it needs between calls, should be implemented only once;&lt;/li&gt;
&lt;li&gt;how to wait should be selectable (no Unix pun intended) and injected around
the libpq according to the different Python environment.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, hum... how to do a thing, ask someone else to wait, then go back at work?&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Coroutines!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;More precisely, because in modern Python &lt;em&gt;coroutine&lt;/em&gt; acquired a different and
more specific meaning, what I refer to is to the old plain generators, i.e.
the functions with &lt;tt class=&quot;docutils literal&quot;&gt;yield&lt;/tt&gt;, not the functions with &lt;tt class=&quot;docutils literal&quot;&gt;async def&lt;/tt&gt;. So the
exclamation should be:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Generators!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This is the idea: showing a simplified connection procedure (the query
procedure is more complicated but it follow a similar collaboration pattern):&lt;/p&gt;
&lt;pre class=&quot;code python literal-block&quot;&gt;
&lt;span class=&quot;c1&quot;&gt;# simplified `psycopg3.connection.BaseConnection._connect_gen()`&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;connect_gen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conninfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;
    Generator to create a database connection without blocking.

    Yield pairs (fileno, `Wait`) whenever an operation would block. The
    generator can be restarted sending the appropriate `Ready` state when
    the file descriptor is ready.
    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PGconn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connect_start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conninfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connect_poll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PollingStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PollingStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;READING&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Wait&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PollingStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WRITING&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Wait&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;W&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;This generator yields as soon as it would block, asking the consumer to be
awaken as soon as the connection is ready to read or write. This generator
can be consumed in a blocking way using a procedure such as:&lt;/p&gt;
&lt;pre class=&quot;code python literal-block&quot;&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;select&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# simplified `psycopg3.waiting.wait_select()`&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;wait_select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;
    Wait on the behalf of a generator using select().

    *gen* is expected to generate tuples (fd, status). consume it and block
    according to the status until fd is ready. Send back the ready state
    to the generator.

    Return what the generator eventually returned.
    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Wait&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;rf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;gen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Ready&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Wait&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;W&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;rf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;gen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Ready&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;W&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Wait&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;rf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;gen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Ready&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;gen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Ready&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;W&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;ne&quot;&gt;StopIteration&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;With these two functions happily collaborating the blocking call
&lt;tt class=&quot;docutils literal&quot;&gt;psycopg3.connect()&lt;/tt&gt; can be implemented with something like:&lt;/p&gt;
&lt;pre class=&quot;code python literal-block&quot;&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dsn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;gen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;connect_gen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dsn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pgconn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wait_select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;# the low-level libpq connection&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pgconn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;# the high-level DBAPI connection&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;What about the async connection? I'm relatively new to asyncio, so I'm not
sure if this is the most idiomatic way to do it, but at the moment it looks
like the following block. &lt;a class=&quot;reference external&quot; href=&quot;https://docs.python.org/3/library/asyncio-eventloop.html#watching-file-descriptors&quot;&gt;add_reader/add_writer()&lt;/a&gt; are the mechanism to
wait collaboratively for a file descriptor to become ready, but they only take
a callback, they don't block the coroutine. So we block it against an &lt;a class=&quot;reference external&quot; href=&quot;https://docs.python.org/3/library/asyncio-sync.html#event&quot;&gt;Event&lt;/a&gt;,
and use the callback to free it.&lt;/p&gt;
&lt;pre class=&quot;code python literal-block&quot;&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;asyncio&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_event_loop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Event&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# simplified `psycopg3.waiting.wait_async()`&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;wait_async&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ev&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_event_loop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;None&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;wakeup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;nonlocal&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ready&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ev&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ev&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Wait&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;loop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wakeup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Ready&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ev&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;loop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;remove_reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;gen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Wait&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;W&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;loop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_writer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wakeup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Ready&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;W&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ev&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;loop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;remove_writer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;gen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Wait&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;loop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wakeup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Ready&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;loop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_writer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wakeup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Ready&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;W&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ev&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;loop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;remove_reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;loop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;remove_writer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;gen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;ne&quot;&gt;StopIteration&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;which allows to implement an asyncio-friendly connection function with:&lt;/p&gt;
&lt;pre class=&quot;code python literal-block&quot;&gt;
&lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;connect_async&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dsn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;gen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;connect_gen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dsn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pgconn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wait_async&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# the low-level libpq connection&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AsyncConnection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pgconn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# an AIOPG-style high-level connection&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;The same &lt;tt class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;wait_*()&lt;/span&gt;&lt;/tt&gt; functions are used to wrap a send-query-fetch-result
generator underlying &lt;tt class=&quot;docutils literal&quot;&gt;cursor.execute()&lt;/tt&gt; and friends:&lt;/p&gt;
&lt;pre class=&quot;code python literal-block&quot;&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Cursor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BaseCursor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;# ignoring values for now&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;gen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_execute_send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;results&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wait_select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_execute_results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# process the result to python&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AsyncCursor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BaseCursor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;gen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_execute_send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;results&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wait_async&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_execute_results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Minimal code duplication, different high level interface. Symmetry. I like it!&lt;/p&gt;
&lt;p&gt;Furthermore, unpacking the query mechanism allowed the library to gain a new
feature: it is now possible with a single roundtrip to return more than one
result, implementing the &lt;a class=&quot;reference external&quot; href=&quot;https://www.python.org/dev/peps/pep-0249/#nextset&quot;&gt;nextset()&lt;/a&gt; method, which isn't available in
psycopg2:&lt;/p&gt;
&lt;pre class=&quot;code pycon literal-block&quot;&gt;
&lt;span class=&quot;n&quot;&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;select 10; select 20&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;b'10'
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nextset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;True
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;b'20'&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;What's left? Well, a lot! Now that the basic machinery is in place, and Python
can send and retrieve bytes to and from Postgres, it's time to attack the
adaptation layer.&lt;/p&gt;
&lt;p&gt;Feedback is welcome: as &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/1057&quot;&gt;someone suggested&lt;/a&gt; it would be useful to be
friendly with other async frameworks such as &lt;a class=&quot;reference external&quot; href=&quot;https://trio.readthedocs.io/en/stable/&quot;&gt;trio&lt;/a&gt;; maybe my async code is not
the best around and AIOPG or &lt;a class=&quot;reference external&quot; href=&quot;https://lwn.net/Articles/814822/#CommAnchor814868&quot;&gt;asyncpg hackers&lt;/a&gt; have something to suggest.
Please let me know: the code so far is &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg3/&quot;&gt;online already&lt;/a&gt;, with &lt;a class=&quot;reference external&quot; href=&quot;https://travis-ci.org/github/psycopg/psycopg3/builds/666294186&quot;&gt;141 tests&lt;/a&gt;
in a grid testing Python from 3.6 to 3.8 and PostgreSQL from 9.5 to 12.&lt;/p&gt;
&lt;p&gt;I would be extremely grateful if you would like to support the development of
the project! Please make me feel your warmth in this antipodean month of
lockdown with your &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/sponsors/dvarrazzo/&quot;&gt;development sponsorship&lt;/a&gt;, thank you! üíú&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="https://www.varrazzo.com/blog/2020/03/06/thinking-psycopg3/">
    <title type="text">Thinking psycopg3</title>
    <id>urn:uuid:c38c961a-a398-3c96-8a19-53e5ce15189e</id>
    <updated>2020-03-06T00:00:00Z</updated>
    <link href="https://www.varrazzo.com/blog/2020/03/06/thinking-psycopg3/" />
    <author>
      <name>Daniele Varrazzo</name>
    </author>
    <content type="html">&lt;p&gt;I have been &lt;a class=&quot;reference external&quot; href=&quot;https://www.psycopg.org/&quot;&gt;psycopg2&lt;/a&gt; maintainer since 2010; before that, &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/commit/4805a935690b1d618247267318a0ef7aa06c2378&quot;&gt;git says&lt;/a&gt; that my
first contribution was in 2005. At that time, psycopg (one) was the tool to
use, and psycopg2 was an interesting experiment.&lt;/p&gt;
&lt;p&gt;In several years of using psycopg2 daily and reading about expectations,
frustrations, surprises experienced by other users, I have been making my mind
about a better system, and if I had to release a version incompatible with the
past, those are some of the things I would change.&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;query-parameters-adaptation&quot;&gt;
&lt;h3&gt;Query parameters adaptation&lt;/h3&gt;
&lt;p&gt;psycopg2 composes queries (replacing the placeholders in the SQL strings with
the values supplied by the user) on the client, and sends a complete query to
the server.&lt;/p&gt;
&lt;img alt=&quot;Sequence diagram for psycopg2&quot; class=&quot;mb10 align-center&quot; src=&quot;seq-psycopg2.jpg&quot; /&gt;
&lt;p&gt;It does its job right, so it doesn't result in SQL injection vulnerabilities.
However the correct way of doing it, as far as PostgreSQL is concerned, should
be to send the query and its parameters separately (i.e. using the
&lt;a class=&quot;reference external&quot; href=&quot;https://www.postgresql.org/docs/current/libpq-exec.html#LIBPQ-PQEXECPARAMS&quot;&gt;&lt;tt class=&quot;docutils literal&quot;&gt;PQexecParams&lt;/tt&gt;&lt;/a&gt; libpq function rather than &lt;a class=&quot;reference external&quot; href=&quot;https://www.postgresql.org/docs/current/libpq-exec.html#LIBPQ-PQEXEC&quot;&gt;&lt;tt class=&quot;docutils literal&quot;&gt;PQexec&lt;/tt&gt;&lt;/a&gt;).&lt;/p&gt;
&lt;img alt=&quot;Sequence diagram for psycopg3&quot; class=&quot;mb10 align-center&quot; src=&quot;seq-psycopg3.jpg&quot; /&gt;
&lt;p&gt;Separating the statement from the parameters improves performance and memory
usage at parsing time. However the behaviour of the library would change
slightly, which is the reason why server-side merging hasn't been used so far.
For instance:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;tt class=&quot;docutils literal&quot;&gt;PQexecParams&lt;/tt&gt; only supports one command at time: it wouldn't be possible
anymore to send a batch of queries separated by semicolon in a single
&lt;tt class=&quot;docutils literal&quot;&gt;execute()&lt;/tt&gt; call.&lt;/li&gt;
&lt;li&gt;psycopg2 helps solving some type casting ambiguities by attaching casts to
the types represented as strings (e.g. the date 1/1/2020 is currently merged
to the query as &lt;tt class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;'2020-01-01'::date&lt;/span&gt;&lt;/tt&gt;); using &lt;tt class=&quot;docutils literal&quot;&gt;PQexecParams&lt;/tt&gt; the trick
wouldn't be available anymore. It might be possible maybe to suggest the
type in other ways, but if that's not the case then queries should be
modified by applying explicit casts next to their placeholders (e.g.
&lt;tt class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;%s::date&lt;/span&gt;&lt;/tt&gt;).&lt;/li&gt;
&lt;li&gt;Custom-defined adapters should be rewritten.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The main difference between the old adaptation protocol (called &lt;a class=&quot;reference external&quot; href=&quot;https://www.psycopg.org/docs/extensions.html#psycopg2.extensions.ISQLQuote&quot;&gt;&lt;tt class=&quot;docutils literal&quot;&gt;ISQLQuote&lt;/tt&gt;&lt;/a&gt;)
and the new one (which doesn't have a name yet, it could be probably called
&lt;tt class=&quot;docutils literal&quot;&gt;ISQL&lt;/tt&gt;) is the use of the quotes, whereby the string &lt;tt class=&quot;docutils literal&quot;&gt;O'Connor&lt;/tt&gt; is passed
to the query as &lt;tt class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;'O''Connor'&lt;/span&gt;&lt;/tt&gt;, with wrapping quotes and doubled-up quotes in
the content. In &lt;tt class=&quot;docutils literal&quot;&gt;ISQL&lt;/tt&gt; the string wouldn't undergo the same transformation
to add and escape quotes; other types would only have to be converted into
strings in the PostgreSQL syntax, but wouldn't need to be wrapped in quotes to
create a SQL literal. Using &lt;tt class=&quot;docutils literal&quot;&gt;ISQL&lt;/tt&gt; as the fundamental adaptation steps there
would be some interesting improvements:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;adapting composite types and arrays would be a much more straightforward
matter,&lt;/li&gt;
&lt;li&gt;it opens the door to the use of &lt;a class=&quot;reference external&quot; href=&quot;https://www.postgresql.org/docs/current/libpq-exec.html#LIBPQ-PQPREPARE&quot;&gt;prepared statements&lt;/a&gt;, but especially&lt;/li&gt;
&lt;li&gt;the &lt;tt class=&quot;docutils literal&quot;&gt;COPY FROM&lt;/tt&gt; operation could take an iterable object yielding Python
types instead of a file-like object to read; similarly &lt;tt class=&quot;docutils literal&quot;&gt;COPY TO&lt;/tt&gt; could
return an iterable object yielding Python types.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I mean: this would be great! &lt;a class=&quot;reference external&quot; href=&quot;https://www.postgresql.org/docs/current/sql-copy.html&quot;&gt;&lt;tt class=&quot;docutils literal&quot;&gt;COPY&lt;/tt&gt;&lt;/a&gt; is by far the most efficient way to
insert data into the database: using it via psycopg2 requires exposing the
data via a &lt;a class=&quot;reference external&quot; href=&quot;https://www.psycopg.org/docs/usage.html#using-copy-to-and-copy-from&quot;&gt;file-like object&lt;/a&gt;, which not only is a weird interface, but it
requires people to roll their own adaptation format. The target for copying
data into the database using psycopg3 should be as easy as:&lt;/p&gt;
&lt;pre class=&quot;code python literal-block&quot;&gt;
&lt;span class=&quot;n&quot;&gt;curs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;COPY song (artist, title) FROM STDIN&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Sinead O'Connor&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Nothing Compares 2 U&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'REM'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Losing my Religion&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;context-managers-and-transactions&quot;&gt;
&lt;h3&gt;Context managers and transactions&lt;/h3&gt;
&lt;p&gt;psycopg2 follows a de-facto standard (which was &lt;a class=&quot;reference external&quot; href=&quot;https://mail.python.org/pipermail/db-sig/2012-November/thread.html&quot;&gt;widely discussed&lt;/a&gt; but which
never landed in the &lt;a class=&quot;reference external&quot; href=&quot;https://www.python.org/dev/peps/pep-0249/&quot;&gt;DBAPI specs&lt;/a&gt;), whereby connections used as context
managers wrap a transaction, committing it if exiting on success or rolling it
back in case of error. So the way to use it is something like:&lt;/p&gt;
&lt;pre class=&quot;code python literal-block&quot;&gt;
&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DSN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# these are two separate transactions&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;do_something&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;do_something_else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;This idea has its usefulness,  but it is a &lt;em&gt;very&lt;/em&gt; surprising behaviour:
developers usually expect the same resources released by &lt;tt class=&quot;docutils literal&quot;&gt;close()&lt;/tt&gt; to be
released on context exit (as files, sockets, and even DBAPI cursors do). It
also gets in the way of managing different life cycles on the connection, for
instance if there is the connection is taken from a pool:&lt;/p&gt;
&lt;pre class=&quot;code python literal-block&quot;&gt;
&lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pool&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getconn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cursor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;curs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;do_someting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;curs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;then it is expected (and &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/pull/17&quot;&gt;reasonably requested&lt;/a&gt;) that the connection is
returned to the pool at the end of the block.&lt;/p&gt;
&lt;p&gt;Talking about transactions, PostgreSQL support for &lt;tt class=&quot;docutils literal&quot;&gt;SAVEPOINT&lt;/tt&gt; makes
possible to implement nested transactions (already implemented on top of
psycopg2 e.g. &lt;a class=&quot;reference external&quot; href=&quot;https://docs.djangoproject.com/en/3.0/topics/db/transactions/#django.db.transaction.atomic&quot;&gt;by Django&lt;/a&gt; and &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/asqui/psycopg-nestedtransactions&quot;&gt;in a stand-alone module&lt;/a&gt;). This seems to
ask for a different context than the connection-scope one. So maybe it would
be useful to leave the latter to the management of the resource, releasing
them on connection context exit, and to add an explicit method to start an
atomic block (either a transaction or a savepoint, according to the current
connection state):&lt;/p&gt;
&lt;pre class=&quot;code python literal-block&quot;&gt;
&lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DSN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transaction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;do_something&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transaction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;do_something_nested&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transaction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;do_something_else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# we were just testing and we don't really want to do this&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;tx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rollback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# and here the connection is closed&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;optional-c-module&quot;&gt;
&lt;h3&gt;Optional C module&lt;/h3&gt;
&lt;p&gt;psycopg2 is a C extension module wrapping the &lt;a class=&quot;reference external&quot; href=&quot;https://www.postgresql.org/docs/current/libpq.html&quot;&gt;libpq&lt;/a&gt;, the PostgreSQL client
library. As such, in order to build, it requires a C compiler, Python, and
libpq development packages. It is a relatively low bar, but it can be a pain
nonetheless for beginner users.&lt;/p&gt;
&lt;p&gt;We tried to avoid the problem by shipping a &lt;a class=&quot;reference external&quot; href=&quot;https://pythonwheels.com/&quot;&gt;wheel package&lt;/a&gt;, but the
experience has been &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues?utf8=%E2%9C%93&amp;amp;q=+label%3Awheel&quot;&gt;far from being a success&lt;/a&gt;,  marred by diverse issues
such as the possible incompatibility between the libcrypto used by Python and
by the libpq, the lack of support for musl libc/Alpine Linux (much in demand
in Docker images), broken assumptions (like &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/pypa/manylinux/issues/305&quot;&gt;glibc breaking backwards
compatibility&lt;/a&gt;)... There's just too much magic needed to work smoothly.&lt;/p&gt;
&lt;p&gt;In the past years, mostly in order to support &lt;a class=&quot;reference external&quot; href=&quot;https://www.pypy.org/&quot;&gt;PyPy&lt;/a&gt;, a few &amp;quot;python-only&amp;quot;
psycopg2 implementations have been developed: first a &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/mvantellingen/psycopg2-ctypes&quot;&gt;ctypes
implementation&lt;/a&gt;, to which I contributed but which hasn't been maintained at
the same feature level of the reference C psycopg2. This package was further
forked into a &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/chtd/psycopg2cffi&quot;&gt;cffi implementation&lt;/a&gt;, which seems to be more active, but
whose release numbers don't follow the original ones, which is mighty
confusing.&lt;/p&gt;
&lt;p&gt;psycopg3 might follow an approach I've seen used in other extension modules
such as PyYAML, which try to compile an optimized version of the library and
fall back to a Python implementation if that fails. Using the C module over
the Python module would be a preference at import time, but if could still be
possible to enforce the use of one specific implementation, for instance using
a &lt;tt class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;PSYCOPG3_IMPL={C|PYTHON}&lt;/span&gt;&lt;/tt&gt; environment variable, which would make the lack
of the requested implementation an import time error.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;async-from-the-ground-up&quot;&gt;
&lt;h3&gt;Async from the ground up&lt;/h3&gt;
&lt;p&gt;The DBAPI interface is synchronous and blocking by design: &lt;tt class=&quot;docutils literal&quot;&gt;connect()&lt;/tt&gt;
blocks until a connection is open, &lt;tt class=&quot;docutils literal&quot;&gt;execute()&lt;/tt&gt; blocks until the query is
completed etc. This didn't stop psycopg2 to work asynchronously, exposing two
different interfaces for it:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://www.psycopg.org/docs/advanced.html#asynchronous-support&quot;&gt;a purely asynchronous one&lt;/a&gt; where the application must explicitly
&lt;tt class=&quot;docutils literal&quot;&gt;poll()&lt;/tt&gt; to bring forward the connection/execution process: it breaks the
DBAPI interface but allows frameworks who can't make blocking calls anyway
(such as the revered &lt;a class=&quot;reference external&quot; href=&quot;https://twistedmatrix.com/&quot;&gt;Twisted&lt;/a&gt;) to use it;&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://www.psycopg.org/docs/advanced.html#support-for-coroutine-libraries&quot;&gt;a coroutine-based one&lt;/a&gt; where the DBAPI blocking interface is respected
but behind the scene psycopg2 collaborates with coroutine libraries such as
&lt;a class=&quot;reference external&quot; href=&quot;https://eventlet.net/&quot;&gt;Eventlet&lt;/a&gt; and &lt;a class=&quot;reference external&quot; href=&quot;http://www.gevent.org/&quot;&gt;gevent&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Needless to say, the world has gone forward, and Python now offers core
support in its syntax and library to &lt;a class=&quot;reference external&quot; href=&quot;https://docs.python.org/3.8/library/asyncio.html&quot;&gt;asyncio&lt;/a&gt;: this is the foundation that
newer Python async frameworks, such as &lt;a class=&quot;reference external&quot; href=&quot;https://aiohttp.readthedocs.io/&quot;&gt;aiohttp&lt;/a&gt;, are built upon. A third-part
wrapper, &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/aio-libs/aiopg&quot;&gt;aiopg&lt;/a&gt;, currently helps to bridge the async mode of psycopg2 with the
asyncio machinery, but of course there is some overhead, mostly caused by the
fact that the C implementation of psycopg2 is a relatively thick layer, with
the libpq async calls deeply buried under the C implementation of the Python
&lt;tt class=&quot;docutils literal&quot;&gt;connection&lt;/tt&gt; and &lt;tt class=&quot;docutils literal&quot;&gt;cursor&lt;/tt&gt; objects and behind their interfaces.&lt;/p&gt;
&lt;p&gt;There is a chance now to rethink how thick the C libpq wrapper should be. We
can reduce the C implementation to a minimal wrapper around the libpq
(replaceable by a CFFI Python wrapper if compiling C is not available on the
client), using it as a foundation to build a familiar DBAPI blocking
interface. A blocking behaviour is not bad in itself: it allows to write most
of the programs, the ones which don't need crazy concurrency, in a simple and
familiar paradigm; the async layer would be available under the hood to
squeeze the best performance in programs who have embraced an asynchronous
pattern and framework. Time for a picture:&lt;/p&gt;
&lt;img alt=&quot;Proposed architecture for psycopg3&quot; class=&quot;mb10 align-center&quot; src=&quot;architecture.jpg&quot; /&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;other-improvements&quot;&gt;
&lt;h3&gt;Other improvements&lt;/h3&gt;
&lt;p&gt;I've written down some of the ideas to implement on &lt;a class=&quot;reference external&quot; href=&quot;https://trello.com/b/6tF2oHJ0/psycopg3&quot;&gt;a Trello board&lt;/a&gt; and in
&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/milestone/4&quot;&gt;an issues milestone&lt;/a&gt;. As the board shows, some of the improvements weren't
actually incompatible with psycopg2 and over the years they have already
landed in in its releases; some other ones will have to wait.&lt;/p&gt;
&lt;p&gt;Some of what could be improved over psycopg2:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class=&quot;first&quot;&gt;async COPY methods (see &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/428&quot;&gt;issue #428&lt;/a&gt;);&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class=&quot;first&quot;&gt;better support for SQL_ASCII databases (which, unlike what their name
suggests, are actually unencoded 8 bits, see &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/519&quot;&gt;issue #519&lt;/a&gt;);&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class=&quot;first&quot;&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://gist.github.com/dvarrazzo/3797445&quot;&gt;preparing cursors&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class=&quot;first&quot;&gt;return value on &lt;tt class=&quot;docutils literal&quot;&gt;execute()&lt;/tt&gt;:&lt;/p&gt;
&lt;pre class=&quot;code python literal-block&quot;&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;record&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class=&quot;first&quot;&gt;connection and cursor-scoped adapters (currently you can scope the
adaptation rules from Postgres to Python but the rules from Python to
Postgres can only be global);&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class=&quot;first&quot;&gt;reorganising the &lt;a class=&quot;reference external&quot; href=&quot;https://www.psycopg.org/docs/extensions.html&quot;&gt;extensions&lt;/a&gt; and &lt;a class=&quot;reference external&quot; href=&quot;https://www.psycopg.org/docs/extras.html&quot;&gt;extras&lt;/a&gt; module, which at the moment contain
an heterogeneous assortment of objects, functions, constants...&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I would be interested in starting the development of this project soon. If you
have opinions, or interest in the project, please let us know on the &lt;a class=&quot;reference external&quot; href=&quot;https://www.postgresql.org/list/psycopg/&quot;&gt;Mailing
List&lt;/a&gt; (you can &lt;a class=&quot;reference external&quot; href=&quot;https://lists.postgresql.org/&quot;&gt;subscribe here&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;...and if psycopg2 has been useful so far for you and for your business and if
you would love to see a psycopg3 even more performing and easier to use,
please consider &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/sponsors/dvarrazzo/&quot;&gt;sponsoring the development&lt;/a&gt;, thank you! üíú&lt;/p&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="https://www.varrazzo.com/blog/2020/02/29/adventures-in-yaml-config/">
    <title type="text">Adventures in YAML config</title>
    <id>urn:uuid:a325926a-9137-3067-8700-5917960f7b5f</id>
    <updated>2020-02-29T00:00:00Z</updated>
    <link href="https://www.varrazzo.com/blog/2020/02/29/adventures-in-yaml-config/" />
    <author>
      <name>Daniele Varrazzo</name>
    </author>
    <content type="html">&lt;p&gt;Developing database-backed applications, I've often had the need to extract a
meaningful selection of data out of a production database. Maybe in order to
set up a development environment, or a testing environment, or to try out a
complex migration on smaller dataset.&lt;/p&gt;
&lt;p&gt;However a &lt;tt class=&quot;docutils literal&quot;&gt;pg_dump&lt;/tt&gt; of the production db is not necessarily a good idea:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;the production data may be YUGE;&lt;/li&gt;
&lt;li&gt;the production data may contain sensitive information;&lt;/li&gt;
&lt;li&gt;some of the data in the production db might be bulky and irrelevant, for
instance audit tables.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Still, googling around, you don't get much to help: people still advise to use
&lt;tt class=&quot;docutils literal&quot;&gt;pg_dump&lt;/tt&gt; with a plethora of &lt;tt class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;--table&lt;/span&gt;&lt;/tt&gt;, but this results in the need of
saving a script to keep the unwieldy command line, and still that does not
make you able to modify in any way the data dumped from the table, for
instance to omit the &lt;tt class=&quot;docutils literal&quot;&gt;password&lt;/tt&gt; column. You might use &lt;tt class=&quot;docutils literal&quot;&gt;COPY TO&lt;/tt&gt; for that,
but that's an entirely different beast from &lt;tt class=&quot;docutils literal&quot;&gt;pg_dump&lt;/tt&gt; and the resulting file
is &lt;em&gt;only&lt;/em&gt; data: not even the columns names. It will bear no context about how
it should be restored (and now that you dropped the &lt;tt class=&quot;docutils literal&quot;&gt;password&lt;/tt&gt; column the
data won't align anymore and you won't be able to just run a &lt;tt class=&quot;docutils literal&quot;&gt;COPY FROM&lt;/tt&gt;...)&lt;/p&gt;
&lt;p&gt;A few months ago I decided to scratch this itch properly, and I started
writing a tool that, after some improvements, was deemed to be good enough to
be stamped as 0.1. After some discussion about the meaning of &lt;em&gt;dump&lt;/em&gt; and what
a good synonym could have been (with references ranging from relation breakups
to more scatological ones) it was called &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/dvarrazzo/pg_seldump&quot;&gt;pg_seldump&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The idea of the tool is to define a &lt;a class=&quot;reference external&quot; href=&quot;https://en.wikipedia.org/wiki/YAML&quot;&gt;YAML&lt;/a&gt; file containing a description of the
rule to apply to different database objects to dump. For instance:&lt;/p&gt;
&lt;pre class=&quot;code YAML literal-block&quot;&gt;
&lt;span class=&quot;c1&quot;&gt;# A YAML file is similar in content to a JSON file, but easier for human&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# to edit: more compact, less noisy, and can be commented.&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;db_objects&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# dump all the tables in the schema 'myapp'&lt;/span&gt;
  &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;schema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;myapp&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;dump&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# but not the one starting with 'audit_'&lt;/span&gt;
  &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;schema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;myapp&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;names&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;^audit_.*&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;skip&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# don't dump customers passwords, and replace their telephone no. with a dummy&lt;/span&gt;
  &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;schema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;myapp&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;customer&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;no_columns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;password&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;telephone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;+44&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;7853&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;123456&amp;quot;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;This description would produce a data-only dump as a text file containing the
data and enough statements to restore them by piping the entire file into
&lt;cite&gt;psql&lt;/cite&gt;.&lt;/p&gt;
&lt;p&gt;The program isn't finished yet, but it is already quite interesting: the
&lt;tt class=&quot;docutils literal&quot;&gt;pg_seldump&lt;/tt&gt; command takes in input one or more configuration files like the
one in the example and introspects the database looking for the objects to
dump. The objects are matched against all the rules and, inspired to CSS, it
picks the one with the highest selectivity. It also understand what fields use
what sequences, and if the field is dumped then the sequence state will be
saved as well.&lt;/p&gt;
&lt;p&gt;There is one large feature I'm about to develop: automatically navigating
foreign keys in order to collect all the data necessary to create a consistent
sample of the data. I started yesterday working at that feature, but
there is something else I wanted to do before...&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;what-s-in-a-configuration-file&quot;&gt;
&lt;h3&gt;What's in a configuration file?&lt;/h3&gt;
&lt;p&gt;So far, the program had a &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/dvarrazzo/pg_seldump/blob/96c811b272130d7492c62ba89216ab537dbd4d41/seldump/dumprule.py#L103&quot;&gt;parser for the configuration file&lt;/a&gt; to create
&amp;quot;rule&amp;quot; objects out of what found in the YAML. While it works, it's quite
verbose, it stops at the first error, and it's hard to understand from it what
is really allowed in the file. I find working with unstructured data really
impractical: every single property is optional, every typo (&lt;tt class=&quot;docutils literal&quot;&gt;schmea&lt;/tt&gt;) should
be explicitly checked.&lt;/p&gt;
&lt;p&gt;In order to check the configuration entirely before throwing it into the rest
of the program, and in order to be able to document precisely what is a valid
configuration file, I've taken a look at &lt;a class=&quot;reference external&quot; href=&quot;https://json-schema.org/&quot;&gt;JSON Schema&lt;/a&gt;. Now, that's
deceiving: validating YAML with JSON Schema? That turns out to be no problem,
because the validation doesn't happen at syntactical level, but it is
performed on the objects after parsing. Limiting the YAML to the same data
types JSON can handle it will work no problem.&lt;/p&gt;
&lt;p&gt;JSON Schemas are quite simple to define. My first thought was &lt;em&gt;noooo, another
huge thing to learn just for a simple thing...&lt;/em&gt; but actually it turned out to
be not difficult at all: it didn't take too long to put together a &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/dvarrazzo/pg_seldump/blob/eae1d8634444b0fd1bfeff4f75f89116a975b736/seldump/schema/config.yaml&quot;&gt;schema for
pg_seldump configuration file&lt;/a&gt; (in YAML of course). Having that it is
possible to perform automatic validation of the document against the schema
(for instance using the &lt;a class=&quot;reference external&quot; href=&quot;https://pypi.org/project/jsonschema/&quot;&gt;jsonschema&lt;/a&gt; Python package). Exciting times...&lt;/p&gt;
&lt;p&gt;However the results are not entirely satisfactory. For instance, this is a
configuration file containing 4 errors:&lt;/p&gt;
&lt;pre class=&quot;code YAML literal-block&quot;&gt;
&lt;span class=&quot;ln&quot;&gt;1 &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# badconfig.yaml&lt;/span&gt;
&lt;span class=&quot;ln&quot;&gt;2 &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;db_objects&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;ln&quot;&gt;3 &lt;/span&gt;  &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;ln&quot;&gt;4 &lt;/span&gt;    &lt;span class=&quot;nt&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;download&lt;/span&gt;
&lt;span class=&quot;ln&quot;&gt;5 &lt;/span&gt;    &lt;span class=&quot;nt&quot;&gt;kid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;table&lt;/span&gt;
&lt;span class=&quot;ln&quot;&gt;6 &lt;/span&gt;    &lt;span class=&quot;nt&quot;&gt;adjust_score&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;twelve&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;It's easy to use the validator to find all the errors at once:&lt;/p&gt;
&lt;pre class=&quot;code pycon literal-block&quot;&gt;
&lt;span class=&quot;kn&quot;&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;jsonschema&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;yaml&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;schema&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yaml&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;seldump/schema/config.yaml&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;validator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jsonschema&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Draft7Validator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;schema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yaml&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;badconfig.yaml&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;validator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iter_errors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;
Additional properties are not allowed ('kid' was unexpected)
10 is not of type 'string'
'twelve' is not of type 'integer'
'download' is not one of ['dump', 'skip', 'error', 'ref']&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;However these error messages, as informative as they can be, have lost the
context of where they originated. Sure 10 is not a string, but good luck
finding the right &amp;quot;10&amp;quot; into a large file. The problem comes from that same
characteristic that allowed us to validate a YAML file against a JSON schema
expressed into a YAML file: everything is based on Python plain objects
(scalars, dicts, lists) and the information of what line in what file that
value came from is long lost. For the same reason, the errors ordering is
undetermined.&lt;/p&gt;
&lt;p&gt;In order to overcome the problem, the idea is to attach file and line
information, available at parsing time, to the parsed objects. In a previous
approximation of the solution I had &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/dvarrazzo/pg_seldump/blob/96c811b272130d7492c62ba89216ab537dbd4d41/seldump/yaml.py&quot;&gt;only the dictionaries&lt;/a&gt; subclassed to
attach them their position. In case of error, the name of the file and the
first line of the dictionary would have been printed: better than nothing I
guess, but not perfect (in the above example any error would have been
reported at line 3).&lt;/p&gt;
&lt;p&gt;With the introduction of the JSON schema validator I got back on the
customized YAML parser. First I used &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/dvarrazzo/pg_seldump/blob/eae1d8634444b0fd1bfeff4f75f89116a975b736/seldump/yaml.py#L89&quot;&gt;more customization&lt;/a&gt;, subclassing lists
and wrapping scalars to memorize their positions and the position of their
content. The scalars themselves don't remember the attribute they are attached
to: the &lt;tt class=&quot;docutils literal&quot;&gt;10&lt;/tt&gt; above knows it came from line 3 of a file, but not that it was
the tentative &lt;tt class=&quot;docutils literal&quot;&gt;name&lt;/tt&gt; of an object. So the idea was to further instrument the
containers returned by the YAML parser, and memorize item by item what line
the values are parsed from. When a schema validation error is found,
&lt;tt class=&quot;docutils literal&quot;&gt;jsonschema&lt;/tt&gt; errors have an useful &lt;tt class=&quot;docutils literal&quot;&gt;path&lt;/tt&gt; attribute describing in what
object the error was found (for instance &lt;tt class=&quot;docutils literal&quot;&gt;['db_objects', 0, 'name']&lt;/tt&gt; for the
&amp;quot;10&amp;quot; error). So, if the last element is a string and the penultimate is a
dictionary, there is enough information to &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/dvarrazzo/pg_seldump/blob/eae1d8634444b0fd1bfeff4f75f89116a975b736/seldump/config.py#L135-L167&quot;&gt;associate it back to the original
file and position&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The result I think is very user friendly:&lt;/p&gt;
&lt;pre class=&quot;literal-block&quot;&gt;
$ pg_seldump --test badconfig.yaml
ERROR at badconfig.yaml:3: name: 10 is not of type 'string'
ERROR at badconfig.yaml:4: action: 'download' is not one of ['dump', 'skip', 'error']
ERROR at badconfig.yaml:5: Additional properties are not allowed ('kid' was unexpected)
ERROR at badconfig.yaml:6: adjust_score: 'twelve' is not of type 'integer'
&lt;/pre&gt;
&lt;p&gt;It wasn't possible to express everything in the JSON schema: demanding at most
one between &lt;tt class=&quot;docutils literal&quot;&gt;name&lt;/tt&gt; and &lt;tt class=&quot;docutils literal&quot;&gt;names&lt;/tt&gt; for in rule objects seems quite difficult
and... I don't think a regular expression exists to verify that a certain
string is a valid regular expression, does it? So certain finer checks are
still performed a step after schema validation, but still before handing
control to the rest of the program. However, emitting all the errors in one
go, together with the precise location where they occurred, makes the program
an ally rather than an opponent. &lt;em&gt;This is a program I would like to use.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Enough of YAML and configuration! Now I'm looking forward to dive into the
problem of navigating the graph of the tables across foreign keys and to
generate dynamically the nested queries to extract a consistent sample of
data, watching for the pitfalls of circular foreign keys and self-referencing
tables...&lt;/p&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="https://www.varrazzo.com/blog/2020/02/23/a-website/">
    <title type="text">A Website!</title>
    <id>urn:uuid:9ef98bd1-11e2-3b83-8c1c-2867fef80f27</id>
    <updated>2020-02-23T00:00:00Z</updated>
    <link href="https://www.varrazzo.com/blog/2020/02/23/a-website/" />
    <author>
      <name>Daniele Varrazzo</name>
    </author>
    <content type="html">&lt;p&gt;Time of changes.&lt;/p&gt;
&lt;p&gt;Last week, after 12 years working for the same company, I have terminated my
employment. It was a destabilising moment, followed by a wave of excitement
that I'm still riding, about what is to come.&lt;/p&gt;
&lt;p&gt;I still don't know about my next moves: for sure a break, and a journey
already organized in a couple of weeks, after which I doubt I will be able to
remain without working for a long time...&lt;/p&gt;
&lt;p&gt;My biggest desire would be to try and earn some living with &lt;a class=&quot;reference external&quot; href=&quot;/software/&quot;&gt;free software
projects&lt;/a&gt;. Some of my projects are already widely used, and I have new
features in mind to write. Other projects haven't been widely released, but I
have used them in my previous company and they are very promising. I have
recently set up a &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/sponsors/dvarrazzo/&quot;&gt;funding page&lt;/a&gt;: and I'm curious to see if it will become
anything relevant.&lt;/p&gt;
&lt;p&gt;At the same time, I am enjoying more and more practicing &lt;a class=&quot;reference external&quot; href=&quot;/photo/&quot;&gt;photography&lt;/a&gt;, so I
was also feeling the need to put somewhere an photographic portfolio, not only
a software one.&lt;/p&gt;
&lt;p&gt;But let's stop talking about me. Let's talk about this website, because
putting it together was actually cool.&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;how-was-it-made&quot;&gt;
&lt;h3&gt;How was it made&lt;/h3&gt;
&lt;p&gt;Unless you need to support several users editing the same content
concurrently, each one with different permissions, a database-backed website
is not really needed. And if a website is just a bunch of static pages, nice
things will happen:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;you can version it in Git or in your favourite SCM of the past,&lt;/li&gt;
&lt;li&gt;it's very simple to serve: just a bunch of files on a webserver,&lt;/li&gt;
&lt;li&gt;it will never be pwned,&lt;/li&gt;
&lt;li&gt;you can easily find someone to serve it for you: &lt;a class=&quot;reference external&quot; href=&quot;https://pages.github.com/&quot;&gt;GitHub pages&lt;/a&gt; for
instance.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Of course I don't want to write HTML by hand, so off I went looking for a
static website generator. As we mentioned GitHub pages, &lt;a class=&quot;reference external&quot; href=&quot;https://jekyllrb.com/docs/github-pages/&quot;&gt;Jekyll&lt;/a&gt; did come to
mind, but it has a couple of shortcomings:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;it's written in Ruby, which is not my expertise so, in case I needed a quick
hack, there would be a lot of overhead;&lt;/li&gt;
&lt;li&gt;it uses &lt;a class=&quot;reference external&quot; href=&quot;https://daringfireball.net/projects/markdown/&quot;&gt;Markdown&lt;/a&gt; as markup languages, which is &lt;a class=&quot;reference external&quot; href=&quot;http://www.zverovich.net/2016/06/16/rst-vs-markdown.html&quot;&gt;largely inferior&lt;/a&gt; to
&lt;a class=&quot;reference external&quot; href=&quot;https://en.wikipedia.org/wiki/ReStructuredText&quot;&gt;reStructuredText&lt;/a&gt; in design and tooling.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Shopping around, I found &lt;a class=&quot;reference external&quot; href=&quot;https://www.getlektor.com/&quot;&gt;Lektor&lt;/a&gt;, which seems actually a nifty thing. It uses
Markdown out-of-the-box as well, but it is easy to &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/fschulze/lektor-rst&quot;&gt;add reST using a
plugin&lt;/a&gt;. For an example, &lt;a class=&quot;reference external&quot; href=&quot;https://raw.githubusercontent.com/dvarrazzo/www.varrazzo.com/master/content/blog/a-website/contents.lr&quot;&gt;this is this article source&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I tried this setup with the &lt;a class=&quot;reference external&quot; href=&quot;https://www.psycopg.org/&quot;&gt;psycopg website&lt;/a&gt;, which I migrated from being a
Django website to &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg-website/&quot;&gt;static content&lt;/a&gt;, and it was quite a simple task.&lt;/p&gt;
&lt;p&gt;Then I went around shopping for a nice template: I found a cool one called
&lt;a class=&quot;reference external&quot; href=&quot;achtungthemes.com/borano/&quot;&gt;Borano&lt;/a&gt; (look at the &lt;a class=&quot;reference external&quot; href=&quot;/photo/&quot;&gt;portfolio&lt;/a&gt;, it is a joy...). Lektor supports &lt;a class=&quot;reference external&quot; href=&quot;https://palletsprojects.com/p/jinja/&quot;&gt;Jinja&lt;/a&gt;
templates to spit HTML, so now I am in the process of &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/dvarrazzo/www.varrazzo.com/blob/e02696529e58b1b72bb9067c91e1c783895b8912/templates/page.html&quot;&gt;converting&lt;/a&gt; the
template to Jinja, while at the same time I try and and work out what is that
I have to say.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;the-workflow&quot;&gt;
&lt;h3&gt;The workflow&lt;/h3&gt;
&lt;p&gt;All it takes to edit the website is:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;use my favourite editor (no pesky HTML textarea) to create and edit pages;&lt;/li&gt;
&lt;li&gt;running &lt;tt class=&quot;docutils literal&quot;&gt;make serve&lt;/tt&gt; the website preview is immediately available on
&lt;tt class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;http://localhost:5000/&lt;/span&gt;&lt;/tt&gt;;&lt;/li&gt;
&lt;li&gt;commit and push to &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/dvarrazzo/www.varrazzo.com/&quot;&gt;the website repos&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is where the human work of adding or changing content finishes. What will
happen behind the scene will be:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://travis-ci.org/dvarrazzo/www.varrazzo.com&quot;&gt;Travis will render the pages&lt;/a&gt; and push the result to &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/dvarrazzo/dvarrazzo.github.io&quot;&gt;the GitHub pages
repos&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;from there the website is immediately published on &lt;a class=&quot;reference external&quot; href=&quot;https://www.varrazzo.com/&quot;&gt;https://www.varrazzo.com/&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That's it.&lt;/p&gt;
&lt;p&gt;I don't think this setup can work for everyone. I could probably set up the
system to some non tech friend and explain what to do, but they should at
least be comfortable to use git for their regular workflow. It might be
actually not such a high bar: if someone would like to try and start
publishing a small website please let me know!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;bonus-comments&quot;&gt;
&lt;h3&gt;Bonus: comments&lt;/h3&gt;
&lt;p&gt;A blog is not a blog if it doesn't have comments. But open comments take spam
with them, which in my experience got very boring to administer.&lt;/p&gt;
&lt;p&gt;I was thinking to use GitHub issues to store my comments, in order to leverage
their anti-spam system, whilst still being able to take them out in case I'd
like to migrate to something else. But apparently it's difficult to have a new
idea on Internet, and I found a few implementations already written.&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://utteranc.es/&quot;&gt;utteranc.es&lt;/a&gt; seems a very good one and quick to set up, so here it is... üëá&lt;/p&gt;
&lt;/div&gt;
</content>
  </entry>
</feed>
