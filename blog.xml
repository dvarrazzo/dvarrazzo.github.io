<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title type="text">Blog</title>
  <id>urn:uuid:345e7579-5b16-39e4-9f1d-2a4bff93035d</id>
  <updated>2020-11-07T00:00:00Z</updated>
  <link href="https://www.varrazzo.com/blog/" />
  <link href="https://www.varrazzo.com/blog.xml" rel="self" />
  <author>
    <name></name>
  </author>
  <generator uri="https://github.com/t73fde/lektor-feed" version="20191006.1">Lektor Feed Plugin</generator>
  <entry xml:base="https://www.varrazzo.com/blog/2020/11/07/psycopg3-adaptation/">
    <title type="text">psycopg3 and adaptation choices</title>
    <id>urn:uuid:51a91c28-dea6-34b0-a597-51a8a362c3cd</id>
    <updated>2020-11-07T00:00:00Z</updated>
    <link href="https://www.varrazzo.com/blog/2020/11/07/psycopg3-adaptation/" />
    <author>
      <name>Daniele Varrazzo</name>
    </author>
    <content type="html">&lt;p&gt;One of the main behavioural differences between psycopg2 and 3, and a big
enought cause of incompatibility to require a &amp;quot;3&amp;quot;, is the use of server-side
binding vs. client-side (psycopg2 predates the FE-BE protocol supporting it).
Passing Python objects to the server as separate arguments leads sometimes to
a behaviour of the server different to what people are used to using psql and
psycopg2. An example: what do you think&lt;/p&gt;
&lt;pre class=&quot;code python literal-block&quot;&gt;
&lt;span class=&quot;n&quot;&gt;cursor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;select &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;should fetch? I assume it would be desirable to have a record &lt;tt class=&quot;docutils literal&quot;&gt;(&amp;quot;hello&amp;quot;,
10)&lt;/tt&gt; back - consistently to what you would return if you merged argument
client-side and queried for &lt;tt class=&quot;docutils literal&quot;&gt;select 'hello', 10&lt;/tt&gt;. However keeping this
behaviour predictable proved already tricky. When passing arguments to merge
server-side, the client must pass their string (or binary) representation and,
optionally, the oid of their types. The most intuitive thing to do would be to
associate the text type oid (25) to Python strings. This works well for
queries like the above one, but it proves too strict a type definition in
context where a cast from text is not allowed. For instance this will fail:&lt;/p&gt;
&lt;pre class=&quot;code python literal-block&quot;&gt;
&lt;span class=&quot;n&quot;&gt;cursor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;create table testjson(data jsonb)&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cursor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;insert into testjson (data) values (&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;)&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;The latter will raise the same exception you would get in psql if you execute
&lt;tt class=&quot;docutils literal&quot;&gt;insert into testjson (data) values &lt;span class=&quot;pre&quot;&gt;('{}'::text)&lt;/span&gt;&lt;/tt&gt;. The reason why a &lt;tt class=&quot;docutils literal&quot;&gt;values
&lt;span class=&quot;pre&quot;&gt;('{}')&lt;/span&gt;&lt;/tt&gt; works as expected in psql is because the untyped literal is
interpreted as unknown, and the server can always cast from unknown to any
other type. If we wanted to insert the data above the query should be
rewritten as:&lt;/p&gt;
&lt;pre class=&quot;code python literal-block&quot;&gt;
&lt;span class=&quot;n&quot;&gt;cursor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;insert into testjson (data) values (&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;::jsonb)&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;About a week ago I started the task to write &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/dvarrazzo/django/commits/psycopg3&quot;&gt;a Django backend for
psycopg3&lt;/a&gt;: running its test suite is proving a great way to observe the
behaviour of server-side binding in a plethora of different environments. The
problem of the non-implicit cast from text to jsonb made porting the backend
from psycopg2 to 3 &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/dvarrazzo/django/commit/1ca8b71ba9bc6acfe239dd42f751037644e59e13&quot;&gt;quite a tricky matter&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In order to provide an experience more similar to the use of psql and of
psycopg2, one possibility is to not pass an oid type for the strings, leaving
it unknown. When I tried with that approach, passing strings to jsonb fields
(which is not necessarily what you would do, but it's what Django does,
probably to uniform JSON dumping across different adapter) became immediately
much simpler. So it seems a good choice, but not an overall win: our &amp;quot;hello
world&amp;quot; query:&lt;/p&gt;
&lt;pre class=&quot;code python literal-block&quot;&gt;
&lt;span class=&quot;n&quot;&gt;cursor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;select &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;fails with PostgreSQL 9.6 and older versions, returning an error such as
&lt;em&gt;could not determine data type of parameter $1&lt;/em&gt;. PostgreSQL 10 and following
are more permissive and convert unknown to text on output.&lt;/p&gt;
&lt;p&gt;It seems like there is a choice to make here: mine at the moment is to keep
the latter behaviour, both because that's what allows to write the simpler
code with the majority of the supported PostgreSQL versions. People using 9.6
and previous version would need to adjust to:&lt;/p&gt;
&lt;pre class=&quot;code python literal-block&quot;&gt;
&lt;span class=&quot;n&quot;&gt;cursor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;select &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;::text, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;but the use case of inserting data into tables seems a more important use case
than parroting back a string after a database round-trip.&lt;/p&gt;
&lt;div class=&quot;admonition admonition-choices-to-cast-python-str-type&quot;&gt;
&lt;p class=&quot;first admonition-title&quot;&gt;Choices to cast Python &lt;tt class=&quot;docutils literal&quot;&gt;str&lt;/tt&gt; type:&lt;/p&gt;
&lt;p&gt;To &lt;tt class=&quot;docutils literal&quot;&gt;unknown&lt;/tt&gt;:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;pro: passed without casting to most data types and functions&lt;/li&gt;
&lt;li&gt;con: requires a cast to roundtrip back with PostgreSQL 9.6 and previous&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To &lt;tt class=&quot;docutils literal&quot;&gt;text&lt;/tt&gt;:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;pro: roundtrips with PostgreSQL 9.6 and previous&lt;/li&gt;
&lt;li&gt;con: may require several casts for most of data type, both in insert and
functions&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;last&quot;&gt;&lt;tt class=&quot;docutils literal&quot;&gt;unknown&lt;/tt&gt; seems the winner.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;What about the numbers? That's a problem thorny in a different way. Python
integers are of arbitrary size, so they map better to a subset of the
&lt;tt class=&quot;docutils literal&quot;&gt;numeric&lt;/tt&gt; type than to &lt;tt class=&quot;docutils literal&quot;&gt;int4&lt;/tt&gt; or &lt;tt class=&quot;docutils literal&quot;&gt;int8&lt;/tt&gt;. However there is a similar
problem, where seemingly familiar expression don't behave as expected. If this
works in psql:&lt;/p&gt;
&lt;pre class=&quot;literal-block&quot;&gt;
select data -&amp;gt; 'a' -&amp;gt; 2 from testjson;
&lt;/pre&gt;
&lt;p&gt;a similar statement with 2 as a parameter will fail with an error like
&lt;em&gt;operator does not exist: jsonb -&amp;gt; numeric&lt;/em&gt;. Passing unknown as oid would
work, but now our greeting would return instead &lt;tt class=&quot;docutils literal&quot;&gt;('hello', '10')&lt;/tt&gt;, with the
number converted to string. This is probably too much of a departure from the
expected behaviour; at least, unlike the test-to-json case, there is an
automatic cast from &lt;tt class=&quot;docutils literal&quot;&gt;numeric&lt;/tt&gt; to integer, so an &lt;tt class=&quot;docutils literal&quot;&gt;insert into
integer_field&lt;/tt&gt; works as expected. Only operators and functions whose
arguments are declared &lt;tt class=&quot;docutils literal&quot;&gt;integer&lt;/tt&gt; and there is no &lt;tt class=&quot;docutils literal&quot;&gt;numeric&lt;/tt&gt; version trip
into an error: JSON's &lt;tt class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;/tt&gt;, binary operators such as &lt;tt class=&quot;docutils literal&quot;&gt;&amp;gt;&amp;gt;&lt;/tt&gt; and &lt;tt class=&quot;docutils literal&quot;&gt;&amp;amp;&lt;/tt&gt;, and
few others:&lt;/p&gt;
&lt;pre class=&quot;literal-block&quot;&gt;
piro=# select current_date, current_date + 1;
 current_date |  ?column?
---------------+------------
 2020-11-07   | 2020-11-08
(1 row)

piro=# select current_date + 1::numeric;
ERROR:  operator does not exist: date + numeric
LINE 1: select current_date + 1::numeric;
                            ^
HINT:  No operator matches the given name and argument types. You might
need to add explicit type casts.
&lt;/pre&gt;
&lt;p&gt;Note that when Postgres says &lt;tt class=&quot;docutils literal&quot;&gt;integer&lt;/tt&gt; it means 4 bytes signed: defaulting
the Python &lt;tt class=&quot;docutils literal&quot;&gt;int&lt;/tt&gt; to the &lt;tt class=&quot;docutils literal&quot;&gt;bigint&lt;/tt&gt; oid solves no problem - the same
functions would fail the same way, and defaulting it to &lt;tt class=&quot;docutils literal&quot;&gt;int4&lt;/tt&gt; I feel it
would overflow too easily in a 64 bits world.&lt;/p&gt;
&lt;p&gt;How to fix that? As the hint suggests, the user would have to either add a
cast to the query, which would look like:&lt;/p&gt;
&lt;pre class=&quot;code python literal-block&quot;&gt;
&lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;select current_date + &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;::int&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;or to specify an object that would get converted in Postgres to the oid of
&lt;tt class=&quot;docutils literal&quot;&gt;integer&lt;/tt&gt;: in psycopg3 I'm testing with adding subclasses of &lt;tt class=&quot;docutils literal&quot;&gt;int&lt;/tt&gt; called
&lt;tt class=&quot;docutils literal&quot;&gt;Int4&lt;/tt&gt;, &lt;tt class=&quot;docutils literal&quot;&gt;Int8&lt;/tt&gt; etc. to map more closely on the Postgres types:&lt;/p&gt;
&lt;pre class=&quot;code python literal-block&quot;&gt;
&lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;select current_date + &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Int4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)])&lt;/span&gt;
&lt;/pre&gt;
&lt;div class=&quot;admonition admonition-choices-to-cast-python-int-type&quot;&gt;
&lt;p class=&quot;first admonition-title&quot;&gt;Choices to cast Python &lt;tt class=&quot;docutils literal&quot;&gt;int&lt;/tt&gt; type:&lt;/p&gt;
&lt;p&gt;To &lt;tt class=&quot;docutils literal&quot;&gt;unknown&lt;/tt&gt;:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;+1: can express the full range of the unbounded Python &lt;tt class=&quot;docutils literal&quot;&gt;int&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;+2: can be passed without cast to most data types and functions&lt;/li&gt;
&lt;li&gt;-1: roundtrips back to string, error on PostgreSQL &amp;lt; 10&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To &lt;tt class=&quot;docutils literal&quot;&gt;decimal&lt;/tt&gt;:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;+1: can express the full range of the unbounded Python &lt;tt class=&quot;docutils literal&quot;&gt;int&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;+1: can be passed without cast to most data types&lt;/li&gt;
&lt;li&gt;+1: requires a cast for some functions&lt;/li&gt;
&lt;li&gt;-0.5: roundtrips back to &lt;tt class=&quot;docutils literal&quot;&gt;Decimal&lt;/tt&gt; (but maybe we could cast to int if
scale = 0?)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To &lt;tt class=&quot;docutils literal&quot;&gt;int8&lt;/tt&gt;:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;+1: can be passed without cast to most data types&lt;/li&gt;
&lt;li&gt;+1: roundtrips back to &lt;tt class=&quot;docutils literal&quot;&gt;int&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;-1: requires a cast for some functions&lt;/li&gt;
&lt;li&gt;-0.5: can't express values not fitting in 64 bits (relatively limited
use case: if the target column is &lt;tt class=&quot;docutils literal&quot;&gt;numeric&lt;/tt&gt; then it would be wise for
the user to pass a &lt;tt class=&quot;docutils literal&quot;&gt;Decimal&lt;/tt&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To &lt;tt class=&quot;docutils literal&quot;&gt;int4&lt;/tt&gt;:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;+2: can be passed without cast to most data types and functions&lt;/li&gt;
&lt;li&gt;+1: roundtrips back to &lt;tt class=&quot;docutils literal&quot;&gt;int&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;-1: limited range: couldn't be used to pass a value not fitting into 32
bytes from Python to a &lt;tt class=&quot;docutils literal&quot;&gt;bigint&lt;/tt&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;last&quot;&gt;Winner: unclear. The only I feel to exclude is &lt;tt class=&quot;docutils literal&quot;&gt;int4&lt;/tt&gt;, which
unfortunately is the only types which makes most functions work. Maybe
&lt;tt class=&quot;docutils literal&quot;&gt;decimal&lt;/tt&gt;, but only if it turns out easy to cast back values with scale
= 0 to integer.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Being the adaptation system flexible, people are able to override these
choices, but I don't expect many people wanting to do it, and doing it
process-wise might cause interoperation problems across libraries. The
behaviour out-of-the-box is obviously important and I would like to get the
trade-offs right.&lt;/p&gt;
&lt;p&gt;What do you think?&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="https://www.varrazzo.com/blog/2020/07/25/surviving-django/">
    <title type="text">Surviving Django (if you care about databases)</title>
    <id>urn:uuid:070a000d-40f1-3e95-8b80-bf979d9c29e3</id>
    <updated>2020-07-25T00:00:00Z</updated>
    <link href="https://www.varrazzo.com/blog/2020/07/25/surviving-django/" />
    <author>
      <name>Daniele Varrazzo</name>
    </author>
    <content type="html">&lt;p&gt;Django is currently the most commonly used full-stack web framework for Python. It has
been around for a good 15 years, emerging as a winner from a period in which
Python was already mature, but its web development tools were comparatively
much more immature and fragmented.&lt;/p&gt;
&lt;p&gt;Django allows the definition of objects in your program as &amp;quot;models&amp;quot; using the
&lt;tt class=&quot;docutils literal&quot;&gt;Model&lt;/tt&gt; base class. They behave largely like normal Python classes, with
added support to save into, and retrieve from, the relational database backing
your application. If you don't need such database support, you didn't
need a full-stack web framework in first place.&lt;/p&gt;
&lt;p&gt;Django tries to be independent from the database you choose. It sounds like
a good idea, but only on paper. After working several years
with Django systems, both written from scratch or inherited and maintained, I
feel the &amp;quot;blessed&amp;quot; way of working with databases and
Django leads you to using your database in a sub-optimal way, and unnecessarily complicates
the development and maintenance cycle of your project.&lt;/p&gt;
&lt;p&gt;I think the divergence between wishful thinking and reality starts from a
fundamental misunderstanding between you and Django, which is not written in
the contract you haven't signed with them anyway:&lt;/p&gt;
&lt;blockquote class=&quot;pull-quote&quot;&gt;
&amp;quot;independence from the relational database&amp;quot; is a feature needed by Django
as a framework, &lt;em&gt;not by the program you are writing&lt;/em&gt;.&lt;/blockquote&gt;
&lt;p&gt;Django needs it because a web framework not tied to a single database vendor
is more valuable than one tied to a specific one - and that's fair enough. &lt;em&gt;But you
don't:&lt;/em&gt; your web program, most likely than not, will not have to switch from
one database to another. So, &lt;a class=&quot;reference external&quot; href=&quot;https://www.martinfowler.com/bliki/Yagni.html&quot;&gt;You Ain't Gonna Need It™&lt;/a&gt;. Portability at all costs
leads to at least two problems:&lt;/p&gt;
&lt;p&gt;1) You will not able to use all the features offered by your relational
database.&lt;/p&gt;
&lt;p&gt;2) Every change to your models, or to your database schema, will be more
complicated than it should be.&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;you-ain-t-gonna-need-it&quot;&gt;
&lt;h3&gt;You Ain't Gonna Need It&lt;/h3&gt;
&lt;p&gt;How many times have you worked on a project and, after 1-2 years of
development, you have changed to a different database?&lt;/p&gt;
&lt;p&gt;I can tell you how many times it happened to me, I counted them: exactly
never.&lt;/p&gt;
&lt;p&gt;Replacing your database vendor is a major, traumatic occurrence, almost as
much as rewriting your program in a different language. If you replace your
database, more likely than not, it is because you are interested in the
features of the new databas. You need to use them so using the common
functionalities between the old and the new one will not solve any of your
problems.&lt;/p&gt;
&lt;p&gt;Did you maybe start your project with SQLite and now your project grew enough
to need a bigger database? If so then you are still at the phase in
which your project is a toy: you haven't done anything yet that requires
thinking in terms of concurrency. Even if you have to rewrite a few things,
it's not going to be a lot.&lt;/p&gt;
&lt;p&gt;Do you have a large MySQL project and now you have to migrate to PostgreSQL?
That's not gonna happen: you have probably tweaked MySQL, have expertise in
MySQL. Maybe PostgreSQL might be a better database in some aspects, but not so much
that you want to migrate all your data and start from scratch without
&lt;a class=&quot;reference external&quot; href=&quot;http://www.catb.org/jargon/html/F/frobnicate.html&quot;&gt;frobbing, twiddling, tweaking&lt;/a&gt; the database configuration. Did you say
you have High Availability and Disaster Recovery configured? That's to be
converted too of course.&lt;/p&gt;
&lt;p&gt;In the above paragraph, replace the database vendor with all the permutations
of MySQL, PostgreSQL, MS SQL, Oracle. &lt;em&gt;That's not gonna happen&lt;/em&gt;. Except maybe
if an Oracle salesman gets hold of someone in your project with a modicum of
decision making and talks them into buying some sort of expensive license, but
that's not a technical problem, it's a political one, and it's up to you to
decide if you are comfortable with it.&lt;/p&gt;
&lt;p&gt;Have you got PostgreSQL in production, but you want to test with SQLite because
it's easier to set up? If so, your tests are just a tick-box exercise: you
are not testing anything remotely plausible and resembling your live system.&lt;/p&gt;
&lt;p&gt;Choosing a database happens in the first days of your projects, it will not
happen when the project is mature. You may as well use all the features
available with your database, not only the ones common enough that Django
created a Python wrapper for it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;use-all-the-features&quot;&gt;
&lt;h3&gt;Use all the features&lt;/h3&gt;
&lt;p&gt;Scanning the schema of a Django program I've written and maintained for a few
years I see:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;Schemas (as in the &amp;quot;directory of the tables&amp;quot;, not all the other meanings)&lt;/li&gt;
&lt;li&gt;Custom domains&lt;/li&gt;
&lt;li&gt;Collations&lt;/li&gt;
&lt;li&gt;Triggers&lt;/li&gt;
&lt;li&gt;Permissions&lt;/li&gt;
&lt;li&gt;Partial indexes&lt;/li&gt;
&lt;li&gt;Constraint exclusions&lt;/li&gt;
&lt;li&gt;Views&lt;/li&gt;
&lt;li&gt;Stored procedures&lt;/li&gt;
&lt;li&gt;Partitioned tables&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If these features were used, it's because they allowed to implement
certain features needed for the program in a simpler way than what possible in
the language (if even would have been possible there). Audit for
instance: Django doesn't have an audit feature except for the changes made in
the admin. Even if you added some form of manual auditing to each &lt;tt class=&quot;docutils literal&quot;&gt;save()&lt;/tt&gt;
method, it will not capture changes made outside Django. It wouldn't be very
secure either: Django uses a single user to access the database so if someone
manages to hijack that user, they would be able to change the data in the database
and alter the audit tables to hide their traces.&lt;/p&gt;
&lt;p&gt;In PostgreSQL you can:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;Create an &amp;quot;audit&amp;quot; user: it will have different permissions than the user of
the Django application.&lt;/li&gt;
&lt;li&gt;Create an &amp;quot;audit&amp;quot; schema: revoking write permission to all the objects it
will contain from the Django user.&lt;/li&gt;
&lt;li&gt;Create a function to append a record to an audit table owned by the &amp;quot;audit&amp;quot;
user, but callable by the Django user.&lt;/li&gt;
&lt;li&gt;Add a trigger to the tables to audit.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This setup requires Postgres-specific knowledge, which is fair for a feature
that has to watch over the database data whichever the origin of the change
is. But being PostgreSQL extensible as it is, you can &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/dvarrazzo/pgaudit&quot;&gt;use an extension&lt;/a&gt; to automate the creation and
maintenance of the audit triggers and functions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;so-where-do-i-put-the-schema&quot;&gt;
&lt;h3&gt;So where do I put the schema?&lt;/h3&gt;
&lt;p&gt;Into an SQL file!&lt;/p&gt;
&lt;p&gt;With its tiny &lt;tt class=&quot;docutils literal&quot;&gt;.sql&lt;/tt&gt; extension!&lt;/p&gt;
&lt;p&gt;And with comments! Explaining why a certain index or constraint exist!&lt;/p&gt;
&lt;p&gt;With constraints named meaningfully, available for manipulation, not
&lt;tt class=&quot;docutils literal&quot;&gt;auth_group_permissions_group_id_b120cbf9_fk_auth_group_id&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Sounds civilised to me.&lt;/p&gt;
&lt;p&gt;The nice thing of doing this is that, if you do things carefully enough, Django
will not notice anything at all.&lt;/p&gt;
&lt;p&gt;Take the above audit examples: Django is not meant to interact with it:
everything will just happen under its nose. You can use views instead of
tables for read-only models, you can use domains instead of more basic data
types for your fields: Django won't see your triggers triggering, your
constraints constraining, your permissions permitting - except when things go
wrong, which will result in an error 500 and a Python traceback. This is at least
better than bad data in the database. Also it won't see your procedures
proceeding, your domains dominating...you get the idea.&lt;/p&gt;
&lt;p&gt;Using psql to import the schema into an empty database means you can modularise the
code and use &lt;tt class=&quot;docutils literal&quot;&gt;\i&lt;/tt&gt; to import &amp;quot;submodules&amp;quot;. A typical pattern for me is to have
a &lt;tt class=&quot;docutils literal&quot;&gt;database.sql&lt;/tt&gt; to create global objects (users, extensions, schemas),
set the basic permissions and import the details into target schemas.&lt;/p&gt;
&lt;pre class=&quot;code postgres literal-block&quot;&gt;
&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sql&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;revoke&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;schema&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;-- safety
&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;--- create a schema for the django app tables
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;schema&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myapp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;grant&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;usage&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;schema&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myapp&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myapp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;backup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;--- set the default permissions for all the object that will be created there
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;alter&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;privileges&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;schema&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myapp&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;grant&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;delete&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;tables&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myapp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;alter&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;privileges&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;schema&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myapp&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;grant&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;tables&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;backup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;alter&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;privileges&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;schema&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myapp&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;grant&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;all&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sequences&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myapp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;alter&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;privileges&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;schema&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myapp&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;grant&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sequences&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;backup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;--- import the tables into the schema
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;search_path&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myapp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;django&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sql&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;-- django objects - users, groups, permissions tables
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myapp&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sql&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;-- your app models
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;reset&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;search_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;The &lt;tt class=&quot;docutils literal&quot;&gt;database.sql&lt;/tt&gt; doesn't create the database itself so you can create an
empty one anywhere it's needed, then you can use &lt;tt class=&quot;docutils literal&quot;&gt;psql &lt;span class=&quot;pre&quot;&gt;-f&lt;/span&gt; database.sql
&lt;span class=&quot;pre&quot;&gt;&amp;quot;postgres://connection/url&amp;quot;&lt;/span&gt;&lt;/tt&gt; to populate it. The &lt;tt class=&quot;docutils literal&quot;&gt;myapp.sql&lt;/tt&gt; file
shouldn't contain any reference to the schema &lt;tt class=&quot;docutils literal&quot;&gt;myapp&lt;/tt&gt; where the objects are
created so the schama can be easily changed. Postgres doesn't have a statement like
&lt;tt class=&quot;docutils literal&quot;&gt;CREATE USER ... IF NOT EXIST&lt;/tt&gt;: in &lt;tt class=&quot;docutils literal&quot;&gt;users.sql&lt;/tt&gt; you can simulate it with:&lt;/p&gt;
&lt;pre class=&quot;code postgres literal-block&quot;&gt;
&lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;perform&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pg_user&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;usename&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'myapp'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;found&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myapp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;language&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;plpgsql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;migrations&quot;&gt;
&lt;h3&gt;Migrations&lt;/h3&gt;
&lt;p&gt;Django has an amazingly complex system to &lt;a class=&quot;reference external&quot; href=&quot;https://docs.djangoproject.com/en/3.0/topics/migrations/&quot;&gt;perform model migrations&lt;/a&gt;. It is
complex amongst other reasons because:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class=&quot;first&quot;&gt;It actually migrates &lt;em&gt;Python models&lt;/em&gt; not &lt;em&gt;database schemas&lt;/em&gt;. Even if you change a field's help
text, it generates a migration.&lt;/p&gt;
&lt;pre class=&quot;code python literal-block&quot;&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Migration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;migrations&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Migration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;operations&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;migrations&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AlterField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;model_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'foo'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'bar'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BooleanField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;help_text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'I only changed this'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;That's not useful at all for the database, but Django will create it for you
and if you remove it, it will add it back. Similarly, changing a &lt;a class=&quot;reference external&quot; href=&quot;https://docs.djangoproject.com/en/3.0/ref/models/fields/#choices&quot;&gt;choices
list&lt;/a&gt;, a display label, results in migrations with no database operation,
only a Python operation, and practically no SQL purpose.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class=&quot;first&quot;&gt;It allows access to the state of the model at times intermediate between
migrations, using &lt;a class=&quot;reference external&quot; href=&quot;https://docs.djangoproject.com/en/3.0/ref/applications/#django.apps.AppConfig.get_models&quot;&gt;get_model&lt;/a&gt;&lt;tt class=&quot;docutils literal&quot;&gt;(appname, modelname)&lt;/tt&gt; and with some
Python code in the returned model. But if that code also happens to use
any code inside your application, importing models with a normal Python
&lt;tt class=&quot;docutils literal&quot;&gt;import&lt;/tt&gt;, things will crash because of a mismatch between model
definitions and schema in the database. But they won't crash immediately: only
later when you will apply some unrelated migration. And not when that
migration is needed: only after it has already been applied and it doesn't
have anything more to do in its lifetime: it is implemented as a model that
Django will keep on importing over and over. In a project I'm currently
working on, I had to add this function into our codebase:&lt;/p&gt;
&lt;pre class=&quot;code python literal-block&quot;&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;can_run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;transaction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;atomic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;ne&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;False&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;True&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;And use it as a whack-a-mole to avoid already applied migrations from exploding,
adding early bailouts like:&lt;/p&gt;
&lt;pre class=&quot;code python literal-block&quot;&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;data_migration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;apps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;schema_editor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;can_run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Model1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Model2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Model3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# ...the stuff I meant to do&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Migration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;migrations&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Migration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;operations&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;migrations&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RunPython&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data_migration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class=&quot;first&quot;&gt;It detects changes to your models and infers how to change the schema.
This is pretty much impossible to do in an automated way, except in the
simplest cases. So the feature is incomplete, and when it thinks it
knows what it's doing, often it doesn't and it's hard to tell it to stop.&lt;/p&gt;
&lt;p&gt;In a case I experienced, my model &lt;tt class=&quot;docutils literal&quot;&gt;Foo&lt;/tt&gt; needed some extra pepper to its attribute
&lt;tt class=&quot;docutils literal&quot;&gt;bar&lt;/tt&gt;. So we thought to fetch the data from the database into a hidden
&lt;tt class=&quot;docutils literal&quot;&gt;_bar&lt;/tt&gt; attribute and then have a Python property to expose it:&lt;/p&gt;
&lt;pre class=&quot;code diff literal-block&quot;&gt;
 class Foo(models.Model):

&lt;span class=&quot;gd&quot;&gt;-    bar = models.CharField(
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+    _bar = models.CharField(
&lt;/span&gt;         max_length=255,
&lt;span class=&quot;gi&quot;&gt;+        db_column='bar',
&lt;/span&gt;     )
&lt;span class=&quot;gi&quot;&gt;+
+    &amp;#64;property
+    def bar(self):
+        return something_more()&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;No change needed to the database, but Django insisted on creating migration
consisting pretty much of:&lt;/p&gt;
&lt;pre class=&quot;code postgres literal-block&quot;&gt;
&lt;span class=&quot;k&quot;&gt;ALTER&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DROP&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;COLUMN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;ALTER&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ADD&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;COLUMN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;So goodbye to your data! But who needs a &lt;tt class=&quot;docutils literal&quot;&gt;bar&lt;/tt&gt; anyway. Although I think I could've
used a bar, and a few drinks, if that migration had hit production.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Much of the complexity of this system is designed to give you a specific
feature: migrations abstracted from your database. In my opinion, if there is
something less likely to happen than writing a complex app to run on
interchangeable databases, it's the need to repeat the same history of
migrations. The cost you pay for this YAGNI feature is a cumbersome and
fragile system trying to have a life of its own whilst fighting yours. It is a
direct application of &lt;a class=&quot;reference external&quot; href=&quot;https://twitter.com/jeremydmiller/status/568797862441586688&quot;&gt;Jeremy Miller's observation&lt;/a&gt; that &lt;em&gt;any extensibility
point that’s never used isn’t just wasted effort, it’s likely to also get in
your way as well&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;I may be a bit of a control freak, but I think that there is too much magic
here and too few hooks to intervene to correct it, all playing too close with my
data to feel comfortable. This comes with the advantage of being able to
replay your migrations in the future on a different database vendor, but I
struggle to find a valid use case for it not involving parallel universes and
time machines.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;so-what-do-i-use-instead-of-migrations&quot;&gt;
&lt;h3&gt;So what do I use instead of migrations?&lt;/h3&gt;
&lt;p&gt;You can use SQL files! Yes, same extensions as before. It takes some
discipline, but it rewards with great control of the behaviour of the database
and the safety of the data. The work involved consists in:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;Knowing your database and its data definition and manipulation language: to
know how to change the schema and the data associated.&lt;/li&gt;
&lt;li&gt;If you have the database schema in source control, when you change the
schema, you will usually want to associate a similar &amp;quot;schema patch&amp;quot;. An
ex-colleague of mine wrote a script to &amp;quot;prime&amp;quot; a migration with the right name
and a comment containing the diff of the schema, to give an idea of what to
do.&lt;/li&gt;
&lt;li&gt;You can have a database table recording the schema patches already applied
to the database and a script to look for unapplied patches: run them,
and record them into the table, to run on deployment.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I have a &lt;a class=&quot;reference external&quot; href=&quot;https://gist.github.com/dvarrazzo/86b06961fa3278293e193417adbf3daf&quot;&gt;patch_db.py&lt;/a&gt; script that I have used, with small variations, in
several projects. It is meant to be executed as a database superuser so that
the application user can be given only limited privileges: enough to read and
change the data it needs. No need to be a superuser or to own the tables to be
able to change their schema. A few features of this simple script include:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;If the database had never been patched, it creates a &lt;tt class=&quot;docutils literal&quot;&gt;schema_patch&lt;/tt&gt; table
and registers the patches available, as already applied.&lt;/li&gt;
&lt;li&gt;If the table exists, it compares the content of the patches directory with
the table content and applies and registers the missing patches in
alphabetical order. You can use the date as prefix to make sure they are
applied in the correct order.&lt;/li&gt;
&lt;li&gt;It keeps an advisory lock for the entire run to make sure that there will
not be two patching processes running concurrently by mistake.&lt;/li&gt;
&lt;li&gt;The patching process is identifiable in PostgreSQL via its appname so it
can be monitored and dealt with, in case it behaves unexpectedly.&lt;/li&gt;
&lt;li&gt;Patches can be applied one by one, with interactive user confirmation, or
unattended for automatic deployment.&lt;/li&gt;
&lt;li&gt;You can associate executable scripts to a patch, to run before or after it,
to implement procedures difficult to implement in SQL: you can have
&lt;tt class=&quot;docutils literal&quot;&gt;my_patch.pre.sh&lt;/tt&gt; and &lt;tt class=&quot;docutils literal&quot;&gt;my_patch.post.py&lt;/tt&gt; to run respectively before and
after &lt;tt class=&quot;docutils literal&quot;&gt;my_patch.sql&lt;/tt&gt; is applied, receiving a &lt;tt class=&quot;docutils literal&quot;&gt;PATCH_DSN&lt;/tt&gt; environment
variable to know where to connect to.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The script is independent from Django; if used in a Django project it might be
reimplemented as a management command, but I have never felt compelled to do
so.&lt;/p&gt;
&lt;p&gt;Once this script is integrated with your deployment procedures, there are these
few examples of patches that can be produced, scanning the patches directory
of projects I have worked with:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;Add a field to a table, populate it with data obtained querying other
database tables.&lt;/li&gt;
&lt;li&gt;Move a field to another table, split a table into two joined tables, change a
relation from one-to-many to many-to-many without losing the current
relations.&lt;/li&gt;
&lt;li&gt;Partition previously unpartitioned data by creating partitions, moving
data into them, and emptying the base table.&lt;/li&gt;
&lt;li&gt;Add a new currency to the currencies table, change the name of that Balkan
nation to &amp;quot;Republic of North Macedonia&amp;quot;, remove that island from the
list of European Union nations, or any other change to some &amp;quot;configuration
table&amp;quot;.&lt;/li&gt;
&lt;li&gt;Fix data after a bug producing wrong data was discovered.&lt;/li&gt;
&lt;li&gt;Add a new Django group and set the group permissions or add new objects'
permissions to existing groups.&lt;/li&gt;
&lt;li&gt;Create a normal column for a piece of data that was previously stored in an
unstructured way into a JSON field, remove the data from the JSON and move
it to the new field.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In practice, Django migrations create automatically only the simplest of
operations, like adding a new (empty) column or dropping a column. Renaming a
column is already an operation fraught with perils, and manipulating data
using Python models while the models themselves are being altered, is a task of
Shrödingeranean complexity.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;is-it-difficult-to-write-patches&quot;&gt;
&lt;h3&gt;Is it difficult to write patches?&lt;/h3&gt;
&lt;p&gt;Most of the time writing an SQL patch is simpler than writing a
patch in the Django migration system. The latter is something that, in order to achieve
successfully, requires knowledge not so much of the database, but rather of the
migration system itself.&lt;/p&gt;
&lt;p&gt;Looking at a few examples, taken directly from Django's own &lt;a class=&quot;reference external&quot; href=&quot;https://docs.djangoproject.com/en/3.0/howto/writing-migrations/&quot;&gt;writing
migrations&lt;/a&gt; page:&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://docs.djangoproject.com/en/3.0/howto/writing-migrations/#migrations-that-add-unique-fields&quot;&gt;Adding a non-nullable field&lt;/a&gt; in Django migrations involves creating the
normal migration, i.e. the one creating a
&lt;tt class=&quot;docutils literal&quot;&gt;field=models.UUIDField(default=uuid.uuid4, unique=True)&lt;/tt&gt;, creating
two empty ones (it's suggested to use &lt;tt class=&quot;docutils literal&quot;&gt;makemigrations myapp &lt;span class=&quot;pre&quot;&gt;--empty&lt;/span&gt;&lt;/tt&gt;
because there's a certain amount of boilerplate involved), and pretty much
have a sequence of:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;Create a field with the default, but nullable&lt;/li&gt;
&lt;li&gt;Fill it with values (using a &lt;tt class=&quot;docutils literal&quot;&gt;RunPython&lt;/tt&gt; step)&lt;/li&gt;
&lt;li&gt;Make it non-nullable&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There is also a bit of a race condition between object creation whilst the
migration has been applied.&lt;/p&gt;
&lt;p&gt;The same steps, in SQL, take much less boilerplate: in one patch you can:&lt;/p&gt;
&lt;pre class=&quot;code postgres literal-block&quot;&gt;
&lt;span class=&quot;k&quot;&gt;BEGIN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;ALTER&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myapp_mymodel&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ADD&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;uuid&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;uuid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;UPDATE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myapp_mymodel&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;uuid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uuid_generate_v4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;ALTER&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myapp_mymodel&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ALTER&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;uuid&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;COMMIT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Or variations of the above (if you want the default generated by the
database, a non-locking operation on a large table, a unique constraint...)&lt;/p&gt;
&lt;hr class=&quot;docutils&quot; /&gt;
&lt;p&gt;Writing &lt;a class=&quot;reference external&quot; href=&quot;https://docs.djangoproject.com/en/3.0/howto/writing-migrations/#non-atomic-migrations&quot;&gt;non-atomic migrations&lt;/a&gt; can either all be dealt with in one SQL
script using a PL/pgSQL &lt;tt class=&quot;docutils literal&quot;&gt;DO&lt;/tt&gt; statement or with an additional script to
replace the second step in the previous example (untested):&lt;/p&gt;
&lt;pre class=&quot;code python literal-block&quot;&gt;
&lt;span class=&quot;c1&quot;&gt;# migration add_uuid_nullable.post.py&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cursor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;quot;&amp;quot;
        UPDATE myapp_mymodel SET uuid = uuid_generate_v4()
        FROM (
            SELECT id FROM myapp_mymodel WHERE uuid IS NULL
            ORDER BY id LIMIT 1000
        ) x USING (id)
        RETURNING id
        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fetchall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;
&lt;/pre&gt;
&lt;hr class=&quot;docutils&quot; /&gt;
&lt;p&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://docs.djangoproject.com/en/3.0/howto/writing-migrations/#migrating-data-between-third-party-apps&quot;&gt;Migrating data between third-party apps&lt;/a&gt; gets in the way with the whole
&lt;tt class=&quot;docutils literal&quot;&gt;get_model()&lt;/tt&gt; machinery and you have to fight its error.&lt;/p&gt;
&lt;p&gt;It's much more simple if you just leave Python out:&lt;/p&gt;
&lt;pre class=&quot;code postgres literal-block&quot;&gt;
&lt;span class=&quot;k&quot;&gt;ALTER&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;oldapp_oldmodel&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;RENAME&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newapp_newmodel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Or whatever &lt;tt class=&quot;docutils literal&quot;&gt;INSERT&lt;/tt&gt; and &lt;tt class=&quot;docutils literal&quot;&gt;UPDATE&lt;/tt&gt; it takes to get data into new tables.&lt;/p&gt;
&lt;hr class=&quot;docutils&quot; /&gt;
&lt;p&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://docs.djangoproject.com/en/3.0/howto/writing-migrations/#changing-a-manytomanyfield-to-use-a-through-model&quot;&gt;Changing a ManyToManyField to use a through model&lt;/a&gt; is another example where
Django considers your data expendable and to jump through &lt;a class=&quot;reference external&quot; href=&quot;https://docs.djangoproject.com/en/3.0/ref/migration-operations/#django.db.migrations.operations.SeparateDatabaseAndState&quot;&gt;sophisticated
hoops&lt;/a&gt; if you romantically want to hold onto them.&lt;/p&gt;
&lt;p&gt;The whole example is 64 lines of code that make sense only if you know the
internal model of the schema changing machinery and how to separate schema
changes and Django models state operations (which, in my opinion, had no reason to be
merged together in first place and the second has no reason to exist).&lt;/p&gt;
&lt;p&gt;Dropping the complications, everything you need is here:&lt;/p&gt;
&lt;pre class=&quot;code postgres literal-block&quot;&gt;
&lt;span class=&quot;k&quot;&gt;ALTER&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;core_book_authors&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;RENAME&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;core_authorbook&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;ALTER&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;core_authorbook&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ADD&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is_primary&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;The first statement, by the way, is verbatim in a &lt;tt class=&quot;docutils literal&quot;&gt;RunSQL&lt;/tt&gt; example.
I think this example wouldn't necessarily have been portable so I
really struggle to see the point of all this.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;commands-you-don-t-want-to-use&quot;&gt;
&lt;h3&gt;Commands you don't want to use&lt;/h3&gt;
&lt;p&gt;Once you have introduced your migration procedures, and motivated your team
into using them, these are a few operations you can use to replace the
official ways of involving Django migrations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class=&quot;first&quot;&gt;&lt;tt class=&quot;docutils literal&quot;&gt;manage.py migrate&lt;/tt&gt;: the first time (e.g. new dev setup, unit tests) you
can run &lt;tt class=&quot;docutils literal&quot;&gt;psql &lt;span class=&quot;pre&quot;&gt;-f&lt;/span&gt; database.sql&lt;/tt&gt;. If you do it in a test suite run, you will
have tested your schema too. If an initial schema is already in place
(deployment in staging and production, distributing changes to other
developers) you can run something similar to the proposed &lt;a class=&quot;reference external&quot; href=&quot;https://gist.github.com/dvarrazzo/86b06961fa3278293e193417adbf3daf&quot;&gt;patch_db.py&lt;/a&gt;
and have tested the patches too.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class=&quot;first&quot;&gt;&lt;tt class=&quot;docutils literal&quot;&gt;manage.py makemigrations&lt;/tt&gt;: run &lt;tt class=&quot;docutils literal&quot;&gt;git diff &lt;span class=&quot;pre&quot;&gt;schema/*.sql&lt;/span&gt;&lt;/tt&gt; and work out
what you have to do, like all the other times you wanted to use the Django
command that didn't do everything you needed.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class=&quot;first&quot;&gt;&lt;tt class=&quot;docutils literal&quot;&gt;manage.py sqlmigrate&lt;/tt&gt;: replaced by &lt;tt class=&quot;docutils literal&quot;&gt;cat&lt;/tt&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class=&quot;first&quot;&gt;&lt;tt class=&quot;docutils literal&quot;&gt;manage.py showmigrations&lt;/tt&gt;: you can use &lt;tt class=&quot;docutils literal&quot;&gt;patch_db.py &lt;span class=&quot;pre&quot;&gt;--dry-run&lt;/span&gt;&lt;/tt&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class=&quot;first&quot;&gt;&lt;tt class=&quot;docutils literal&quot;&gt;manage.py squashmigrations&lt;/tt&gt;: ...I am in awe of the complexity of
&lt;a class=&quot;reference external&quot; href=&quot;https://docs.djangoproject.com/en/3.0/topics/migrations/#migration-squashing&quot;&gt;squashmigraitons&lt;/a&gt;. It reduces your many migrations to an undetermined
number of fewer migrations, conditioned by the time you have been creative
and have used SQL or Python in them. You can mark operations as &amp;quot;elidable&amp;quot;,
if you want to have them dropped, but be careful of
&lt;tt class=&quot;docutils literal&quot;&gt;CircularDependencyError&lt;/tt&gt;, although you can use &lt;tt class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;--no-optimize&lt;/span&gt;&lt;/tt&gt;...&lt;/p&gt;
&lt;p&gt;You can replace squashmigrations with &lt;tt class=&quot;docutils literal&quot;&gt;rm&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Once the migrations have been applied to all your testing and production
systems, and all your developers' databases, just remove them. Or leave them
where they are: who cares. Even if they stay there, even thousands of them
won't do any harm to your program's start-up time: they are not automatically
imported modules. If you want to keep them and not drown in patches, you can
divide them into month or year directories, and change one line of the
&lt;tt class=&quot;docutils literal&quot;&gt;patch_db&lt;/tt&gt; script to find them.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;tips-to-write-a-migration&quot;&gt;
&lt;h3&gt;Tips to write a migration&lt;/h3&gt;
&lt;p&gt;Writing a complex migration consists of trying the operations to perform in a
testing database, which is often an iterative procedure of trial and error,
where mistakes are made, requiring to go back to the state before
migrating, and don't forget to add that semicolon!&lt;/p&gt;
&lt;p&gt;A way to write a migration patch of the type described here consists roughly
of the below:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;Create a file in the &lt;tt class=&quot;docutils literal&quot;&gt;schema/patches/&lt;/tt&gt; directory called
&lt;tt class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;YYYY-MM-DD_some_meaninfgul_description.sql&lt;/span&gt;&lt;/tt&gt;. If you happen to write more
than one patch in the same day, and their order matters, you can add a &lt;tt class=&quot;docutils literal&quot;&gt;~02&lt;/tt&gt;
after the date to the name of the second patch and so on, as &lt;tt class=&quot;docutils literal&quot;&gt;~&lt;/tt&gt; sorts
after &lt;tt class=&quot;docutils literal&quot;&gt;_&lt;/tt&gt;.&lt;/li&gt;
&lt;li&gt;Add a &lt;tt class=&quot;docutils literal&quot;&gt;BEGIN;&lt;/tt&gt; statement to the top of the file, followed by the
statements you want to test.&lt;/li&gt;
&lt;li&gt;Connect to your test database with a psql shell and use &lt;tt class=&quot;docutils literal&quot;&gt;\i
/path/to/your/patch.sql&lt;/tt&gt; to try and apply your patch.&lt;/li&gt;
&lt;li&gt;If applying the patch fails, run a &lt;tt class=&quot;docutils literal&quot;&gt;ROLLBACK&lt;/tt&gt; in psql, fix the error and try
&lt;tt class=&quot;docutils literal&quot;&gt;\i&lt;/tt&gt; again.&lt;/li&gt;
&lt;li&gt;If applying succeeds, you can explore the database to verify that the changes
applied have produced the right results. You may want to run a &lt;tt class=&quot;docutils literal&quot;&gt;SAVEPOINT
x&lt;/tt&gt; command now. In case you mistype a command while verifying the results,
you can run &lt;tt class=&quot;docutils literal&quot;&gt;ROLLBACK TO SAVEPOINT x&lt;/tt&gt; and revert the transaction to the
state just after the patch was applied.&lt;/li&gt;
&lt;li&gt;Your patch applied ok, but you don't like the result? &lt;tt class=&quot;docutils literal&quot;&gt;ROLLBACK&lt;/tt&gt;, fix the
patch then try again.&lt;/li&gt;
&lt;li&gt;If you are happy with what you see, you can &lt;tt class=&quot;docutils literal&quot;&gt;ROLLBACK&lt;/tt&gt; this psql transaction,
add a &lt;tt class=&quot;docutils literal&quot;&gt;COMMIT;&lt;/tt&gt; to the end of the patch script and run &lt;tt class=&quot;docutils literal&quot;&gt;patch_db&lt;/tt&gt;
to apply the patch just created for good. If, by mistake or intention, you
committed the psql changes, you can run &lt;tt class=&quot;docutils literal&quot;&gt;patch_db&lt;/tt&gt; interactively and &amp;quot;skip
forever&amp;quot; the patch when asked for confirmation.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;another-random-bit-of-advice&quot;&gt;
&lt;h3&gt;Another random bit of advice&lt;/h3&gt;
&lt;p&gt;The motivation for writing this article comes from knowledge sharing with the
team I'm currently collaborating with, who are using Django the canonical way.
I am convinced they can better use the tools they have. Let's see if they can
be persuaded to drop Django migrations...&lt;/p&gt;
&lt;p&gt;As I'm writing this entire brain dump, there's another trick that should be
filed under &amp;quot;know what your tool is doing&amp;quot;. Sometimes Django pages become slow
because, adding something apparently harmless, such as accessing a model
attribute, results in unexpected queries running behind the scenes. If you do it in
a loop, it results in a &amp;quot;ripple load&amp;quot;, meaning you'll run 50 queries, each one
fetching one record, while you could have run a single query fetching 50
records, or just adding an extra JOIN to another query.&lt;/p&gt;
&lt;p&gt;How do you identify this problem? While you are developing using the development
server, you can log all the operations performed to the database adding the
following logger configuration to your &lt;tt class=&quot;docutils literal&quot;&gt;settings.py&lt;/tt&gt;:&lt;/p&gt;
&lt;pre class=&quot;code python literal-block&quot;&gt;
&lt;span class=&quot;n&quot;&gt;LOGGING&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'loggers'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'django.db'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;s1&quot;&gt;'handlers'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'console'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
            &lt;span class=&quot;s1&quot;&gt;'level'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'DEBUG'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;You will get used to the amount of SQL blobs popping up in the dev server
log at each request. If you accidentally introduce a ripple load, it'll be
very easy to spot: a fast train of short statements will blaze into the log
console. Either it happens in Python code or in a template or as a result of
asynchronous ajax calls (not included in request-oriented tools, such as
the Django Debug Toolbar). It will be unmissable. Looking at these statements,
it's easy to understand what model caused it and the right
&lt;a class=&quot;reference external&quot; href=&quot;https://docs.djangoproject.com/en/3.0/ref/models/querysets/#select-related&quot;&gt;select_related()&lt;/a&gt; to add.&lt;/p&gt;
&lt;p&gt;You're welcome.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;do-you-hate-django&quot;&gt;
&lt;h3&gt;&amp;quot;Do you hate Django?&amp;quot;&lt;/h3&gt;
&lt;p&gt;No, I don't. I still like it, although with Python moving towards asyncio and
&lt;a class=&quot;reference external&quot; href=&quot;/blog/2020/03/31/first-experience-mypy/&quot;&gt;static typing&lt;/a&gt;, and with the established
web architecture of JSON APIs consumed by JavaScript front-ends, the appeal
for other frameworks such as &lt;a class=&quot;reference external&quot; href=&quot;https://fastapi.tiangolo.com/&quot;&gt;FastAPI&lt;/a&gt; is
increasing. As opinionated about databases I am, I quite like the Django
ORM: very simple to use, well integrated with the Python objects it produces
and it allows you to write monsters of nested queries with great ease. Peeking at
the logs of the SQL statements produced for you by the &lt;tt class=&quot;docutils literal&quot;&gt;django.db&lt;/tt&gt; logger
fosters some admiration.&lt;/p&gt;
&lt;p&gt;What I really don't like is when tools get in the way of someone's work.
Sometimes the tools are complex because the problem they try to solve is complex also. But
you are free to ask yourself this question: do I really have that problem? You
might get to the conclusion that you might not and you can make choices
against conventions to simplify your life.&lt;/p&gt;
&lt;p&gt;In the case of Django, the right economy for me is:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;Get to know the ORM features inside out and take full advantage of it to
query and manipulate data.&lt;/li&gt;
&lt;li&gt;Avoid using the Models to produce the database schema, use the native
database language and tools instead.&lt;/li&gt;
&lt;li&gt;Stay well clear of migrations.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="https://www.varrazzo.com/blog/2020/05/19/a-trip-into-optimisation/">
    <title type="text">A trip into optimisation</title>
    <id>urn:uuid:848be87a-855e-3b2b-aecf-2911693199f2</id>
    <updated>2020-05-19T00:00:00Z</updated>
    <link href="https://www.varrazzo.com/blog/2020/05/19/a-trip-into-optimisation/" />
    <author>
      <name>Daniele Varrazzo</name>
    </author>
    <content type="html">&lt;p&gt;I have been cheerfully hacking on psycopg3 features for a while and reached
the symbolic but relevant milestone of &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg3/commit/be4e3ee85dc773878d67edf0b7880824bf7059aa&quot;&gt;DBAPI 2.0 compatibility&lt;/a&gt; while using
the psycopg2 test suite as a guideline to add features progressively.&lt;/p&gt;
&lt;p&gt;Then I thought about checking its speed... It wasn't a happy day.&lt;/p&gt;
&lt;p&gt;A few years ago, a new PostgreSQL driver was released: &lt;a class=&quot;reference external&quot; href=&quot;https://magicstack.github.io/asyncpg/&quot;&gt;asyncpg&lt;/a&gt;. It is
designed with speed in mind, at the expense of much else. It parses the
&lt;a class=&quot;reference external&quot; href=&quot;https://www.postgresql.org/docs/current/protocol.html&quot;&gt;PostgreSQL frontend/backend protocol&lt;/a&gt; using its own implementation (instead
of using &lt;a class=&quot;reference external&quot; href=&quot;https://www.postgresql.org/docs/current/libpq.html&quot;&gt;libpq&lt;/a&gt;, the PostgreSQL client library) and is designed to be pretty
much streamlined within the flow of the line protocol rather than have a
developer-friendly or recognisable interface: it doesn't follow a &lt;a class=&quot;reference external&quot; href=&quot;https://www.python.org/dev/peps/pep-0249/&quot;&gt;DBAPI&lt;/a&gt;
design, it uses PostgreSQL native placeholders for queries, i.e. &lt;tt class=&quot;docutils literal&quot;&gt;where
someting = $1&lt;/tt&gt;, no positional or named ones (the familiar &lt;tt class=&quot;docutils literal&quot;&gt;%s&lt;/tt&gt; and
&lt;tt class=&quot;docutils literal&quot;&gt;%(thing)s&lt;/tt&gt;). It is definitely a fast library, but much like a Formula 1
car, it's not for everyone to drive. Dropping it in your existing project
means having to rewrite all your queries and all the Python code interacting
with the database: no Django, no SQLAlchemy, and of course it's only
asynchronous, so not the natural choice if your program uses a different
concurrency model or needs none at all.&lt;/p&gt;
&lt;p&gt;Anyway I thought I'd use &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/magicstack/pgbench&quot;&gt;the toolbench they wrote&lt;/a&gt; to compare speeds between
psycopg2 and asyncpg. So how bad was my day?&lt;/p&gt;
&lt;!-- for d in asyncpg aiopg-tuples psycopg3-async; do \
    python pgbench_python.py $d -C1 ../queries/1-pg_type.json -D 10 - -warmup-time 1 \
    - - -pghost localhost - -pgport 5432 - -pguser piro - -output-format json \
    | jq -j &quot;\&quot;$d \&quot; ,  .queries , \&quot;\n\&quot;&quot; ; \
done --&gt;
&lt;table border=&quot;1&quot; class=&quot;docutils&quot;&gt;
&lt;colgroup&gt;
&lt;col width=&quot;70%&quot; /&gt;
&lt;col width=&quot;30%&quot; /&gt;
&lt;/colgroup&gt;
&lt;thead valign=&quot;bottom&quot;&gt;
&lt;tr&gt;&lt;th class=&quot;head&quot;&gt;Driver&lt;/th&gt;
&lt;th class=&quot;head&quot;&gt;Queries&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign=&quot;top&quot;&gt;
&lt;tr&gt;&lt;td&gt;asyncpg&lt;/td&gt;
&lt;td&gt;15263&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;psycopg2 + aiopg&lt;/td&gt;
&lt;td&gt;8871&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;psycopg3 async&lt;/td&gt;
&lt;td&gt;426&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;It was this bad.&lt;/p&gt;
&lt;p&gt;This is the number of queries that are run in 10 seconds. The numbers
themselves are to be taken with a fistful of salt. Essentially they are
obtaining connecting to a database on localhost so they are more CPU-bound
than the environment a database driver usually lives in. They come from &lt;em&gt;one
specific query&lt;/em&gt; (the first in their toolbench) so nothing statistically sound,
but still a pretty depressing picture.&lt;/p&gt;
&lt;p&gt;Back then, the implementation of psycopg3 was pure Python, using ctypes to call
into the libpq shared library. The plan to write an optimised C
implementation was already there, but this made me understand how badly needed
this is.&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;profiling&quot;&gt;
&lt;h3&gt;Profiling&lt;/h3&gt;
&lt;p&gt;The first step to climb such a mountain is to look at profiling information,
which can show function by function where time is spent.&lt;/p&gt;
&lt;div class=&quot;figure align-center&quot;&gt;
&lt;a class=&quot;reference external image-reference&quot; href=&quot;profile-7b3b7f9.svg&quot;&gt;&lt;img alt=&quot;profile-7b3b7f9.png&quot; src=&quot;profile-7b3b7f9.png&quot; /&gt;&lt;/a&gt;
&lt;p class=&quot;caption&quot;&gt;Profile graph at commit &lt;tt class=&quot;docutils literal&quot;&gt;7b3b7f9&lt;/tt&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The graph is generated by &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/jrfonseca/gprof2dot&quot;&gt;gprof2dot&lt;/a&gt; using something like:&lt;/p&gt;
&lt;pre class=&quot;code bash literal-block&quot;&gt;
python -m cProfile -o OUT.pstat script.py
gprof2dot -f pstats OUT.pstat &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; dot -Tsvg &amp;gt; OUT.svg
&lt;/pre&gt;
&lt;!-- python -m cProfile -o psycopg3-async.pstat pgbench_python.py psycopg3-async \
    -C1 ../queries/1-pg_type.json -D 10 - -warmup-time 1 \
    - - -pghost localhost - -pgport 5432 - -pguser piro - -output-format json
gprof2dot -f pstats psycopg3-async.pstat | dot -Tsvg &gt; psycopg3-async-prof.svg --&gt;
&lt;p&gt;You can see more details by clicking on the above graph. The left branch is
initialisation faff. The interesting part is on the right, following the path
of orange, yellow and green. This shows the functions calls where the program
spends most of its time. &lt;tt class=&quot;docutils literal&quot;&gt;get_value&lt;/tt&gt; is a pretty hot one, taking up about
the 50% of the run time. It gets called very often, once per field of every
record, or 1.6M times in this graph. At this point, it looked like this:&lt;/p&gt;
&lt;pre class=&quot;code python literal-block&quot;&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row_number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;column_number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Optional&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;bytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;impl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PQgetlength&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pgresult_ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row_number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;column_number&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;impl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PQgetvalue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pgresult_ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row_number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;column_number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string_at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;impl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PQgetisnull&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pgresult_ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row_number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;column_number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;None&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;This function returns the content in bytes of a field. If it's 0-length, it
checks if it's NULL. The &lt;tt class=&quot;docutils literal&quot;&gt;impl&lt;/tt&gt; functions are ctypes calls to the libpq.
This made me think that the overhead of ctypes calls is not so tiny after
all.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;the-cffi-attempt&quot;&gt;
&lt;h3&gt;The cffi attempt&lt;/h3&gt;
&lt;p&gt;One thing I thought about doing was also to provide a &lt;a class=&quot;reference external&quot; href=&quot;https://cffi.readthedocs.io/&quot;&gt;cffi&lt;/a&gt; wrapper for the
libpq. cffi is a more popular choice than ctypes, especially thanks to its
good integration with PyPy. ctypes has the advantage of being packaged in the
standard library, so not requiring an external dependency. However, unlike
ctypes, cffi still requires a compiler to create a more efficient wrapper.&lt;/p&gt;
&lt;p&gt;Porting the libpq wrapper to cffi was relatively straightforward and the
number of queries that ran was more than double:&lt;/p&gt;
&lt;table border=&quot;1&quot; class=&quot;docutils&quot;&gt;
&lt;colgroup&gt;
&lt;col width=&quot;50%&quot; /&gt;
&lt;col width=&quot;25%&quot; /&gt;
&lt;col width=&quot;25%&quot; /&gt;
&lt;/colgroup&gt;
&lt;thead valign=&quot;bottom&quot;&gt;
&lt;tr&gt;&lt;th class=&quot;head&quot;&gt;Implementation&lt;/th&gt;
&lt;th class=&quot;head&quot;&gt;Commit&lt;/th&gt;
&lt;th class=&quot;head&quot;&gt;Queries&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign=&quot;top&quot;&gt;
&lt;tr&gt;&lt;td&gt;ctypes&lt;/td&gt;
&lt;td&gt;7b3b7f9&lt;/td&gt;
&lt;td&gt;426&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;cffi&lt;/td&gt;
&lt;td&gt;dfe2893&lt;/td&gt;
&lt;td&gt;902&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;a class=&quot;reference external&quot; href=&quot;profile-cffi-dfe2893.svg&quot;&gt;Profiling&lt;/a&gt; showed that the time spent in &lt;tt class=&quot;docutils literal&quot;&gt;get_value&lt;/tt&gt; was down from 50% to
35%, suggesting that the cffi overhead is lower than ctypes. However,
building a cffi wrapper already requires the presence of a C compiler, the
&lt;tt class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;libpq-dev&lt;/span&gt;&lt;/tt&gt; package and finding the dreaded &lt;tt class=&quot;docutils literal&quot;&gt;pg_config&lt;/tt&gt; executable: the
same requirements a C extension implementation would have, but with less
possibilities for optimisation. For this reason, cffi will probably remain as
a thing on the side (maybe if the PyPy folks would be interested in it). This
code is now parked &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg3/tree/cffi&quot;&gt;in its own branch&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;the-cython-attempt&quot;&gt;
&lt;h3&gt;The Cython attempt&lt;/h3&gt;
&lt;p&gt;The next and more reasonable way to improve performance is to create a C
extension. As highlighted in &lt;a class=&quot;reference external&quot; href=&quot;/blog/2020/03/06/thinking-psycopg3/&quot;&gt;Thinking psycopg3&lt;/a&gt;, the idea was
already in place, allowing the user to choose between the simple to install
option or the fast option. A Python C extension can be written in pure C, as
psycopg2 currently is, but there are other languages helping to handle some of
the tedious aspects, such as the boilerplate required to create the objects,
and the reference count. The most current of such languages is &lt;a class=&quot;reference external&quot; href=&quot;https://cython.readthedocs.io/&quot;&gt;Cython&lt;/a&gt;, an
evolution of &lt;a class=&quot;reference external&quot; href=&quot;https://www.cosc.canterbury.ac.nz/greg.ewing/python/Pyrex/&quot;&gt;Pyrex&lt;/a&gt;, which I had once used a ridiculous number of years ago.&lt;/p&gt;
&lt;p&gt;The first step was a straightforward porting of the &lt;tt class=&quot;docutils literal&quot;&gt;psycogp3.pq&lt;/tt&gt; module:
that alone showed a promising class of results:&lt;/p&gt;
&lt;table border=&quot;1&quot; class=&quot;docutils&quot;&gt;
&lt;colgroup&gt;
&lt;col width=&quot;50%&quot; /&gt;
&lt;col width=&quot;25%&quot; /&gt;
&lt;col width=&quot;25%&quot; /&gt;
&lt;/colgroup&gt;
&lt;thead valign=&quot;bottom&quot;&gt;
&lt;tr&gt;&lt;th class=&quot;head&quot;&gt;Implementation&lt;/th&gt;
&lt;th class=&quot;head&quot;&gt;Commit&lt;/th&gt;
&lt;th class=&quot;head&quot;&gt;Queries&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign=&quot;top&quot;&gt;
&lt;tr&gt;&lt;td&gt;ctypes&lt;/td&gt;
&lt;td&gt;7b3b7f9&lt;/td&gt;
&lt;td&gt;426&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;cffi&lt;/td&gt;
&lt;td&gt;dfe2893&lt;/td&gt;
&lt;td&gt;902&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Cython pq&lt;/td&gt;
&lt;td&gt;6c6cbe3&lt;/td&gt;
&lt;td&gt;1618&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;speeding-up-adaptation&quot;&gt;
&lt;h3&gt;Speeding up adaptation&lt;/h3&gt;
&lt;p&gt;&lt;a class=&quot;reference external&quot; href=&quot;profile-c-6c6cbe3.svg&quot;&gt;New profiling&lt;/a&gt; showed that the time spent in &lt;tt class=&quot;docutils literal&quot;&gt;get_value()&lt;/tt&gt; was now reduced
to a paltry 6% of the whole runtime: this means that that the hot path of the
program had moved to a different place.&lt;/p&gt;
&lt;p&gt;The entire adaptation of the returned dataset, visible in green, takes 60% of
the runtime, so is a likely next candidate for optimisation. The &lt;tt class=&quot;docutils literal&quot;&gt;&amp;lt;genexpr&amp;gt;&lt;/tt&gt;
box is shown having a large number of called functions: that function is the
dispatcher choosing a different adapter function for each PostgreSQL data
type, which were still written in Python.&lt;/p&gt;
&lt;p&gt;There is probably some value in creating analogous conversion functions in C,
but it wouldn't be the best way to optimise the job. All the loader functions
have the same signature, for instance: the loader for the binary
representation of a 32 bits integer is:&lt;/p&gt;
&lt;pre class=&quot;code python literal-block&quot;&gt;
&lt;span class=&quot;n&quot;&gt;_int4_struct&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Struct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;!i&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;load_int4_binary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_int4_struct&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unpack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;In order to feed data to this function it is necessary to:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;get the pointer and length to the returned data from the &lt;tt class=&quot;docutils literal&quot;&gt;PGresult&lt;/tt&gt;
struct (calls to &lt;tt class=&quot;docutils literal&quot;&gt;PQgetvalue&lt;/tt&gt; and &lt;tt class=&quot;docutils literal&quot;&gt;PQgetlength&lt;/tt&gt;, which are lightweight);&lt;/li&gt;
&lt;li&gt;convert it to a Python &lt;tt class=&quot;docutils literal&quot;&gt;bytes&lt;/tt&gt; object, meaning a &lt;tt class=&quot;docutils literal&quot;&gt;memcpy&lt;/tt&gt; and a Python
object allocation;&lt;/li&gt;
&lt;li&gt;calling the adaptation function (Python or C).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If we decide not to leave the C layer in the adaptation phase then a better
signature can be used:&lt;/p&gt;
&lt;pre class=&quot;code pyrex literal-block&quot;&gt;
&lt;span class=&quot;k&quot;&gt;cdef&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;load_int4_binary_c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PyLong_FromLong&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;int32_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;be32toh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;This allows for reaching of the loader functions without the need of an extra
copy of the data received from the network and without creating an
intermediate Python object. However, because the C functions are not
accessible from Python, it poses the question of how to customise the adapters
mapping, in case someone wanted to replace a builtin one (a typical case
involves wanting to convert &lt;tt class=&quot;docutils literal&quot;&gt;numeric&lt;/tt&gt; into Python &lt;tt class=&quot;docutils literal&quot;&gt;float&lt;/tt&gt; instead of
&lt;tt class=&quot;docutils literal&quot;&gt;Decimal&lt;/tt&gt;). For now, the mechanism works like this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class=&quot;first&quot;&gt;At import time, the Python adapters are associated to data types OIDs; the
current mechanism is through a decorator:&lt;/p&gt;
&lt;pre class=&quot;code python literal-block&quot;&gt;
&lt;span class=&quot;c1&quot;&gt;# in psycopg3/types/numeric.py&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;&amp;#64;Loader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;binary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;builtins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;int4&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;oid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;load_int4_binary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_int4_struct&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unpack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class=&quot;first&quot;&gt;If the C extension module is to be used, a C function exposed to Python is
called, &lt;tt class=&quot;docutils literal&quot;&gt;register_builtin_c_loaders()&lt;/tt&gt;.&lt;/p&gt;
&lt;pre class=&quot;code python literal-block&quot;&gt;
&lt;span class=&quot;c1&quot;&gt;# in psycopg3/__init__.py&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# register default adapters&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;types&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Override adapters with fast version if available&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__impl__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;c&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;._psycopg3&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;register_builtin_c_loaders&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;register_builtin_c_loaders&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class=&quot;first&quot;&gt;This in turns calls a registration
function for all the loaders, for which there is a C implementation:&lt;/p&gt;
&lt;pre class=&quot;code pyrex literal-block&quot;&gt;
&lt;span class=&quot;c&quot;&gt;# in psycopg3/types/numeric.pyx&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;psycopg3.types&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numeric&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;register_c_loader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numeric&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;load_int4_binary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;load_int4_binary_c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class=&quot;first&quot;&gt;When the result of a query is returned to the client, the OIDs of the
columns are used to select a Python loader. In Python, the loaders are put
into a list, having as many items as the columns number. In Cython, they are
put into a C array of structures holding both a Python function and
optionally a C function as members. If a Python loader has an optimised
version registered then that function is added to the array of loaders.&lt;/p&gt;
&lt;table border=&quot;1&quot; class=&quot;docutils&quot;&gt;
&lt;colgroup&gt;
&lt;col width=&quot;12%&quot; /&gt;
&lt;col width=&quot;6%&quot; /&gt;
&lt;col width=&quot;39%&quot; /&gt;
&lt;col width=&quot;43%&quot; /&gt;
&lt;/colgroup&gt;
&lt;thead valign=&quot;bottom&quot;&gt;
&lt;tr&gt;&lt;th class=&quot;head&quot;&gt;Type&lt;/th&gt;
&lt;th class=&quot;head&quot;&gt;OID&lt;/th&gt;
&lt;th class=&quot;head&quot;&gt;Python loader&lt;/th&gt;
&lt;th class=&quot;head&quot;&gt;C loader&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign=&quot;top&quot;&gt;
&lt;tr&gt;&lt;td&gt;text&lt;/td&gt;
&lt;td&gt;25&lt;/td&gt;
&lt;td&gt;&lt;tt class=&quot;docutils literal&quot;&gt;load_text_binary&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;&lt;tt class=&quot;docutils literal&quot;&gt;load_text_binary_c&lt;/tt&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;int4&lt;/td&gt;
&lt;td&gt;23&lt;/td&gt;
&lt;td&gt;&lt;tt class=&quot;docutils literal&quot;&gt;load_int4_binary&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;&lt;tt class=&quot;docutils literal&quot;&gt;load_int4_binary_c&lt;/tt&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;custom&lt;/td&gt;
&lt;td&gt;??&lt;/td&gt;
&lt;td&gt;&lt;tt class=&quot;docutils literal&quot;&gt;load_custom_type&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;&lt;tt class=&quot;docutils literal&quot;&gt;NULL&lt;/tt&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class=&quot;first&quot;&gt;When the data is converted to Python, the corresponding
loader is used for each column:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;if it has a C loader, the value and lengths are read from the result and
passed to the function;&lt;/li&gt;
&lt;li&gt;if it doesn't have one, a &lt;tt class=&quot;docutils literal&quot;&gt;bytes&lt;/tt&gt; object is created and passed to the Python
function.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This mechanism allows for the overriding of the mapping from OID to types in
Python, which is then duplicated in C. It has the disadvantage that if someone
wanted to derive an adapter for a custom data type (e.g. calling the text
adapter and then parsing the result) then the Python adapter would be used.
There is probably possibility to improve this design, but it is a good
starting point for now.&lt;/p&gt;
&lt;p&gt;It &lt;em&gt;might&lt;/em&gt; be possible to avoid &lt;tt class=&quot;docutils literal&quot;&gt;memcpy&lt;/tt&gt; by creating a memory view
instead of a bytes array, but I haven't quite figured out how to do it in
ctypes yet.&lt;/p&gt;
&lt;p&gt;Numbers, now, start to appear more promising:&lt;/p&gt;
&lt;table border=&quot;1&quot; class=&quot;docutils&quot;&gt;
&lt;colgroup&gt;
&lt;col width=&quot;50%&quot; /&gt;
&lt;col width=&quot;25%&quot; /&gt;
&lt;col width=&quot;25%&quot; /&gt;
&lt;/colgroup&gt;
&lt;thead valign=&quot;bottom&quot;&gt;
&lt;tr&gt;&lt;th class=&quot;head&quot;&gt;Implementation&lt;/th&gt;
&lt;th class=&quot;head&quot;&gt;Commit&lt;/th&gt;
&lt;th class=&quot;head&quot;&gt;Queries&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign=&quot;top&quot;&gt;
&lt;tr&gt;&lt;td&gt;ctypes&lt;/td&gt;
&lt;td&gt;7b3b7f9&lt;/td&gt;
&lt;td&gt;426&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;cffi&lt;/td&gt;
&lt;td&gt;dfe2893&lt;/td&gt;
&lt;td&gt;902&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Cython pq&lt;/td&gt;
&lt;td&gt;6c6cbe3&lt;/td&gt;
&lt;td&gt;1618&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Cython adapt&lt;/td&gt;
&lt;td&gt;b28b389&lt;/td&gt;
&lt;td&gt;7511&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;profiling-against-psycopg2&quot;&gt;
&lt;h3&gt;Profiling against psycopg2&lt;/h3&gt;
&lt;p&gt;I was having concerns for a while that there was something stupidly wrong in
my psycopg3 code, especially around the networking area, for instance
introducing delays waiting the wrong way or at the wrong moment. asyncpg is
too radically different to provide a direct comparison, but a comparison with
psycopg2 would have been interesting. Unfortunately, because psycopg2 is
written in pure C code, it doesn't allow inspection using the Python profiler
(Cython extensions are C too, but they can create explicit hooks for that).
But where a tracing profiler cannot trace, a sampling profiler can sample:
&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/benfred/py-spy&quot;&gt;py-spy&lt;/a&gt; is such a profiler. The principle is to interrupt a process several
times per second to look at its call stack and infer what it is doing.
Provided enough debug information is compiled in the C library, it is possible
to obtain clear information about calls into C code too. And of course, the
most important feature good software should always have: the production of
pretty graphs:&lt;/p&gt;
&lt;div class=&quot;figure align-center&quot;&gt;
&lt;a class=&quot;reference external image-reference&quot; href=&quot;flame-psycopg3-b662c9d.svg?x=7.7301%25&amp;amp;y=196&quot;&gt;&lt;img alt=&quot;flame-psycopg3-b662c9d.png&quot; src=&quot;flame-psycopg3-b662c9d.png&quot; /&gt;&lt;/a&gt;
&lt;p class=&quot;caption&quot;&gt;&lt;a class=&quot;reference external&quot; href=&quot;http://www.brendangregg.com/flamegraphs.html&quot;&gt;Flame graph&lt;/a&gt; for psycopg3 at commit &lt;tt class=&quot;docutils literal&quot;&gt;b662c9d&lt;/tt&gt;. Come and click around:
it's interactive! 🍬&lt;/p&gt;
&lt;div class=&quot;legend&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;figure align-center&quot;&gt;
&lt;a class=&quot;reference external image-reference&quot; href=&quot;flame-psycopg2-2.8.5.svg?x=12.2885%25&amp;amp;y=196&quot;&gt;&lt;img alt=&quot;flame-psycopg2-2.8.5.png&quot; src=&quot;flame-psycopg2-2.8.5.png&quot; /&gt;&lt;/a&gt;
&lt;p class=&quot;caption&quot;&gt;Flame graph for psycopg2 2.8.5.&lt;/p&gt;
&lt;/div&gt;
&lt;!-- for d in aiopg-tuples psycopg3-async; do
    py-spy record -r 500 -o $d.svg -F - -native - - python pgbench_python.py $d \
        -C1 ../queries/1-pg_type.json -D 10 - -warmup-time 1 \
        - - -pghost localhost - -pgport 5432 - -pguser piro - -output-format json;
done --&gt;
&lt;p&gt;This comparison shows that the time around the libpq is roughly comparable
(psycopg2 calls the chubby &lt;tt class=&quot;docutils literal&quot;&gt;pqParseInput3&lt;/tt&gt; as a consequence of calling
&lt;tt class=&quot;docutils literal&quot;&gt;PQnotifies&lt;/tt&gt;; for psycopg3, it happens in &lt;tt class=&quot;docutils literal&quot;&gt;PQisBusy&lt;/tt&gt; because it currently
lacks a notifications handler). There was actually &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg3/commit/f9bd81d7e61628f619f39d399532fc4dedfab256&quot;&gt;a bug&lt;/a&gt; in the fetching
loop, but because of that bug, the code was actually running somewhat
faster (it would have likely hurt concurrent performance with blocking
though).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;current-state-future-improvements&quot;&gt;
&lt;h3&gt;Current state, future improvements&lt;/h3&gt;
&lt;p&gt;The diagrams above suggest that there is still room for improvement:
&lt;tt class=&quot;docutils literal&quot;&gt;fetchall()&lt;/tt&gt; seems to have some overhead, which can probably be reduced by
introducing a &amp;quot;fetchsome&amp;quot; function in C. There is a lot of overhead around
waiting, especially in the process of registering/unregistering listeners: the
best gains seem achievable here, bypassing some of the &lt;tt class=&quot;docutils literal&quot;&gt;asyncio&lt;/tt&gt; machinery and creating a better integration with the underlying reactor.&lt;/p&gt;
&lt;p&gt;Below are the bottom line figures, as of the current &lt;tt class=&quot;docutils literal&quot;&gt;master&lt;/tt&gt; (&lt;tt class=&quot;docutils literal&quot;&gt;b662c9d&lt;/tt&gt;).
The pure Python results have improved too, thanks to the Python code tweaking
since the first test:&lt;/p&gt;
&lt;table border=&quot;1&quot; class=&quot;docutils&quot;&gt;
&lt;colgroup&gt;
&lt;col width=&quot;75%&quot; /&gt;
&lt;col width=&quot;25%&quot; /&gt;
&lt;/colgroup&gt;
&lt;thead valign=&quot;bottom&quot;&gt;
&lt;tr&gt;&lt;th class=&quot;head&quot;&gt;Driver&lt;/th&gt;
&lt;th class=&quot;head&quot;&gt;Queries&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign=&quot;top&quot;&gt;
&lt;tr&gt;&lt;td&gt;asyncpg&lt;/td&gt;
&lt;td&gt;15263&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;psycopg2 + aiopg&lt;/td&gt;
&lt;td&gt;8871&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;psycopg3 async Python&lt;/td&gt;
&lt;td&gt;517&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;psycopg3 async C&lt;/td&gt;
&lt;td&gt;8424&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Again, this is just a rough indication: the data types in the query and
different concurrency patterns create different pictures. For instance,
psycopg3 is already faster than psycopg2 in benchmarks involving &lt;tt class=&quot;docutils literal&quot;&gt;bytea&lt;/tt&gt;,
thanks to the use of the binary protocol:&lt;/p&gt;
&lt;table border=&quot;1&quot; class=&quot;docutils&quot;&gt;
&lt;colgroup&gt;
&lt;col width=&quot;70%&quot; /&gt;
&lt;col width=&quot;30%&quot; /&gt;
&lt;/colgroup&gt;
&lt;thead valign=&quot;bottom&quot;&gt;
&lt;tr&gt;&lt;th class=&quot;head&quot;&gt;Driver&lt;/th&gt;
&lt;th class=&quot;head&quot;&gt;Queries&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign=&quot;top&quot;&gt;
&lt;tr&gt;&lt;td&gt;asyncpg&lt;/td&gt;
&lt;td&gt;41330&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;psycopg2 + aiopg&lt;/td&gt;
&lt;td&gt;12396&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;psycopg3 async C&lt;/td&gt;
&lt;td&gt;19164&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;I think for the moment, the search for speed can be concluded and it is time to
go back to progressing with the features. I doubt that asyncpg's stellar
performances can be passed, but I don't want performance to be the sole goal:
I am fine with psycopg3 being somewhat slower than asyncpg, if it has the
advantage to be easier to use and to behave pretty much as a drop-in
replacement for psycopg2. In my view, a driver with a lower adoption barrier
would be more directly beneficial for everyone wanting to use it, either in
existing frameworks or on its own. By the time the project will be released,
I am confident that its performance will consistently pass the psycopg2 level.&lt;/p&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="https://www.varrazzo.com/blog/2020/03/31/first-experience-mypy/">
    <title type="text">First Experience with Mypy</title>
    <id>urn:uuid:e1b4e13d-b7b4-3d61-ac91-b45c5c982cfa</id>
    <updated>2020-03-31T00:00:00Z</updated>
    <link href="https://www.varrazzo.com/blog/2020/03/31/first-experience-mypy/" />
    <author>
      <name>Daniele Varrazzo</name>
    </author>
    <content type="html">&lt;p&gt;I have a trello board with a &lt;em&gt;to Learn&lt;/em&gt; column, and &lt;a class=&quot;reference external&quot; href=&quot;https://mypy.readthedocs.io/en/stable/&quot;&gt;Mypy&lt;/a&gt; was featuring
prominently.&lt;/p&gt;
&lt;p&gt;For those who are not aware, Mypy is a &lt;em&gt;static checker for Python&lt;/em&gt;. The idea
is to annotate Python objects and functions with indications about what type
an object can be (a string, an &amp;quot;integer or None&amp;quot;, etc.). You can then run a
checker on the codebase and it will warn you about wrong type usage. At
runtime nothing change: Python is still Python, not another language, and the
type annotations are just ignored.&lt;/p&gt;
&lt;pre class=&quot;code python literal-block&quot;&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;greeting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Hello '&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;It's like using a language less flexible than Python, but it still runs as slow
as Python, because it's not compiled. Ehm... the worst of two world? 😬&lt;/p&gt;
&lt;p&gt;So, why people do it? Well, people do weird things. But the idea behind it is
that there is a certain class of bugs that Mypy checker would catch. The lack
of type checking in Python is at the heart of its philosophy (&lt;em&gt;duck typing&lt;/em&gt;
and all that stuff). On the other hand many people, and I amongst them, can be
nervous in putting in production code with little formal assurance about its
correctness. My personal way to cope with the uneasiness of a language without
compiler is to resort to write unit tests. Frameworks like &lt;a class=&quot;reference external&quot; href=&quot;https://docs.pytest.org/&quot;&gt;pytest&lt;/a&gt; make
writing and running tests a joy, reducing to almost zero the need of fiddling
interactively into an interactive console while developing. I also find that
writing tests before writing the code they are supposed to test helps in
thinking what do you want your code to look like and to design more usable
interfaces.&lt;/p&gt;
&lt;p&gt;So, big proposer of TDD here, stressing on the second D because writing test
while you develop can actually happen and is useful; writing &amp;quot;the program now,
the tests later&amp;quot; can be dismissed with a laugh: I have &lt;em&gt;never&lt;/em&gt; seen that
happening.&lt;/p&gt;
&lt;p&gt;As I started writing &lt;a class=&quot;reference external&quot; href=&quot;/blog/2020/03/26/psycopg3-first-report/&quot;&gt;psycopg3&lt;/a&gt;, tests have
been committed together with the code and, on a codebase of less than 3000
lines of code, there are already some 150 of them. They get written to help
with development but they are also run at every commit &lt;a class=&quot;reference external&quot; href=&quot;https://travis-ci.org/psycopg/psycopg3&quot;&gt;on Travis CI&lt;/a&gt;,
making sure that changes in the code don't introduce breakage in any of the
supported versions of Python (from 3.6 to 3.8) and PostgreSQL (from 9.5 to
12).&lt;/p&gt;
&lt;p&gt;While this is a strong position from which to say &amp;quot;who needs a compiler?&amp;quot; and
to laugh smugly at developers over-relying on a compiler and tripping on
&lt;tt class=&quot;docutils literal&quot;&gt;java.lang.NullPointerException&lt;/tt&gt;s I don't think being complacent is any
useful for the quality of a codebase, or of a person for what matters. And if
so much research is being done on the Python objects model it surely deserves
a look.&lt;/p&gt;
&lt;p&gt;Just running &lt;tt class=&quot;docutils literal&quot;&gt;mypy&lt;/tt&gt; on the whole codebase produces little of interest.
Running &lt;tt class=&quot;docutils literal&quot;&gt;mypy &lt;span class=&quot;pre&quot;&gt;--strict&lt;/span&gt;&lt;/tt&gt; is a different story, because it is expected every
function to be annotated. I started at a 250 errors mark:&lt;/p&gt;
&lt;pre class=&quot;literal-block&quot;&gt;
(env) piro&amp;#64;makkuro:~/dev/psycopg3$ mypy --strict psycopg3
psycopg3/exceptions.py:35: error: Function is missing a type annotation
psycopg3/exceptions.py:103: error: Function is missing a type annotation
[... skipping pain here]
psycopg3/types/numeric.py:21: error: Call to untyped function &amp;quot;register&amp;quot; of &amp;quot;Typecaster&amp;quot; in typed context
psycopg3/types/numeric.py:22: error: Function is missing a type annotation
Found 253 errors in 13 files (checked 20 source files)
&lt;/pre&gt;
&lt;p&gt;Fast forward 6 hours of hacking, not solid but surely intense and:&lt;/p&gt;
&lt;pre class=&quot;literal-block&quot;&gt;
(env) piro&amp;#64;makkuro:~/dev/psycopg3$ mypy --strict psycopg3
Success: no issues found in 21 source files
&lt;/pre&gt;
&lt;p&gt;What did I learn from the experience?&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;the-changes&quot;&gt;
&lt;h3&gt;The changes&lt;/h3&gt;
&lt;p&gt;In all its glory, this is &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg3/compare/f9884ab...474483e?expand=1&quot;&gt;the whole changeset&lt;/a&gt; to go from no type to a clean
&lt;tt class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;--strict&lt;/span&gt;&lt;/tt&gt; pass.&lt;/p&gt;
&lt;p&gt;It's a whopping 794 additions and 365 deletions, which is a relevant amount of
changes for a codebase of less than 3000 lines. What was that for? Here are
some of the changes I ended up making, and some observations about them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;local-and-class-variables&quot;&gt;
&lt;h3&gt;Local and class variables&lt;/h3&gt;
&lt;p&gt;You don't have to annotate every single variable: the types are inferred
automatically. But when things cannot be inferred from the first value assumed
by a variable it is necessary to add a type. That's fair.&lt;/p&gt;
&lt;pre class=&quot;code diff literal-block&quot;&gt;
  def _reset(self) -&amp;gt; None:
&lt;span class=&quot;gd&quot;&gt;-     self._results = []
-     self._result = None
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+     self._results: List[PGresult] = []
+     self._result: Optional[PGresult] = None&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;out-of-domain-values&quot;&gt;
&lt;h3&gt;Out-of-domain values&lt;/h3&gt;
&lt;p&gt;A type of change I wasn't especially keen on initially was in situations like:&lt;/p&gt;
&lt;pre class=&quot;code python literal-block&quot;&gt;
&lt;span class=&quot;n&quot;&gt;ready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;None&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;something_happens&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Ready&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Ready&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;W&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;we_have_done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Mypy would complain along the lines of:&lt;/p&gt;
&lt;pre class=&quot;literal-block&quot;&gt;
Argument 1 to &amp;quot;&lt;strong&gt;we_have_done&lt;/strong&gt;&amp;quot; has incompatible type &amp;quot;&lt;strong&gt;Optional[Ready]&lt;/strong&gt;&amp;quot;; expected &amp;quot;&lt;strong&gt;Ready&lt;/strong&gt;&amp;quot;
&lt;/pre&gt;
&lt;p&gt;Uhm. In my book a &lt;tt class=&quot;docutils literal&quot;&gt;None&lt;/tt&gt; will never reach &lt;tt class=&quot;docutils literal&quot;&gt;we_have_done()&lt;/tt&gt;. However go
tell the analyzer. In order to make the checker happy I changed the above
to:&lt;/p&gt;
&lt;pre class=&quot;code diff literal-block&quot;&gt;
&lt;span class=&quot;gd&quot;&gt;- ready = None
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+ ready = Ready.R&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;which is not something that made me happy. It gives the wrong idea that the
initial &lt;tt class=&quot;docutils literal&quot;&gt;Ready.R&lt;/tt&gt; state is actually meaningful, when all it means instead is
&amp;quot;shut up, Mypy&amp;quot;. Only later it occurred to me that a better fix is probably:&lt;/p&gt;
&lt;pre class=&quot;code diff literal-block&quot;&gt;
&lt;span class=&quot;gd&quot;&gt;- ready = None
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+ ready: Ready&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;meaning that the type is declared although it doesn't have a value yet. In
case a later refactoring was botched, the code would explode here, with a
&lt;tt class=&quot;docutils literal&quot;&gt;NameError&lt;/tt&gt; in this function, where the bug actually is, rather than
somewhere in the depths of the innocent &lt;tt class=&quot;docutils literal&quot;&gt;we_have_done()&lt;/tt&gt;. So I think this is
a positive change, bringing a possible manifestation of an error closer to its
cause.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;too-creative-decorators&quot;&gt;
&lt;h3&gt;Too creative decorators?&lt;/h3&gt;
&lt;p&gt;Adaptation of Python objects to PostgreSQL types happens via adapters, for
which I'm toying with various choices to make them easy to define, easier than
what it is in psycopg2 and covering tricky corner cases more naturally. In
one way or another, the need is to store in a registry the association from a
Python &lt;tt class=&quot;docutils literal&quot;&gt;type&lt;/tt&gt; to an adapter object, let's say a function for simplicity.&lt;/p&gt;
&lt;p&gt;In the form I had when I started introducing types, a static method
&lt;tt class=&quot;docutils literal&quot;&gt;Adapter.register()&lt;/tt&gt; could be used in both ways: as a function, e.g.:&lt;/p&gt;
&lt;pre class=&quot;code python literal-block&quot;&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;adapt_number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;Adapter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;adapt_number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;or as a decorator:&lt;/p&gt;
&lt;pre class=&quot;code python literal-block&quot;&gt;
&lt;span class=&quot;nd&quot;&gt;&amp;#64;Adapter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;adapt_number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;both are useful in different situations: the former is useful when defining or
registering the adapter at import time is not convenient, the latter is a
matter of convenience, as all decorators are.&lt;/p&gt;
&lt;p&gt;But what's the price of this convenience? In this implementation the function
has a signature of the likes of &lt;tt class=&quot;docutils literal&quot;&gt;Adapt.register(&lt;/tt&gt;&lt;em&gt;type&lt;/em&gt;&lt;tt class=&quot;docutils literal&quot;&gt;,&lt;/tt&gt;&lt;em&gt;obj&lt;/em&gt;&lt;tt class=&quot;docutils literal&quot;&gt;=None)&lt;/tt&gt;, behaving in radically different ways according to whether &lt;em&gt;obj&lt;/em&gt; is
&lt;tt class=&quot;docutils literal&quot;&gt;None&lt;/tt&gt; or not. If it's not &lt;tt class=&quot;docutils literal&quot;&gt;None&lt;/tt&gt; (the function call case) then it
registers the function and it doesn't have to return anything; if it's
&lt;tt class=&quot;docutils literal&quot;&gt;None&lt;/tt&gt;  then it returns a decorator function that will take the object
&lt;em&gt;obj&lt;/em&gt;, do its registration thing, and return it unchanged.&lt;/p&gt;
&lt;p&gt;Now, that's a pretty complicated signature. It can still be done - at least
defining the return value, not attaching it to the nullness of the second
argument. But... is it worth? If this function is so complicated to describe,
maybe the request of asking what type it is just makes this complexity to
stand in its ugliness. Instead of insisting on the original idea and fighting
Mypy to craft an overly complicated return value, splitting it into two
simpler functions seemed to me the right choice. Now &lt;tt class=&quot;docutils literal&quot;&gt;register()&lt;/tt&gt;'s second
argument is no more optional and its return value is always &lt;tt class=&quot;docutils literal&quot;&gt;None&lt;/tt&gt;; the
decorator is just a separate method.&lt;/p&gt;
&lt;pre class=&quot;code python literal-block&quot;&gt;
&lt;span class=&quot;c1&quot;&gt;# The function is called one way&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Adapter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;adapt_number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# The decorator another way&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;&amp;#64;Adapter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# can be 'text()' or 'binary()'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;adapt_number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;It also makes sense from the naming point of view: &lt;tt class=&quot;docutils literal&quot;&gt;register()&lt;/tt&gt; is an active
verb, &lt;tt class=&quot;docutils literal&quot;&gt;text&lt;/tt&gt; is a sort of declaration. The function can expose other
optional arguments, for instance a scope where to register the adapter,
whereas the decorator couldn't make use of them. They are two functions
instead of one, but each one does only one thing, and with fewer parameters.&lt;/p&gt;
&lt;p&gt;I hate when a program tells me my design is wrong. But maybe it has a point.
Complicating the design for syntactic sugar maybe is not a healthy thing to do
(it &lt;a class=&quot;reference external&quot; href=&quot;https://www.goodreads.com/quotes/7205613-syntactic-sugar-causes-cancer-of-the-semicolon&quot;&gt;causes cancer of the semicolon&lt;/a&gt; someone said...)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;ctypes-integration&quot;&gt;
&lt;h3&gt;ctypes integration&lt;/h3&gt;
&lt;p&gt;ctypes allows to bind to C functions defined in external libraries and it has
its  types annotation and automatic conversion to Python (or to segfault if
you get it wrong).&lt;/p&gt;
&lt;p&gt;Mypy doesn't know much about it, so even in a simple case such as:&lt;/p&gt;
&lt;pre class=&quot;code python literal-block&quot;&gt;
&lt;span class=&quot;c1&quot;&gt;# ctypes wrapper&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;PQhost&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PQhost&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;PQhost&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argtypes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PGconn_ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;PQhost&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;restype&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c_char_p&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# later on, a wrapper object&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;&amp;#64;property&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PQhost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pgconn_ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;it will complain of&lt;/p&gt;
&lt;pre class=&quot;literal-block&quot;&gt;
Returning &lt;strong&gt;Any&lt;/strong&gt; from function declared to return &amp;quot;&lt;strong&gt;bytes&lt;/strong&gt;&amp;quot;
&lt;/pre&gt;
&lt;p&gt;Unfortunately &lt;tt class=&quot;docutils literal&quot;&gt;PQhost&lt;/tt&gt; is a callable object, not a function, and it's of the
same type of all the other functions with different signatures, so it cannot
be annotated.&lt;/p&gt;
&lt;p&gt;What helped in this situation was to define a &lt;a class=&quot;reference external&quot; href=&quot;https://mypy.readthedocs.io/en/stable/stubs.html&quot;&gt;stub&lt;/a&gt;, which is a &lt;tt class=&quot;docutils literal&quot;&gt;.pyi&lt;/tt&gt; file
containing only the types and no definition, and it is the mechanism to add
annotations to stuff that is not pure Python code; in this case:&lt;/p&gt;
&lt;pre class=&quot;code python literal-block&quot;&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;PQhost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arg1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Optional&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PGconn_struct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Writing a stub to pretend that those callables are functions is simple enough.
What is painful is having to define all the signatures pretty much twice:
error prone and numbingly boring. This calls for the mythical lazy programmer
which, given a boring task, writes a program to do it for them. It's simple
enough to write a script inspecting the module containing the ctypes
definition and generating the repetitive part of the stub, leaving to write
manually only the delicate cases (e.g. to disambiguate between a pointer and
an array): if you find it useful you can find the &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg3/blob/474483ed223a28f867e9d2f220ce6d6c6a4fd11c/psycopg3/pq/_pq_ctypes.py#L419&quot;&gt;interface generator&lt;/a&gt; in
this function, and here is &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg3/blob/474483ed223a28f867e9d2f220ce6d6c6a4fd11c/psycopg3/pq/_pq_ctypes.pyi#L43&quot;&gt;the stub generated&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;it-found-two-bugs&quot;&gt;
&lt;h3&gt;It found two bugs!&lt;/h3&gt;
&lt;p&gt;Most of my time was spent adding types to every function. A bit of refactoring
here and there to remove variables reuse etc. A lot was spent learning how to
use the whole thing. But apart from complaining about the lack of signatures,
two errors reported by Mypy were actual bugs.&lt;/p&gt;
&lt;p&gt;One was with the choice of the codec to use. There is a &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg3/blob/474483ed223a28f867e9d2f220ce6d6c6a4fd11c/psycopg3/pq/encodings.py&quot;&gt;map of encodings&lt;/a&gt;
from Postgres names to Python names which we use to convert the connection
encoding to a Python codec. Some of the Postgres encodings are unknown to
Python, and SQL_ASCII is a bit special (&lt;a class=&quot;reference external&quot; href=&quot;https://www.postgresql.org/docs/current/multibyte.html&quot;&gt;it actually means &amp;quot;no encoding&amp;quot;&lt;/a&gt;)
and &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/519&quot;&gt;it needs to be special-cased&lt;/a&gt; when reading from the db, so I left it as
&lt;tt class=&quot;docutils literal&quot;&gt;None&lt;/tt&gt; in the encodings map.&lt;/p&gt;
&lt;p&gt;But because of that &lt;tt class=&quot;docutils literal&quot;&gt;None&lt;/tt&gt; my code was wrong:&lt;/p&gt;
&lt;pre class=&quot;code python literal-block&quot;&gt;
&lt;span class=&quot;c1&quot;&gt;# for unknown encodings and SQL_ASCII be strict and use ascii&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pyenc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;py_codecs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pgenc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;ascii&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_codec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;codecs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lookup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pyenc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;This bit of code wanted to deal both with a missing encoding and with
SQL_ASCII, but it does it wrong. If &lt;tt class=&quot;docutils literal&quot;&gt;pgenc&lt;/tt&gt; is &lt;tt class=&quot;docutils literal&quot;&gt;None&lt;/tt&gt; then &lt;tt class=&quot;docutils literal&quot;&gt;pyenc&lt;/tt&gt; is
&lt;tt class=&quot;docutils literal&quot;&gt;None&lt;/tt&gt;, not &lt;tt class=&quot;docutils literal&quot;&gt;&amp;quot;ascii&amp;quot;&lt;/tt&gt;, and &lt;tt class=&quot;docutils literal&quot;&gt;codecs.lookup()&lt;/tt&gt; will go boom. What the
above really needs to be is more:&lt;/p&gt;
&lt;pre class=&quot;code diff literal-block&quot;&gt;
 # for unknown encodings and SQL_ASCII be strict and use ascii
&lt;span class=&quot;gd&quot;&gt;- pyenc = pq.py_codecs.get(pgenc, &amp;quot;ascii&amp;quot;)
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+ pyenc = pq.py_codecs.get(pgenc) or &amp;quot;ascii&amp;quot;
&lt;/span&gt; self._codec = codecs.lookup(pyenc)
&lt;/pre&gt;
&lt;p&gt;Another bug was a pasto: every connection and every cursor have two mappings:
&lt;tt class=&quot;docutils literal&quot;&gt;adapters&lt;/tt&gt; and &lt;tt class=&quot;docutils literal&quot;&gt;casters&lt;/tt&gt; to customize the conversions respectively to and
from the database, and there are global mappings as a fallback. Sure enough I
copypasted some of it, and sure enough I forgot to change a bit:&lt;/p&gt;
&lt;pre class=&quot;code diff literal-block&quot;&gt;
&lt;span class=&quot;gd&quot;&gt;- where = context.adapters if context is not None else Typecaster.globals
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+ where = context.casters if context is not None else Typecaster.globals
&lt;/span&gt;  where[oid, format] = caster
  return caster
&lt;/pre&gt;
&lt;p&gt;But because I had added something similar to the following definitions:&lt;/p&gt;
&lt;pre class=&quot;code python literal-block&quot;&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Typecaster&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;globals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Tuple&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Oid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TypecasterFunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;# a context&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fm&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;adapters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Tuple&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AdapterFunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;casters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Tuple&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Oid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TypecasterFunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;the type system couldn't find a type for &lt;tt class=&quot;docutils literal&quot;&gt;where&lt;/tt&gt; to reconcile the two sides
of the &lt;tt class=&quot;docutils literal&quot;&gt;if&lt;/tt&gt;: even if both values are dicts they won't contain the same
types.&lt;/p&gt;
&lt;p&gt;Now, I can find plenty of excuses to justify these two errors: they were in a
part of the codebase still stubbed out because it's a design phase and tests
for them are not written yet (at the moment there are only two adapters, for
string and numbers, just to play with the whole adaptation stack). I'm sure
tests finding the issues would have been added later during development. But
my excuses don't change an important matter: those bugs were there. In TDD, if
you don't have a test, you don't have anything: your program is wrong pretty
much by definition.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;conclusions&quot;&gt;
&lt;h3&gt;Conclusions&lt;/h3&gt;
&lt;p&gt;What I have experienced is that most people say &amp;quot;tests are useful&amp;quot;, usually
followed by &amp;quot;but we don't have time to write them&amp;quot;. Or something funny like
&amp;quot;let's write this quickly and release, then we'll write the tests&amp;quot;.&lt;/p&gt;
&lt;p&gt;If this is the case Mypy can actually be quite useful: adding types is a quick
matter once you have familiarity with the type system and if you annotate as
the code as you write it instead of, as I did, as a second pass. It's easy to
run Mypy in CI and make sure the program still &amp;quot;compiles ok&amp;quot;. You can make
sure that a whole program is completely type-checked much more easily than to
make sure there are enough tests (no, code-coverage is no such a measure).&lt;/p&gt;
&lt;p&gt;Is Mypy enough to be confident about a program's behaviour? Not at all, not in
my book, as much as bugs do exist in compiled programs - boy if exist.
Mypy+pytest is a great team though: they pretty much complement each other,
one giving a shred of a sort of formal proof that what you wrote is
consistent, the other helping to deal with testing things for real.&lt;/p&gt;
&lt;p&gt;Is the extra time spent writing annotation and wrestling the type system a
good investment? I think in itself you can dismiss the use of Mypy only if
your test-writing practice is between &amp;quot;high&amp;quot; and &amp;quot;obsessive&amp;quot;. But if you also
factor in other side effects such as having to think harder about types and
functions interfaces, having the signatures as part of the documentation
(&lt;a class=&quot;reference external&quot; href=&quot;https://en.wikiquote.org/wiki/Fred_Brooks&quot;&gt;&amp;quot;show me your tables...&amp;quot;&lt;/a&gt;), then the benefits start stacking up and I
think it makes the use of Mypy quite compelling.&lt;/p&gt;
&lt;p&gt;After my annotation marathon I have been thinking for a while if it was worth:
I did it as an experiment, giving myself the option to abandon that branch,
because I've only started with this project and I don't want annotating to
become a time sink as the codebase grow. But I think writing down this
write-up helped me clarifying my ideas about Mypy, and I think it will stay
here and be a &lt;tt class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;--strict&lt;/span&gt;&lt;/tt&gt; part of psycopg3.&lt;/p&gt;
&lt;p&gt;But now, please, just go and write those tests.&lt;/p&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="https://www.varrazzo.com/blog/2020/03/26/psycopg3-first-report/">
    <title type="text">psycopg3: a first report</title>
    <id>urn:uuid:cd45e5f7-7cb3-3a72-920a-00567e28dbd5</id>
    <updated>2020-03-26T00:00:00Z</updated>
    <link href="https://www.varrazzo.com/blog/2020/03/26/psycopg3-first-report/" />
    <author>
      <name>Daniele Varrazzo</name>
    </author>
    <content type="html">&lt;p&gt;&lt;a class=&quot;reference external&quot; href=&quot;/blog/2020/03/25/life-covid-nz/&quot;&gt;In the most unusual conditions&lt;/a&gt; I started hacking on
psycopg3 roughly following the plan sketched in &lt;a class=&quot;reference external&quot; href=&quot;/blog/2020/03/06/thinking-psycopg3/&quot;&gt;Thinking psycopg3&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The first step was to create a package, &lt;tt class=&quot;docutils literal&quot;&gt;psycopg3.pq&lt;/tt&gt;, allowing a low level
access to the libpq from Python. The package is a façade to several
implementations: the one I started implementing is a &lt;a class=&quot;reference external&quot; href=&quot;https://docs.python.org/3/library/ctypes.html&quot;&gt;ctypes&lt;/a&gt;-based one, so
pure Python. Others can be implemented using &lt;a class=&quot;reference external&quot; href=&quot;https://pypi.org/project/cffi/&quot;&gt;CFFI&lt;/a&gt; or pure C, but for the
moment we can already access the libpq without external dependencies (useful
when you hack from a van without internet connection and you only have offline
Python documentation available).&lt;/p&gt;
&lt;p&gt;The package is pure mechanism, no policy, so it is entirely based on &lt;tt class=&quot;docutils literal&quot;&gt;bytes&lt;/tt&gt;
instead of unicode strings. Among its responsibilities there is to &lt;tt class=&quot;docutils literal&quot;&gt;free()&lt;/tt&gt;
the libpq C structures on &lt;tt class=&quot;docutils literal&quot;&gt;__del__()&lt;/tt&gt;, so that resources such as connections
and results are tied to Python objects refcount, in &lt;a class=&quot;reference external&quot; href=&quot;https://en.wikipedia.org/wiki/Resource_acquisition_is_initialization&quot;&gt;RAII style&lt;/a&gt;. It is not
complete yet, but it already exposes everything needed for the psycopg3
implementation so far, and wrapping further functions is straightforward.&lt;/p&gt;
&lt;pre class=&quot;code pycon literal-block&quot;&gt;
&lt;span class=&quot;kn&quot;&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;psycopg3&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pq&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pqconn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PGconn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;dbname=psycopg3_test&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pqconn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exec_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;select 'hello' || ' world!'&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;b'hello world!'&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Among the libpq functions exposed there are the non-blocking ones for
connecting and for querying. The blocking ones are exposed too, but the idea
is to avoid using them altogether in &amp;quot;real code&amp;quot;, leaving to Python the
responsibility to coordinate and wait. This would allow writing the whole
adapter without juggling with the GIL and without losing control during long
operations. In other words, &lt;a class=&quot;reference external&quot; href=&quot;https://www.psycopg.org/articles/2014/07/20/cancelling-postgresql-statements-python/&quot;&gt;Ctrl-C would just work&lt;/a&gt;, no &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/333&quot;&gt;issue #333&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;As explained in the previous article, both a synchronous and an asynchronous
interface should be exposed: the sync one blocking as per DBAPI specs, the
async one based on asyncio and coroutines. What I don't want to do instead is
to have to write everything twice.&lt;/p&gt;
&lt;p&gt;About the async interface, there is no guidance from the DBAPI about what it
should present, but the most natural way (which is what &lt;a class=&quot;reference external&quot; href=&quot;https://aiopg.readthedocs.io/&quot;&gt;AIOPG&lt;/a&gt; exposes, in my
understanding) is to replicate exactly the blocking interface, &lt;tt class=&quot;docutils literal&quot;&gt;await&lt;/tt&gt;ing
whenever it would block. So what may it look like is:&lt;/p&gt;
&lt;pre class=&quot;code pycon literal-block&quot;&gt;
&lt;span class=&quot;n&quot;&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cnn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;psycopg3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connect_async&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cnn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cursor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;select 'hello' || ' mum!'&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;# &amp;gt;&amp;gt;&amp;gt; await cur.fetchone()  # TODO: not implemented yet
# but the result is on the client already
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;b'hello mum!'&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;The async interaction with the libpq is a delicate matter and surely not
something I would like to repeat with different flavours in several parts of
the code. So the guiding forces of the design are:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;there are different types of connections and cursors: a blocking sync one
you can use as &lt;tt class=&quot;docutils literal&quot;&gt;cur.execute(query)&lt;/tt&gt; and an &lt;tt class=&quot;docutils literal&quot;&gt;async def&lt;/tt&gt; one you must call
as &lt;tt class=&quot;docutils literal&quot;&gt;await cur.execute(query)&lt;/tt&gt;, so they must actually be two different
methods;&lt;/li&gt;
&lt;li&gt;the &lt;a class=&quot;reference external&quot; href=&quot;https://www.postgresql.org/docs/current/libpq-async.html&quot;&gt;intricate async machinery&lt;/a&gt; of the libpq, and the state keeping
it needs between calls, should be implemented only once;&lt;/li&gt;
&lt;li&gt;how to wait should be selectable (no Unix pun intended) and injected around
the libpq according to the different Python environment.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, hum... how to do a thing, ask someone else to wait, then go back at work?&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Coroutines!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;More precisely, because in modern Python &lt;em&gt;coroutine&lt;/em&gt; acquired a different and
more specific meaning, what I refer to is to the old plain generators, i.e.
the functions with &lt;tt class=&quot;docutils literal&quot;&gt;yield&lt;/tt&gt;, not the functions with &lt;tt class=&quot;docutils literal&quot;&gt;async def&lt;/tt&gt;. So the
exclamation should be:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Generators!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This is the idea: showing a simplified connection procedure (the query
procedure is more complicated but it follow a similar collaboration pattern):&lt;/p&gt;
&lt;pre class=&quot;code python literal-block&quot;&gt;
&lt;span class=&quot;c1&quot;&gt;# simplified `psycopg3.connection.BaseConnection._connect_gen()`&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;connect_gen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conninfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;
    Generator to create a database connection without blocking.

    Yield pairs (fileno, `Wait`) whenever an operation would block. The
    generator can be restarted sending the appropriate `Ready` state when
    the file descriptor is ready.
    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PGconn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connect_start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conninfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connect_poll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PollingStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PollingStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;READING&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Wait&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PollingStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WRITING&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Wait&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;W&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;This generator yields as soon as it would block, asking the consumer to be
awaken as soon as the connection is ready to read or write. This generator
can be consumed in a blocking way using a procedure such as:&lt;/p&gt;
&lt;pre class=&quot;code python literal-block&quot;&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;select&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# simplified `psycopg3.waiting.wait_select()`&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;wait_select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;
    Wait on the behalf of a generator using select().

    *gen* is expected to generate tuples (fd, status). consume it and block
    according to the status until fd is ready. Send back the ready state
    to the generator.

    Return what the generator eventually returned.
    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Wait&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;rf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;ready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Ready&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Wait&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;W&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;rf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;ready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Ready&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;W&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Wait&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;rf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;ready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Ready&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;W&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Ready&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;ne&quot;&gt;StopIteration&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;With these two functions happily collaborating the blocking call
&lt;tt class=&quot;docutils literal&quot;&gt;psycopg3.connect()&lt;/tt&gt; can be implemented with something like:&lt;/p&gt;
&lt;pre class=&quot;code python literal-block&quot;&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dsn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;gen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;connect_gen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dsn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pgconn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wait_select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;# the low-level libpq connection&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pgconn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;# the high-level DBAPI connection&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;What about the async connection? I'm relatively new to asyncio, so I'm not
sure if this is the most idiomatic way to do it, but at the moment it looks
like the following block. &lt;a class=&quot;reference external&quot; href=&quot;https://docs.python.org/3/library/asyncio-eventloop.html#watching-file-descriptors&quot;&gt;add_reader/add_writer()&lt;/a&gt; are the mechanism to
wait collaboratively for a file descriptor to become ready, but they only take
a callback, they don't block the coroutine. So we block it against an &lt;a class=&quot;reference external&quot; href=&quot;https://docs.python.org/3/library/asyncio-sync.html#event&quot;&gt;Event&lt;/a&gt;,
and use the callback to free it.&lt;/p&gt;
&lt;pre class=&quot;code python literal-block&quot;&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;asyncio&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_event_loop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Event&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# simplified `psycopg3.waiting.wait_async()`&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;wait_async&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ev&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_event_loop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;None&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;wakeup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;nonlocal&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ready&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ev&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ev&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Wait&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;loop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wakeup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Ready&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ev&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;loop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;remove_reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Wait&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;W&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;loop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_writer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wakeup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Ready&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;W&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ev&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;loop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;remove_writer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Wait&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;loop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wakeup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Ready&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;loop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_writer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wakeup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Ready&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;W&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ev&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;loop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;remove_reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;loop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;remove_writer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;ne&quot;&gt;StopIteration&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;which allows to implement an asyncio-friendly connection function with:&lt;/p&gt;
&lt;pre class=&quot;code python literal-block&quot;&gt;
&lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;connect_async&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dsn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;gen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;connect_gen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dsn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pgconn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wait_async&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# the low-level libpq connection&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AsyncConnection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pgconn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# an AIOPG-style high-level connection&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;The same &lt;tt class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;wait_*()&lt;/span&gt;&lt;/tt&gt; functions are used to wrap a send-query-fetch-result
generator underlying &lt;tt class=&quot;docutils literal&quot;&gt;cursor.execute()&lt;/tt&gt; and friends:&lt;/p&gt;
&lt;pre class=&quot;code python literal-block&quot;&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Cursor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BaseCursor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;# ignoring values for now&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;gen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_execute_send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;results&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wait_select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_execute_results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# process the result to python&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AsyncCursor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BaseCursor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;gen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_execute_send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;results&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wait_async&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_execute_results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Minimal code duplication, different high level interface. Symmetry. I like it!&lt;/p&gt;
&lt;p&gt;Furthermore, unpacking the query mechanism allowed the library to gain a new
feature: it is now possible with a single roundtrip to return more than one
result, implementing the &lt;a class=&quot;reference external&quot; href=&quot;https://www.python.org/dev/peps/pep-0249/#nextset&quot;&gt;nextset()&lt;/a&gt; method, which isn't available in
psycopg2:&lt;/p&gt;
&lt;pre class=&quot;code pycon literal-block&quot;&gt;
&lt;span class=&quot;n&quot;&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;select 10; select 20&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;b'10'
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nextset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;True
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;b'20'&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;What's left? Well, a lot! Now that the basic machinery is in place, and Python
can send and retrieve bytes to and from Postgres, it's time to attack the
adaptation layer.&lt;/p&gt;
&lt;p&gt;Feedback is welcome: as &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/1057&quot;&gt;someone suggested&lt;/a&gt; it would be useful to be
friendly with other async frameworks such as &lt;a class=&quot;reference external&quot; href=&quot;https://trio.readthedocs.io/en/stable/&quot;&gt;trio&lt;/a&gt;; maybe my async code is not
the best around and AIOPG or &lt;a class=&quot;reference external&quot; href=&quot;https://lwn.net/Articles/814822/#CommAnchor814868&quot;&gt;asyncpg hackers&lt;/a&gt; have something to suggest.
Please let me know: the code so far is &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg3/&quot;&gt;online already&lt;/a&gt;, with &lt;a class=&quot;reference external&quot; href=&quot;https://travis-ci.org/github/psycopg/psycopg3/builds/666294186&quot;&gt;141 tests&lt;/a&gt;
in a grid testing Python from 3.6 to 3.8 and PostgreSQL from 9.5 to 12.&lt;/p&gt;
&lt;p&gt;I would be extremely grateful if you would like to support the development of
the project! Please make me feel your warmth in this antipodean month of
lockdown with your &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/sponsors/dvarrazzo/&quot;&gt;development sponsorship&lt;/a&gt;, thank you! 💜&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="https://www.varrazzo.com/blog/2020/03/25/vita-covid-nz/">
    <title type="text">Vita, Nuova Zelanda, Covid</title>
    <id>urn:uuid:d11b9092-650a-31bc-9445-85a5b42d1e79</id>
    <updated>2020-03-25T00:00:00Z</updated>
    <link href="https://www.varrazzo.com/blog/2020/03/25/vita-covid-nz/" />
    <author>
      <name>Daniele Varrazzo</name>
    </author>
    <content type="html">&lt;div class=&quot;admonition admonition-note&quot;&gt;
&lt;p class=&quot;first admonition-title&quot;&gt;Note:&lt;/p&gt;
&lt;p class=&quot;last&quot;&gt;You can read this &lt;a class=&quot;reference external&quot; href=&quot;/blog/2020/03/25/life-covid-nz/&quot;&gt;in English&lt;/a&gt; too.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;In un tempo che ora sembra un milione di anni fa, io e Gabri avevamo
organizzato un viaggio di due settimane in Nuova Zelanda, perché un marzo
antipodico ci sembrava meglio di uno a Londra ed avevo ancora un accordo col
mio datore di lavoro di avere il 25% del tempo libero.&lt;/p&gt;
&lt;p&gt;Poi sono cambiate un po' di cose. A febbraio, io e il suddetto datore di
lavoro ci siamo, diciamo, accordati per avere il 100% del tempo libero, in
cambio di un taglio del 100% di stipendio. Un po' di giorni dopo le notizie del
Covid-19 avevano cominciato a sembrare fantascienza scadente. La famiglia e gli
amici in Italia erano bloccati in casa, il governo inglese non sapeva che palle
inventarsi ma riusciva a contraddirsi lo stesso. Avevamo la scelta di non
partire, &amp;quot;per sicurezza&amp;quot;, come suggerito da un po' di amici, o di partire per
più tempo, visto che non c'era molto altro da fare a Londra.&lt;/p&gt;
&lt;p&gt;Ci abbiamo pensato forse addirittura per un minuto intero e il giorno stesso
della partenza abbiamo posticipato il ritorno.&lt;/p&gt;
&lt;p&gt;La nostra casa e mezzo di trasporto sono stati un furgone equipaggiato con un
letto, fornelli e un piccolo frigo. Un vasino chimico lo permetteva di
dichiarare &lt;em&gt;self-contained&lt;/em&gt; (forse nel senso di tenersela?), il che vuol dire
poter dormire in diverse in parchi e riserve naturali. Questo ci ha dato il
massimo della flessibilità: il livello di dettaglio del nostro piano di viaggio
era &amp;quot;in senso orario&amp;quot;.&lt;/p&gt;
&lt;p&gt;Vasino o no, ovunque abbiamo dormito c'erano sempre gabinetti pubblici, sempre
puliti, anche nel caso fossero solo latrine senz'acqua. Nel furgone non c'era
doccia, per cui ogni tanto ci siamo fermati in qualche campeggio per farne una.
Nessun kiwi è stato vittima dell'italica ascella.&lt;/p&gt;
&lt;p&gt;La routine quotidiana consisteva in caffè e colazione al bar dietro al furgone,
poi esplorare l'area dove ci svegliavamo. Sono riuscito a fare un po' della
fotografia che mi piace, quella che prevede scarponi e treppiede. Se ci
capitava una pausa per pranzo o da bere in qualche paese cercavamo un posto
dove ricaricare la batteria del portatile.&lt;/p&gt;
&lt;p&gt;A metà giornata pensavamo ad una direzione dove guidare e dove passare la notte
successiva. Abbiamo provato a tenere il tempo di guida basso, meno di due ore
al giorno, e fermate improvvise per una foto o cambi di piano erano una cosa
regolare.&lt;/p&gt;
&lt;p&gt;Dopo cena, tempo di un hack: ho cominciato a lavorare al mio progetto
&lt;a class=&quot;reference external&quot; href=&quot;/blog/2020/03/06/thinking-psycopg3/&quot;&gt;psycopg3&lt;/a&gt;, e sono riuscito a programmare
abbastanza regolarmente, usando la luminosità del portatile al minimo per
risparmiare batterie e solo con la documentazione scaricata, senza internet,
per cui bello concentrato. Il progetto sta prendendo una bella forma, ma
preferisco &lt;a class=&quot;reference external&quot; href=&quot;/blog/2020/03/26/psycopg3-first-report/&quot;&gt;parlarne a parte&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Dopo poco più di una settimana di viaggio, il governo neozelandese ha imposto
due settimane di isolamento a chiunque venisse da fuori, per cui è stato un
grande tempismo riuscire ad entrare e godersi il paese. Non molti giorni più
tardi l'impiegato di un parco incontrato per caso ci ha avvisato che la nazione
aveva appena passato la soglia dei 100 casi ed era scattato il &amp;quot;livello 3&amp;quot;, con
il &amp;quot;livello 4&amp;quot;, lockdown, annunciato in 48 ore.&lt;/p&gt;
&lt;p&gt;Siamo subito andati in un paese vicino per cercare una scheda telefonica per
organizzarci meglio, e da quelle parti abbiamo capito cosa volesse dire
&amp;quot;livello 3&amp;quot;: già a poche ore dall'annuncio la serenità precedente era scomparsa
e tutto quello che non fosse essenziale - caffè, ristoranti, barbiere, negozi -
era già chiuso. La cosa sarebbe stata seria: se qui dicono un mese in casa sarà
un mese in casa.&lt;/p&gt;
&lt;p&gt;La prima scelta fatta è stata di dove passare il periodo di lockdown: tra
Auckland ed una città più piccola abbiamo scelto quest'ultima: Whangarei, il
capoluogo del Northland. La prima notte l'abbiamo passata in furgone, e abbiamo
avuto modo di vedere che il supermercato locale era ben fornito ed organizzato
per evitare il saccheggio. Il giorno dopo siamo riusciti a trovare un alloggio
per il mese successivo.&lt;/p&gt;
&lt;p&gt;A parte la bellezza di questo posto, qualcosa che ci ha colpito è stata la
gentilezza e l'affetto dei neozelandesi che abbiamo incontrato. Dalla signora
delle pulizie che ci ha regalato un ventaglio di paglia contro le mosche in una
giornata afosa all'agente immobilare che ci ha richiamato per assicurarsi che
avessimo trovato dove stare in isolamento. La sensazione che ci hanno dato,
tutti, è quanto ognuno tenga al benessere dell'altro.&lt;/p&gt;
&lt;p&gt;In questo momento è passata la mezzanotte da pochi minuti: il lockdown è in
atto e l'idea è che qui le persone saranno serie a rispettarlo. Abbiamo ancora
il furgone, quindi potremo fare la spesa quando servirà. Abbiamo da leggere e
da disegnare, io ho un lavoro remoto da cercare e un po' di progetti personali
da sviluppare.&lt;/p&gt;
&lt;p&gt;Un abbraccio a tutti gli amici e le famiglie. In bocca al lupo e speriamo di
rivederci presto!&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="https://www.varrazzo.com/blog/2020/03/25/life-covid-nz/">
    <title type="text">Life, New Zealand, Covid</title>
    <id>urn:uuid:b602c25a-0b82-3626-8d05-a7f8013b8119</id>
    <updated>2020-03-25T00:00:00Z</updated>
    <link href="https://www.varrazzo.com/blog/2020/03/25/life-covid-nz/" />
    <author>
      <name>Daniele Varrazzo</name>
    </author>
    <content type="html">&lt;div class=&quot;admonition admonition-attenzione&quot;&gt;
&lt;p class=&quot;first admonition-title&quot;&gt;Attenzione:&lt;/p&gt;
&lt;p class=&quot;last&quot;&gt;Questo articolo è anche &lt;a class=&quot;reference external&quot; href=&quot;/blog/2020/03/25/vita-covid-nz/&quot;&gt;in Italiano&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;In a time that now feels like a million of years ago, Gabri and I organised a
two-weeks trip in New Zealand, because an Antipodean March sounded better than
one in London, and I still had an agreement of 25% time off work with my
employer.&lt;/p&gt;
&lt;p&gt;Then a few things changed. My employer and I, let's say, agreed to move to a
100% time off arrangement in February, in exchange of a 100% pay cut. A few
days later, news of the Covid-19 started resembling bad science fiction ones.
My family and friends in Italy were in lock down at home, the UK government
was going in all the directions at once. We had the option of not leaving, as
suggested by some friends, &amp;quot;to be safe&amp;quot;, or the one of leaving for longer, as
we didn't have much to do in London.&lt;/p&gt;
&lt;p&gt;We might have thought about it maybe even for a whole minute, and the same day
of our flight we called the flight company to postpone our return.&lt;/p&gt;
&lt;p&gt;Our home and transportation has been a van equipped with a bed, hobs, and a
small fridge. A chemical porta-potty allowed to call it &lt;em&gt;self contained&lt;/em&gt;
(probably meaning that you prefer to hold it), which allowed us to sleep in
several parks and natural reserves. It gave us the most of freedom in our
journey: our grand total of route planning was &amp;quot;clockwise&amp;quot;.&lt;/p&gt;
&lt;p&gt;Potty or not, everywhere we have slept there were public toilets available,
always clean, even if it was a latrine in the middle of nowhere. In the van
there was no shower so we stopped in equipped camping grounds every few days.
No Kiwi has been harmed by Italian armpits.&lt;/p&gt;
&lt;p&gt;The daily routine started with a coffee in our bar at the back of the van and
then exploring the area where we would have woken up. I managed to do some of
the photography I love, the one consisting of hiking boots and tripod. If we
stopped somewhere for a lunch or a drink we would have looked for a place where
to recharge the laptop.&lt;/p&gt;
&lt;p&gt;In the afternoon we would have thought about the direction where to drive and
where to spend the night. We tried to keep the driving time low, less than
2 hours daily, with unexpected stops for a shot or change of plans as a regular
occurrence.&lt;/p&gt;
&lt;p&gt;After dinner it was hack time: I started working on my &lt;a class=&quot;reference external&quot; href=&quot;/blog/2020/03/06/thinking-psycopg3/&quot;&gt;psycopg3 project&lt;/a&gt; and I managed to hack regularly enough, using the
dimmest display setting to save as much battery as possible, with only offline
documentation, no network: all in all a lot of focus. The project is taking a
nice shape, but I'd rather avoid tech speak for this entry: you can read more
&lt;a class=&quot;reference external&quot; href=&quot;/blog/2020/03/26/psycopg3-first-report/&quot;&gt;in another article&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;About one week into our journey the New Zealand government imposed two weeks of
isolation to everybody coming from abroad, so our arrival was well timed to
manage to enjoy the country. After a few more days, a park warden stopped by to
break the news that the country had moved to &amp;quot;level 3&amp;quot;, just passed the
threshold of 100 cases, and the &amp;quot;level 4&amp;quot; lockdown was announced in 48 hours.&lt;/p&gt;
&lt;p&gt;We went quickly to a nearby town to look for a phone SIM to organise better and
in that town we understood what &amp;quot;level 3&amp;quot; meant: just a few hours after the
announcement the previous serenity was gone and everything that wasn't
essential - cafes, restaurants, barber shops - was closed already. We had the
hunch that the thing would have been serious: a month locked down meant a month
locked down here.&lt;/p&gt;
&lt;p&gt;The first choice we made was where to spend the lockdown: between Auckland and
a smaller town we preferred the latter: we weren't far from Whangarei, the
Northland Region capital. We spent a first night there in the van and we could
assess that the local supermarket was well stocked and equipped for eventual
hoarders. The day after we managed to find a place to rent for the upcoming
month.&lt;/p&gt;
&lt;p&gt;Aside of the natural beauty of this country, what struck us was the kindness
and care of the Kiwi people we met. From the cleaning lady who gifted us a
straw fan against the flies in a torrid day to the real estate agent who called
us back to make sure we had found a place where to stay. The feeling everyone
gave us was about how much they cared for each other's wellbeing.&lt;/p&gt;
&lt;p&gt;Midnight has passed a few minutes ago: lockdown is in place and we understand
that people will respect it seriously. We have kept our van so we can move to
buy groceries when we will need them. We have stuff to read and to draw, I have
a remote job to look for and a few personal projects to hack on.&lt;/p&gt;
&lt;p&gt;Sending a big hug to all our friends and families. We wish you the best and we
hope to see you again soon!&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="https://www.varrazzo.com/blog/2020/03/06/thinking-psycopg3/">
    <title type="text">Thinking psycopg3</title>
    <id>urn:uuid:c38c961a-a398-3c96-8a19-53e5ce15189e</id>
    <updated>2020-03-06T00:00:00Z</updated>
    <link href="https://www.varrazzo.com/blog/2020/03/06/thinking-psycopg3/" />
    <author>
      <name>Daniele Varrazzo</name>
    </author>
    <content type="html">&lt;div class=&quot;admonition admonition-note&quot;&gt;
&lt;p class=&quot;first admonition-title&quot;&gt;Note:&lt;/p&gt;
&lt;p class=&quot;last&quot;&gt;Development of psycopg3 started: you can read something in
&lt;a class=&quot;reference external&quot; href=&quot;/blog/2020/03/26/psycopg3-first-report/&quot;&gt;psycopg3: a first report&lt;/a&gt;!&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;I have been &lt;a class=&quot;reference external&quot; href=&quot;https://www.psycopg.org/&quot;&gt;psycopg2&lt;/a&gt; maintainer since 2010; before that, &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/commit/4805a935690b1d618247267318a0ef7aa06c2378&quot;&gt;git says&lt;/a&gt; that my
first contribution was in 2005. At that time, psycopg (one) was the tool to
use, and psycopg2 was an interesting experiment.&lt;/p&gt;
&lt;p&gt;In several years of using psycopg2 daily and reading about expectations,
frustrations, surprises experienced by other users, I have been making my mind
about a better system, and if I had to release a version incompatible with the
past, those are some of the things I would change.&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;query-parameters-adaptation&quot;&gt;
&lt;h3&gt;Query parameters adaptation&lt;/h3&gt;
&lt;p&gt;psycopg2 composes queries (replacing the placeholders in the SQL strings with
the values supplied by the user) on the client, and sends a complete query to
the server.&lt;/p&gt;
&lt;img alt=&quot;Sequence diagram for psycopg2&quot; class=&quot;mb10 align-center&quot; src=&quot;seq-psycopg2.jpg&quot; /&gt;
&lt;p&gt;It does its job right, so it doesn't result in SQL injection vulnerabilities.
However the correct way of doing it, as far as PostgreSQL is concerned, should
be to send the query and its parameters separately (i.e. using the
&lt;a class=&quot;reference external&quot; href=&quot;https://www.postgresql.org/docs/current/libpq-exec.html#LIBPQ-PQEXECPARAMS&quot;&gt;&lt;tt class=&quot;docutils literal&quot;&gt;PQexecParams&lt;/tt&gt;&lt;/a&gt; libpq function rather than &lt;a class=&quot;reference external&quot; href=&quot;https://www.postgresql.org/docs/current/libpq-exec.html#LIBPQ-PQEXEC&quot;&gt;&lt;tt class=&quot;docutils literal&quot;&gt;PQexec&lt;/tt&gt;&lt;/a&gt;).&lt;/p&gt;
&lt;img alt=&quot;Sequence diagram for psycopg3&quot; class=&quot;mb10 align-center&quot; src=&quot;seq-psycopg3.jpg&quot; /&gt;
&lt;p&gt;Separating the statement from the parameters improves performance and memory
usage at parsing time. However the behaviour of the library would change
slightly, which is the reason why server-side merging hasn't been used so far.
For instance:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;tt class=&quot;docutils literal&quot;&gt;PQexecParams&lt;/tt&gt; only supports one command at time: it wouldn't be possible
anymore to send a batch of queries separated by semicolon in a single
&lt;tt class=&quot;docutils literal&quot;&gt;execute()&lt;/tt&gt; call.&lt;/li&gt;
&lt;li&gt;psycopg2 helps solving some type casting ambiguities by attaching casts to
the types represented as strings (e.g. the date 1/1/2020 is currently merged
to the query as &lt;tt class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;'2020-01-01'::date&lt;/span&gt;&lt;/tt&gt;); using &lt;tt class=&quot;docutils literal&quot;&gt;PQexecParams&lt;/tt&gt; the trick
wouldn't be available anymore. It might be possible maybe to suggest the
type in other ways, but if that's not the case then queries should be
modified by applying explicit casts next to their placeholders (e.g.
&lt;tt class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;%s::date&lt;/span&gt;&lt;/tt&gt;).&lt;/li&gt;
&lt;li&gt;Custom-defined adapters should be rewritten.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The main difference between the old adaptation protocol (called &lt;a class=&quot;reference external&quot; href=&quot;https://www.psycopg.org/docs/extensions.html#psycopg2.extensions.ISQLQuote&quot;&gt;&lt;tt class=&quot;docutils literal&quot;&gt;ISQLQuote&lt;/tt&gt;&lt;/a&gt;)
and the new one (which doesn't have a name yet, it could be probably called
&lt;tt class=&quot;docutils literal&quot;&gt;ISQL&lt;/tt&gt;) is the use of the quotes, whereby the string &lt;tt class=&quot;docutils literal&quot;&gt;O'Connor&lt;/tt&gt; is passed
to the query as &lt;tt class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;'O''Connor'&lt;/span&gt;&lt;/tt&gt;, with wrapping quotes and doubled-up quotes in
the content. In &lt;tt class=&quot;docutils literal&quot;&gt;ISQL&lt;/tt&gt; the string wouldn't undergo the same transformation
to add and escape quotes; other types would only have to be converted into
strings in the PostgreSQL syntax, but wouldn't need to be wrapped in quotes to
create a SQL literal. Using &lt;tt class=&quot;docutils literal&quot;&gt;ISQL&lt;/tt&gt; as the fundamental adaptation steps there
would be some interesting improvements:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;adapting composite types and arrays would be a much more straightforward
matter,&lt;/li&gt;
&lt;li&gt;it opens the door to the use of &lt;a class=&quot;reference external&quot; href=&quot;https://www.postgresql.org/docs/current/libpq-exec.html#LIBPQ-PQPREPARE&quot;&gt;prepared statements&lt;/a&gt;, but especially&lt;/li&gt;
&lt;li&gt;the &lt;tt class=&quot;docutils literal&quot;&gt;COPY FROM&lt;/tt&gt; operation could take an iterable object yielding Python
types instead of a file-like object to read; similarly &lt;tt class=&quot;docutils literal&quot;&gt;COPY TO&lt;/tt&gt; could
return an iterable object yielding Python types.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I mean: this would be great! &lt;a class=&quot;reference external&quot; href=&quot;https://www.postgresql.org/docs/current/sql-copy.html&quot;&gt;&lt;tt class=&quot;docutils literal&quot;&gt;COPY&lt;/tt&gt;&lt;/a&gt; is by far the most efficient way to
insert data into the database: using it via psycopg2 requires exposing the
data via a &lt;a class=&quot;reference external&quot; href=&quot;https://www.psycopg.org/docs/usage.html#using-copy-to-and-copy-from&quot;&gt;file-like object&lt;/a&gt;, which not only is a weird interface, but it
requires people to roll their own adaptation format. The target for copying
data into the database using psycopg3 should be as easy as:&lt;/p&gt;
&lt;pre class=&quot;code python literal-block&quot;&gt;
&lt;span class=&quot;n&quot;&gt;curs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;COPY song (artist, title) FROM STDIN&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Sinead O'Connor&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Nothing Compares 2 U&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'REM'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Losing my Religion&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;context-managers-and-transactions&quot;&gt;
&lt;h3&gt;Context managers and transactions&lt;/h3&gt;
&lt;p&gt;psycopg2 follows a de-facto standard (which was &lt;a class=&quot;reference external&quot; href=&quot;https://mail.python.org/pipermail/db-sig/2012-November/thread.html&quot;&gt;widely discussed&lt;/a&gt; but which
never landed in the &lt;a class=&quot;reference external&quot; href=&quot;https://www.python.org/dev/peps/pep-0249/&quot;&gt;DBAPI specs&lt;/a&gt;), whereby connections used as context
managers wrap a transaction, committing it if exiting on success or rolling it
back in case of error. So the way to use it is something like:&lt;/p&gt;
&lt;pre class=&quot;code python literal-block&quot;&gt;
&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DSN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# these are two separate transactions&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;do_something&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;do_something_else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;This idea has its usefulness,  but it is a &lt;em&gt;very&lt;/em&gt; surprising behaviour:
developers usually expect the same resources released by &lt;tt class=&quot;docutils literal&quot;&gt;close()&lt;/tt&gt; to be
released on context exit (as files, sockets, and even DBAPI cursors do). It
also gets in the way of managing different life cycles on the connection, for
instance if there is the connection is taken from a pool:&lt;/p&gt;
&lt;pre class=&quot;code python literal-block&quot;&gt;
&lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pool&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getconn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cursor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;curs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;do_someting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;curs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;then it is expected (and &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/pull/17&quot;&gt;reasonably requested&lt;/a&gt;) that the connection is
returned to the pool at the end of the block.&lt;/p&gt;
&lt;p&gt;Talking about transactions, PostgreSQL support for &lt;tt class=&quot;docutils literal&quot;&gt;SAVEPOINT&lt;/tt&gt; makes
possible to implement nested transactions (already implemented on top of
psycopg2 e.g. &lt;a class=&quot;reference external&quot; href=&quot;https://docs.djangoproject.com/en/3.0/topics/db/transactions/#django.db.transaction.atomic&quot;&gt;by Django&lt;/a&gt; and &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/asqui/psycopg-nestedtransactions&quot;&gt;in a stand-alone module&lt;/a&gt;). This seems to
ask for a different context than the connection-scope one. So maybe it would
be useful to leave the latter to the management of the resource, releasing
them on connection context exit, and to add an explicit method to start an
atomic block (either a transaction or a savepoint, according to the current
connection state):&lt;/p&gt;
&lt;pre class=&quot;code python literal-block&quot;&gt;
&lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DSN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transaction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;do_something&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transaction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;do_something_nested&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transaction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;do_something_else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# we were just testing and we don't really want to do this&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;tx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rollback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# and here the connection is closed&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;optional-c-module&quot;&gt;
&lt;h3&gt;Optional C module&lt;/h3&gt;
&lt;p&gt;psycopg2 is a C extension module wrapping the &lt;a class=&quot;reference external&quot; href=&quot;https://www.postgresql.org/docs/current/libpq.html&quot;&gt;libpq&lt;/a&gt;, the PostgreSQL client
library. As such, in order to build, it requires a C compiler, Python, and
libpq development packages. It is a relatively low bar, but it can be a pain
nonetheless for beginner users.&lt;/p&gt;
&lt;p&gt;We tried to avoid the problem by shipping a &lt;a class=&quot;reference external&quot; href=&quot;https://pythonwheels.com/&quot;&gt;wheel package&lt;/a&gt;, but the
experience has been &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues?utf8=%E2%9C%93&amp;amp;q=+label%3Awheel&quot;&gt;far from being a success&lt;/a&gt;,  marred by diverse issues
such as the possible incompatibility between the libcrypto used by Python and
by the libpq, the lack of support for musl libc/Alpine Linux (much in demand
in Docker images), broken assumptions (like &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/pypa/manylinux/issues/305&quot;&gt;glibc breaking backwards
compatibility&lt;/a&gt;)... There's just too much magic needed to work smoothly.&lt;/p&gt;
&lt;p&gt;In the past years, mostly in order to support &lt;a class=&quot;reference external&quot; href=&quot;https://www.pypy.org/&quot;&gt;PyPy&lt;/a&gt;, a few &amp;quot;python-only&amp;quot;
psycopg2 implementations have been developed: first a &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/mvantellingen/psycopg2-ctypes&quot;&gt;ctypes
implementation&lt;/a&gt;, to which I contributed but which hasn't been maintained at
the same feature level of the reference C psycopg2. This package was further
forked into a &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/chtd/psycopg2cffi&quot;&gt;cffi implementation&lt;/a&gt;, which seems to be more active, but
whose release numbers don't follow the original ones, which is mighty
confusing.&lt;/p&gt;
&lt;p&gt;psycopg3 might follow an approach I've seen used in other extension modules
such as PyYAML, which try to compile an optimized version of the library and
fall back to a Python implementation if that fails. Using the C module over
the Python module would be a preference at import time, but if could still be
possible to enforce the use of one specific implementation, for instance using
a &lt;tt class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;PSYCOPG3_IMPL={C|PYTHON}&lt;/span&gt;&lt;/tt&gt; environment variable, which would make the lack
of the requested implementation an import time error.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;async-from-the-ground-up&quot;&gt;
&lt;h3&gt;Async from the ground up&lt;/h3&gt;
&lt;p&gt;The DBAPI interface is synchronous and blocking by design: &lt;tt class=&quot;docutils literal&quot;&gt;connect()&lt;/tt&gt;
blocks until a connection is open, &lt;tt class=&quot;docutils literal&quot;&gt;execute()&lt;/tt&gt; blocks until the query is
completed etc. This didn't stop psycopg2 to work asynchronously, exposing two
different interfaces for it:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://www.psycopg.org/docs/advanced.html#asynchronous-support&quot;&gt;a purely asynchronous one&lt;/a&gt; where the application must explicitly
&lt;tt class=&quot;docutils literal&quot;&gt;poll()&lt;/tt&gt; to bring forward the connection/execution process: it breaks the
DBAPI interface but allows frameworks which can't make blocking calls anyway
(such as the revered &lt;a class=&quot;reference external&quot; href=&quot;https://twistedmatrix.com/&quot;&gt;Twisted&lt;/a&gt;) to use it;&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://www.psycopg.org/docs/advanced.html#support-for-coroutine-libraries&quot;&gt;a coroutine-based one&lt;/a&gt; where the DBAPI blocking interface is respected
but behind the scene psycopg2 collaborates with coroutine libraries such as
&lt;a class=&quot;reference external&quot; href=&quot;https://eventlet.net/&quot;&gt;Eventlet&lt;/a&gt; and &lt;a class=&quot;reference external&quot; href=&quot;http://www.gevent.org/&quot;&gt;gevent&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Needless to say, the world has gone forward, and Python now offers core
support in its syntax and library to &lt;a class=&quot;reference external&quot; href=&quot;https://docs.python.org/3.8/library/asyncio.html&quot;&gt;asyncio&lt;/a&gt;: this is the foundation that
newer Python async frameworks, such as &lt;a class=&quot;reference external&quot; href=&quot;https://aiohttp.readthedocs.io/&quot;&gt;aiohttp&lt;/a&gt;, are built upon. A third-part
wrapper, &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/aio-libs/aiopg&quot;&gt;aiopg&lt;/a&gt;, currently helps to bridge the async mode of psycopg2 with the
asyncio machinery, but of course there is some overhead, mostly caused by the
fact that the C implementation of psycopg2 is a relatively thick layer, with
the libpq async calls deeply buried under the C implementation of the Python
&lt;tt class=&quot;docutils literal&quot;&gt;connection&lt;/tt&gt; and &lt;tt class=&quot;docutils literal&quot;&gt;cursor&lt;/tt&gt; objects and behind their interfaces.&lt;/p&gt;
&lt;p&gt;There is a chance now to rethink how thick the C libpq wrapper should be. We
can reduce the C implementation to a minimal wrapper around the libpq
(replaceable by a CFFI Python wrapper if compiling C is not available on the
client), using it as a foundation to build a familiar DBAPI blocking
interface. A blocking behaviour is not bad in itself: it allows to write most
of the programs, the ones which don't need crazy concurrency, in a simple and
familiar paradigm; the async layer would be available under the hood to
squeeze the best performance in programs who have embraced an asynchronous
pattern and framework. Time for a picture:&lt;/p&gt;
&lt;img alt=&quot;Proposed architecture for psycopg3&quot; class=&quot;mb10 align-center&quot; src=&quot;architecture.jpg&quot; /&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;other-improvements&quot;&gt;
&lt;h3&gt;Other improvements&lt;/h3&gt;
&lt;p&gt;I've written down some of the ideas to implement on &lt;a class=&quot;reference external&quot; href=&quot;https://trello.com/b/6tF2oHJ0/psycopg3&quot;&gt;a Trello board&lt;/a&gt; and in
&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/milestone/4&quot;&gt;an issues milestone&lt;/a&gt;. As the board shows, some of the improvements weren't
actually incompatible with psycopg2 and over the years they have already
landed in in its releases; some other ones will have to wait.&lt;/p&gt;
&lt;p&gt;Some of what could be improved over psycopg2:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class=&quot;first&quot;&gt;async COPY methods (see &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/428&quot;&gt;issue #428&lt;/a&gt;);&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class=&quot;first&quot;&gt;better support for SQL_ASCII databases (which, unlike what their name
suggests, are actually unencoded 8 bits, see &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg2/issues/519&quot;&gt;issue #519&lt;/a&gt;);&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class=&quot;first&quot;&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://gist.github.com/dvarrazzo/3797445&quot;&gt;preparing cursors&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class=&quot;first&quot;&gt;return value on &lt;tt class=&quot;docutils literal&quot;&gt;execute()&lt;/tt&gt;:&lt;/p&gt;
&lt;pre class=&quot;code python literal-block&quot;&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;record&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class=&quot;first&quot;&gt;connection and cursor-scoped adapters (currently you can scope the
adaptation rules from Postgres to Python but the rules from Python to
Postgres can only be global);&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class=&quot;first&quot;&gt;reorganising the &lt;a class=&quot;reference external&quot; href=&quot;https://www.psycopg.org/docs/extensions.html&quot;&gt;extensions&lt;/a&gt; and &lt;a class=&quot;reference external&quot; href=&quot;https://www.psycopg.org/docs/extras.html&quot;&gt;extras&lt;/a&gt; module, which at the moment contain
an heterogeneous assortment of objects, functions, constants...&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I would be interested in starting the development of this project soon. If you
have opinions, or interest in the project, please let us know on the &lt;a class=&quot;reference external&quot; href=&quot;https://www.postgresql.org/list/psycopg/&quot;&gt;Mailing
List&lt;/a&gt; (you can &lt;a class=&quot;reference external&quot; href=&quot;https://lists.postgresql.org/&quot;&gt;subscribe here&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;...and if psycopg2 has been useful so far for you and for your business and if
you would love to see a psycopg3 even more performing and easier to use,
please consider &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/sponsors/dvarrazzo/&quot;&gt;sponsoring the development&lt;/a&gt;, thank you! 💜&lt;/p&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="https://www.varrazzo.com/blog/2020/02/29/adventures-in-yaml-config/">
    <title type="text">Adventures in YAML config</title>
    <id>urn:uuid:a325926a-9137-3067-8700-5917960f7b5f</id>
    <updated>2020-02-29T00:00:00Z</updated>
    <link href="https://www.varrazzo.com/blog/2020/02/29/adventures-in-yaml-config/" />
    <author>
      <name>Daniele Varrazzo</name>
    </author>
    <content type="html">&lt;p&gt;Developing database-backed applications, I've often had the need to extract a
meaningful selection of data out of a production database. Maybe in order to
set up a development environment, or a testing environment, or to try out a
complex migration on smaller dataset.&lt;/p&gt;
&lt;p&gt;However a &lt;tt class=&quot;docutils literal&quot;&gt;pg_dump&lt;/tt&gt; of the production db is not necessarily a good idea:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;the production data may be YUGE;&lt;/li&gt;
&lt;li&gt;the production data may contain sensitive information;&lt;/li&gt;
&lt;li&gt;some of the data in the production db might be bulky and irrelevant, for
instance audit tables.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Still, googling around, you don't get much to help: people still advise to use
&lt;tt class=&quot;docutils literal&quot;&gt;pg_dump&lt;/tt&gt; with a plethora of &lt;tt class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;--table&lt;/span&gt;&lt;/tt&gt;, but this results in the need of
saving a script to keep the unwieldy command line, and still that does not
make you able to modify in any way the data dumped from the table, for
instance to omit the &lt;tt class=&quot;docutils literal&quot;&gt;password&lt;/tt&gt; column. You might use &lt;tt class=&quot;docutils literal&quot;&gt;COPY TO&lt;/tt&gt; for that,
but that's an entirely different beast from &lt;tt class=&quot;docutils literal&quot;&gt;pg_dump&lt;/tt&gt; and the resulting file
is &lt;em&gt;only&lt;/em&gt; data: not even the columns names. It will bear no context about how
it should be restored (and now that you dropped the &lt;tt class=&quot;docutils literal&quot;&gt;password&lt;/tt&gt; column the
data won't align anymore and you won't be able to just run a &lt;tt class=&quot;docutils literal&quot;&gt;COPY FROM&lt;/tt&gt;...)&lt;/p&gt;
&lt;p&gt;A few months ago I decided to scratch this itch properly, and I started
writing a tool that, after some improvements, was deemed to be good enough to
be stamped as 0.1. After some discussion about the meaning of &lt;em&gt;dump&lt;/em&gt; and what
a good synonym could have been (with references ranging from relation breakups
to more scatological ones) it was called &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/dvarrazzo/pg_seldump&quot;&gt;pg_seldump&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The idea of the tool is to define a &lt;a class=&quot;reference external&quot; href=&quot;https://en.wikipedia.org/wiki/YAML&quot;&gt;YAML&lt;/a&gt; file containing a description of the
rule to apply to different database objects to dump. For instance:&lt;/p&gt;
&lt;pre class=&quot;code YAML literal-block&quot;&gt;
&lt;span class=&quot;c1&quot;&gt;# A YAML file is similar in content to a JSON file, but easier for human&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# to edit: more compact, less noisy, and can be commented.&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;db_objects&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# dump all the tables in the schema 'myapp'&lt;/span&gt;
  &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;schema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;myapp&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;dump&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# but not the one starting with 'audit_'&lt;/span&gt;
  &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;schema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;myapp&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;names&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;^audit_.*&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;skip&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# don't dump customers passwords, and replace their telephone no. with a dummy&lt;/span&gt;
  &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;schema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;myapp&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;customer&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;no_columns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;password&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;telephone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;+44&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;7853&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;123456&amp;quot;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;This description would produce a data-only dump as a text file containing the
data and enough statements to restore them by piping the entire file into
&lt;cite&gt;psql&lt;/cite&gt;.&lt;/p&gt;
&lt;p&gt;The program isn't finished yet, but it is already quite interesting: the
&lt;tt class=&quot;docutils literal&quot;&gt;pg_seldump&lt;/tt&gt; command takes in input one or more configuration files like the
one in the example and introspects the database looking for the objects to
dump. The objects are matched against all the rules and, inspired to CSS, it
picks the one with the highest selectivity. It also understand what fields use
what sequences, and if the field is dumped then the sequence state will be
saved as well.&lt;/p&gt;
&lt;p&gt;There is one large feature I'm about to develop: automatically navigating
foreign keys in order to collect all the data necessary to create a consistent
sample of the data. I started yesterday working at that feature, but
there is something else I wanted to do before...&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;what-s-in-a-configuration-file&quot;&gt;
&lt;h3&gt;What's in a configuration file?&lt;/h3&gt;
&lt;p&gt;So far, the program had a &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/dvarrazzo/pg_seldump/blob/96c811b272130d7492c62ba89216ab537dbd4d41/seldump/dumprule.py#L103&quot;&gt;parser for the configuration file&lt;/a&gt; to create
&amp;quot;rule&amp;quot; objects out of what found in the YAML. While it works, it's quite
verbose, it stops at the first error, and it's hard to understand from it what
is really allowed in the file. I find working with unstructured data really
impractical: every single property is optional, every typo (&lt;tt class=&quot;docutils literal&quot;&gt;schmea&lt;/tt&gt;) should
be explicitly checked.&lt;/p&gt;
&lt;p&gt;In order to check the configuration entirely before throwing it into the rest
of the program, and in order to be able to document precisely what is a valid
configuration file, I've taken a look at &lt;a class=&quot;reference external&quot; href=&quot;https://json-schema.org/&quot;&gt;JSON Schema&lt;/a&gt;. Now, that's
deceiving: validating YAML with JSON Schema? That turns out to be no problem,
because the validation doesn't happen at syntactical level, but it is
performed on the objects after parsing. Limiting the YAML to the same data
types JSON can handle it will work no problem.&lt;/p&gt;
&lt;p&gt;JSON Schemas are quite simple to define. My first thought was &lt;em&gt;noooo, another
huge thing to learn just for a simple thing...&lt;/em&gt; but actually it turned out to
be not difficult at all: it didn't take too long to put together a &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/dvarrazzo/pg_seldump/blob/eae1d8634444b0fd1bfeff4f75f89116a975b736/seldump/schema/config.yaml&quot;&gt;schema for
pg_seldump configuration file&lt;/a&gt; (in YAML of course). Having that it is
possible to perform automatic validation of the document against the schema
(for instance using the &lt;a class=&quot;reference external&quot; href=&quot;https://pypi.org/project/jsonschema/&quot;&gt;jsonschema&lt;/a&gt; Python package). Exciting times...&lt;/p&gt;
&lt;p&gt;However the results are not entirely satisfactory. For instance, this is a
configuration file containing 4 errors:&lt;/p&gt;
&lt;pre class=&quot;code YAML literal-block&quot;&gt;
&lt;span class=&quot;ln&quot;&gt;1 &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# badconfig.yaml&lt;/span&gt;
&lt;span class=&quot;ln&quot;&gt;2 &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;db_objects&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;ln&quot;&gt;3 &lt;/span&gt;  &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;ln&quot;&gt;4 &lt;/span&gt;    &lt;span class=&quot;nt&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;download&lt;/span&gt;
&lt;span class=&quot;ln&quot;&gt;5 &lt;/span&gt;    &lt;span class=&quot;nt&quot;&gt;kid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;table&lt;/span&gt;
&lt;span class=&quot;ln&quot;&gt;6 &lt;/span&gt;    &lt;span class=&quot;nt&quot;&gt;adjust_score&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;twelve&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;It's easy to use the validator to find all the errors at once:&lt;/p&gt;
&lt;pre class=&quot;code pycon literal-block&quot;&gt;
&lt;span class=&quot;kn&quot;&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;jsonschema&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;yaml&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;schema&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yaml&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;seldump/schema/config.yaml&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;validator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jsonschema&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Draft7Validator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;schema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yaml&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;badconfig.yaml&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;validator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iter_errors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;
Additional properties are not allowed ('kid' was unexpected)
10 is not of type 'string'
'twelve' is not of type 'integer'
'download' is not one of ['dump', 'skip', 'error', 'ref']&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;However these error messages, as informative as they can be, have lost the
context of where they originated. Sure 10 is not a string, but good luck
finding the right &amp;quot;10&amp;quot; into a large file. The problem comes from that same
characteristic that allowed us to validate a YAML file against a JSON schema
expressed into a YAML file: everything is based on Python plain objects
(scalars, dicts, lists) and the information of what line in what file that
value came from is long lost. For the same reason, the errors ordering is
undetermined.&lt;/p&gt;
&lt;p&gt;In order to overcome the problem, the idea is to attach file and line
information, available at parsing time, to the parsed objects. In a previous
approximation of the solution I had &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/dvarrazzo/pg_seldump/blob/96c811b272130d7492c62ba89216ab537dbd4d41/seldump/yaml.py&quot;&gt;only the dictionaries&lt;/a&gt; subclassed to
attach them their position. In case of error, the name of the file and the
first line of the dictionary would have been printed: better than nothing I
guess, but not perfect (in the above example any error would have been
reported at line 3).&lt;/p&gt;
&lt;p&gt;With the introduction of the JSON schema validator I got back on the
customized YAML parser. First I used &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/dvarrazzo/pg_seldump/blob/eae1d8634444b0fd1bfeff4f75f89116a975b736/seldump/yaml.py#L89&quot;&gt;more customization&lt;/a&gt;, subclassing lists
and wrapping scalars to memorize their positions and the position of their
content. The scalars themselves don't remember the attribute they are attached
to: the &lt;tt class=&quot;docutils literal&quot;&gt;10&lt;/tt&gt; above knows it came from line 3 of a file, but not that it was
the tentative &lt;tt class=&quot;docutils literal&quot;&gt;name&lt;/tt&gt; of an object. So the idea was to further instrument the
containers returned by the YAML parser, and memorize item by item what line
the values are parsed from. When a schema validation error is found,
&lt;tt class=&quot;docutils literal&quot;&gt;jsonschema&lt;/tt&gt; errors have an useful &lt;tt class=&quot;docutils literal&quot;&gt;path&lt;/tt&gt; attribute describing in what
object the error was found (for instance &lt;tt class=&quot;docutils literal&quot;&gt;['db_objects', 0, 'name']&lt;/tt&gt; for the
&amp;quot;10&amp;quot; error). So, if the last element is a string and the penultimate is a
dictionary, there is enough information to &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/dvarrazzo/pg_seldump/blob/eae1d8634444b0fd1bfeff4f75f89116a975b736/seldump/config.py#L135-L167&quot;&gt;associate it back to the original
file and position&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The result I think is very user friendly:&lt;/p&gt;
&lt;pre class=&quot;literal-block&quot;&gt;
$ pg_seldump --test badconfig.yaml
ERROR at badconfig.yaml:3: name: 10 is not of type 'string'
ERROR at badconfig.yaml:4: action: 'download' is not one of ['dump', 'skip', 'error']
ERROR at badconfig.yaml:5: Additional properties are not allowed ('kid' was unexpected)
ERROR at badconfig.yaml:6: adjust_score: 'twelve' is not of type 'integer'
&lt;/pre&gt;
&lt;p&gt;It wasn't possible to express everything in the JSON schema: demanding at most
one between &lt;tt class=&quot;docutils literal&quot;&gt;name&lt;/tt&gt; and &lt;tt class=&quot;docutils literal&quot;&gt;names&lt;/tt&gt; for in rule objects seems quite difficult
and... I don't think a regular expression exists to verify that a certain
string is a valid regular expression, does it? So certain finer checks are
still performed a step after schema validation, but still before handing
control to the rest of the program. However, emitting all the errors in one
go, together with the precise location where they occurred, makes the program
an ally rather than an opponent. &lt;em&gt;This is a program I would like to use.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Enough of YAML and configuration! Now I'm looking forward to dive into the
problem of navigating the graph of the tables across foreign keys and to
generate dynamically the nested queries to extract a consistent sample of
data, watching for the pitfalls of circular foreign keys and self-referencing
tables...&lt;/p&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="https://www.varrazzo.com/blog/2020/02/23/a-website/">
    <title type="text">A Website!</title>
    <id>urn:uuid:9ef98bd1-11e2-3b83-8c1c-2867fef80f27</id>
    <updated>2020-02-23T00:00:00Z</updated>
    <link href="https://www.varrazzo.com/blog/2020/02/23/a-website/" />
    <author>
      <name>Daniele Varrazzo</name>
    </author>
    <content type="html">&lt;p&gt;Time of changes.&lt;/p&gt;
&lt;p&gt;Last week, after 12 years working for the same company, I have terminated my
employment. It was a destabilising moment, followed by a wave of excitement
that I'm still riding, about what is to come.&lt;/p&gt;
&lt;p&gt;I still don't know about my next moves: for sure a break, and a journey
already organized in a couple of weeks, after which I doubt I will be able to
remain without working for a long time...&lt;/p&gt;
&lt;p&gt;My biggest desire would be to try and earn some living with &lt;a class=&quot;reference external&quot; href=&quot;/software/&quot;&gt;free software
projects&lt;/a&gt;. Some of my projects are already widely used, and I have new
features in mind to write. Other projects haven't been widely released, but I
have used them in my previous company and they are very promising. I have
recently set up a &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/sponsors/dvarrazzo/&quot;&gt;funding page&lt;/a&gt;: and I'm curious to see if it will become
anything relevant.&lt;/p&gt;
&lt;p&gt;At the same time, I am enjoying more and more practicing &lt;a class=&quot;reference external&quot; href=&quot;/photo/&quot;&gt;photography&lt;/a&gt;, so I
was also feeling the need to put somewhere an photographic portfolio, not only
a software one.&lt;/p&gt;
&lt;p&gt;But let's stop talking about me. Let's talk about this website, because
putting it together was actually cool.&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;how-was-it-made&quot;&gt;
&lt;h3&gt;How was it made&lt;/h3&gt;
&lt;p&gt;Unless you need to support several users editing the same content
concurrently, each one with different permissions, a database-backed website
is not really needed. And if a website is just a bunch of static pages, nice
things will happen:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;you can version it in Git or in your favourite SCM of the past,&lt;/li&gt;
&lt;li&gt;it's very simple to serve: just a bunch of files on a webserver,&lt;/li&gt;
&lt;li&gt;it will never be pwned,&lt;/li&gt;
&lt;li&gt;you can easily find someone to serve it for you: &lt;a class=&quot;reference external&quot; href=&quot;https://pages.github.com/&quot;&gt;GitHub pages&lt;/a&gt; for
instance.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Of course I don't want to write HTML by hand, so off I went looking for a
static website generator. As we mentioned GitHub pages, &lt;a class=&quot;reference external&quot; href=&quot;https://jekyllrb.com/docs/github-pages/&quot;&gt;Jekyll&lt;/a&gt; did come to
mind, but it has a couple of shortcomings:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;it's written in Ruby, which is not my expertise so, in case I needed a quick
hack, there would be a lot of overhead;&lt;/li&gt;
&lt;li&gt;it uses &lt;a class=&quot;reference external&quot; href=&quot;https://daringfireball.net/projects/markdown/&quot;&gt;Markdown&lt;/a&gt; as markup languages, which is &lt;a class=&quot;reference external&quot; href=&quot;http://www.zverovich.net/2016/06/16/rst-vs-markdown.html&quot;&gt;largely inferior&lt;/a&gt; to
&lt;a class=&quot;reference external&quot; href=&quot;https://en.wikipedia.org/wiki/ReStructuredText&quot;&gt;reStructuredText&lt;/a&gt; in design and tooling.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Shopping around, I found &lt;a class=&quot;reference external&quot; href=&quot;https://www.getlektor.com/&quot;&gt;Lektor&lt;/a&gt;, which seems actually a nifty thing. It uses
Markdown out-of-the-box as well, but it is easy to &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/fschulze/lektor-rst&quot;&gt;add reST using a
plugin&lt;/a&gt;. For an example, &lt;a class=&quot;reference external&quot; href=&quot;https://raw.githubusercontent.com/dvarrazzo/www.varrazzo.com/master/content/blog/a-website/contents.lr&quot;&gt;this is this article source&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I tried this setup with the &lt;a class=&quot;reference external&quot; href=&quot;https://www.psycopg.org/&quot;&gt;psycopg website&lt;/a&gt;, which I migrated from being a
Django website to &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/psycopg/psycopg-website/&quot;&gt;static content&lt;/a&gt;, and it was quite a simple task.&lt;/p&gt;
&lt;p&gt;Then I went around shopping for a nice template: I found a cool one called
&lt;a class=&quot;reference external&quot; href=&quot;achtungthemes.com/borano/&quot;&gt;Borano&lt;/a&gt; (look at the &lt;a class=&quot;reference external&quot; href=&quot;/photo/&quot;&gt;portfolio&lt;/a&gt;, it is a joy...). Lektor supports &lt;a class=&quot;reference external&quot; href=&quot;https://palletsprojects.com/p/jinja/&quot;&gt;Jinja&lt;/a&gt;
templates to spit HTML, so now I am in the process of &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/dvarrazzo/www.varrazzo.com/blob/e02696529e58b1b72bb9067c91e1c783895b8912/templates/page.html&quot;&gt;converting&lt;/a&gt; the
template to Jinja, while at the same time I try and and work out what is that
I have to say.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;the-workflow&quot;&gt;
&lt;h3&gt;The workflow&lt;/h3&gt;
&lt;p&gt;All it takes to edit the website is:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;use my favourite editor (no pesky HTML textarea) to create and edit pages;&lt;/li&gt;
&lt;li&gt;running &lt;tt class=&quot;docutils literal&quot;&gt;make serve&lt;/tt&gt; the website preview is immediately available on
&lt;tt class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;http://localhost:5000/&lt;/span&gt;&lt;/tt&gt;;&lt;/li&gt;
&lt;li&gt;commit and push to &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/dvarrazzo/www.varrazzo.com/&quot;&gt;the website repos&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is where the human work of adding or changing content finishes. What will
happen behind the scene will be:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://travis-ci.org/dvarrazzo/www.varrazzo.com&quot;&gt;Travis will render the pages&lt;/a&gt; and push the result to &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/dvarrazzo/dvarrazzo.github.io&quot;&gt;the GitHub pages
repos&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;from there the website is immediately published on &lt;a class=&quot;reference external&quot; href=&quot;https://www.varrazzo.com/&quot;&gt;https://www.varrazzo.com/&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That's it.&lt;/p&gt;
&lt;p&gt;I don't think this setup can work for everyone. I could probably set up the
system to some non tech friend and explain what to do, but they should at
least be comfortable to use git for their regular workflow. It might be
actually not such a high bar: if someone would like to try and start
publishing a small website please let me know!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;bonus-comments&quot;&gt;
&lt;h3&gt;Bonus: comments&lt;/h3&gt;
&lt;p&gt;A blog is not a blog if it doesn't have comments. But open comments take spam
with them, which in my experience got very boring to administer.&lt;/p&gt;
&lt;p&gt;I was thinking to use GitHub issues to store my comments, in order to leverage
their anti-spam system, whilst still being able to take them out in case I'd
like to migrate to something else. But apparently it's difficult to have a new
idea on Internet, and I found a few implementations already written.&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://utteranc.es/&quot;&gt;utteranc.es&lt;/a&gt; seems a very good one and quick to set up, so here it is... 👇&lt;/p&gt;
&lt;/div&gt;
</content>
  </entry>
</feed>
